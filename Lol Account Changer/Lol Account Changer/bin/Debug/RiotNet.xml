<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RiotNet</name>
    </assembly>
    <members>
        <member name="T:RiotNet.Conversions">
            <summary>
            Contains some extra conversions for internal use.
            </summary>
        </member>
        <member name="M:RiotNet.Conversions.DateTimeToEpochMilliseconds(System.DateTime)">
            <summary>
            Converts a DateTime object into epoch milliseconds (in UTC).
            </summary>
            <param name="time">The DateTime object to convert.</param>
            <returns>Epoch milliseconds.</returns>
        </member>
        <member name="M:RiotNet.Conversions.EpochMillisecondsToDateTime(System.Int64)">
            <summary>
            Converts epoch milliseconds into a DateTime (in UTC).
            </summary>
            <param name="epochMilliseconds">The number of milliseconds since the epoch reference date.</param>
            <returns>A DateTime (in UTC).</returns>
        </member>
        <member name="T:RiotNet.Converters.CaseInsensitiveDictionaryCreationConverter`1">
            <summary>
            Creates dictionaries with a case-insensitive key comparer for dictionaries with string keys and te specified type of values.
            </summary>
            <typeparam name="TValue">The type of values for the dictionary type that should have case-insensitive keys.</typeparam>
        </member>
        <member name="M:RiotNet.Converters.CaseInsensitiveDictionaryCreationConverter`1.#ctor">
            <summary>
            Creates a new <see cref="T:RiotNet.Converters.CaseInsensitiveDictionaryCreationConverter`1"/> instance.
            </summary>
        </member>
        <member name="M:RiotNet.Converters.CaseInsensitiveDictionaryCreationConverter`1.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">The type to convert.</param>
            <returns><value>true</value> if this converter can convert the specified type; otherwise <value>false</value>.</returns>
        </member>
        <member name="M:RiotNet.Converters.CaseInsensitiveDictionaryCreationConverter`1.Create(System.Type)">
            <summary>
            Creates a new instance of the object.
            </summary>
            <param name="objectType">The type to create.</param>
            <returns>The dictionary that was created.</returns>
        </member>
        <member name="T:RiotNet.Converters.TolerantStringEnumConverter">
            <summary>
            Converts an enum to and from JSON. If the JSON string value does not exist in the enum, the value is converted to -1 instead of throwing an exception. Values are serialized as strings.
            </summary>
        </member>
        <member name="M:RiotNet.Converters.TolerantStringEnumConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the enum.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The date to write.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:RiotNet.Converters.TolerantIntEnumConverter">
            <summary>
            Converts an enum to and from JSON. If the JSON string value does not exist in the enum, the value is still converted instead of throwing an exception. Values are serialized as numbers.
            </summary>
        </member>
        <member name="M:RiotNet.Converters.TolerantIntEnumConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">The type to convert.</param>
            <returns><value>true</value> if this converter can convert the specified type; otherwise <value>false</value>.</returns>
        </member>
        <member name="M:RiotNet.Converters.TolerantIntEnumConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the enum.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:RiotNet.Converters.TolerantIntEnumConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the enum.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The date to write.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:RiotNet.Converters.EpochDateTimeConverter">
            <summary>
            Converts a <see cref="T:System.DateTime"/> to and from JSON in epoch milliseconds format. Can also deserialize from a string in ISO format.
            </summary>
        </member>
        <member name="M:RiotNet.Converters.EpochDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the date.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:RiotNet.Converters.EpochDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the date.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The date to write.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:RiotNet.Converters.KeyedCollectionConverter">
            <summary>
            Reads and writes KeyedCollections as JSON objects instead of arrays.
            Any KeyedCollection deserialized by this converter must have a parameterless constructor.
            </summary>
        </member>
        <member name="M:RiotNet.Converters.KeyedCollectionConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">The type to convert.</param>
            <returns><value>true</value> if this converter can convert the specified type; otherwise <value>false</value>.</returns>
        </member>
        <member name="M:RiotNet.Converters.KeyedCollectionConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the KeyedCollection as a JSON object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:RiotNet.Converters.KeyedCollectionConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the KeyedCollection as a JSON object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The date to write.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:RiotNet.Converters.GameSubTypeConverter">
            <summary>
            Converts a <see cref="T:RiotNet.Models.GameSubType"/> in JSON to a consistent CLR format.
            </summary>
        </member>
        <member name="M:RiotNet.Converters.GameSubTypeConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">The type to convert.</param>
            <returns><value>true</value> if this converter can convert the specified type; otherwise <value>false</value>.</returns>
        </member>
        <member name="M:RiotNet.Converters.GameSubTypeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the GameSubType.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:RiotNet.Converters.GameSubTypeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the GameSubType.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The date to write.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:RiotNet.Converters.PlayerPositionConverter">
            <summary>
            Converts a <see cref="T:RiotNet.Models.PlayerPosition"/> in JSON to a consistent CLR format.
            </summary>
        </member>
        <member name="M:RiotNet.Converters.PlayerPositionConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">The type to convert.</param>
            <returns><value>true</value> if this converter can convert the specified type; otherwise <value>false</value>.</returns>
        </member>
        <member name="M:RiotNet.Converters.PlayerPositionConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the PlayerPosition.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:RiotNet.Converters.PlayerPositionConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the PlayerPosition.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The date to write.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:RiotNet.Converters.RangeConverter">
            <summary>
            Converts a range in JSON to a consistent CLR format.
            </summary>
            <remarks>
            A range value from the Riot Games API could be a list of integers, or the string "self".
            We want to convert the string "self" to an array containing a single zero.
            </remarks>
        </member>
        <member name="M:RiotNet.Converters.RangeConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">The type to convert.</param>
            <returns><value>true</value> if this converter can convert the specified type; otherwise <value>false</value>.</returns>
        </member>
        <member name="M:RiotNet.Converters.RangeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the ranges.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:RiotNet.Converters.RangeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the ranges.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The date to write.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:RiotNet.Converters.MillisecondsToTimeSpanConverter">
            <summary>
            Converts a <see cref="T:System.TimeSpan"/> to and from a number of seconds in JSON.
            </summary>
        </member>
        <member name="M:RiotNet.Converters.MillisecondsToTimeSpanConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">The type to convert.</param>
            <returns><value>true</value> if this converter can convert the specified type; otherwise <value>false</value>.</returns>
        </member>
        <member name="M:RiotNet.Converters.MillisecondsToTimeSpanConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the time span.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:RiotNet.Converters.MillisecondsToTimeSpanConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the time span.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The date to write.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:RiotNet.Converters.SecondsToTimeSpanConverter">
            <summary>
            Converts a <see cref="T:System.TimeSpan"/> to and from a number of seconds in JSON.
            </summary>
        </member>
        <member name="M:RiotNet.Converters.SecondsToTimeSpanConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">The type to convert.</param>
            <returns><value>true</value> if this converter can convert the specified type; otherwise <value>false</value>.</returns>
        </member>
        <member name="M:RiotNet.Converters.SecondsToTimeSpanConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the time span.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:RiotNet.Converters.SecondsToTimeSpanConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the time span.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The date to write.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:RiotNet.IRiotClient">
            <summary>
            A client that interacts with the Riot Games API.
            </summary>
        </member>
        <member name="P:RiotNet.IRiotClient.Region">
            <summary>
            Gets the region that the current <see cref="T:RiotNet.IRiotClient"/> connects to.
            </summary>
        </member>
        <member name="P:RiotNet.IRiotClient.PlatformId">
            <summary>
            Gets the platform ID of the current region.
            </summary>
        </member>
        <member name="P:RiotNet.IRiotClient.Settings">
            <summary>
            Gets the settings for the current <see cref="T:RiotNet.IRiotClient"/>.
            </summary>
        </member>
        <member name="E:RiotNet.IRiotClient.RequestTimedOut">
            <summary>
            Occurs when the a request times out.
            </summary>
        </member>
        <member name="E:RiotNet.IRiotClient.ConnectionFailed">
            <summary>
            Occurs when the client fails to connect to the server while executing a request.
            </summary>
        </member>
        <member name="E:RiotNet.IRiotClient.RateLimitExceeded">
            <summary>
            Occurs when the client executes a request when the API rate limit has been exceeded.
            </summary>
        </member>
        <member name="E:RiotNet.IRiotClient.ServerError">
            <summary>
            Occurs when the server returns an error code of 500 or higher.
            </summary>
        </member>
        <member name="E:RiotNet.IRiotClient.ResourceNotFound">
            <summary>
            Occurs when a request fails because a resource was not found.
            </summary>
        </member>
        <member name="E:RiotNet.IRiotClient.ResponseError">
            <summary>
            Occurs when a response returns an error code that does not fit into any other category, or an exception occurs during the response.
            </summary>
        </member>
        <member name="P:RiotNet.IRiotClient.ChampionApiVersion">
            <summary>
            Gets the currently supported version of the Champion API that the client communicates with.
            </summary>
        </member>
        <member name="M:RiotNet.IRiotClient.GetChampions(System.Boolean)">
            <summary>
            Gets dynamic champion information for all champions. This method uses the Champion API.
            </summary>
            <param name="freeToPlay">True if only requesting free to play champion information. Default is false.</param>
            <returns>List of champion information.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetChampionsAsync(System.Boolean)">
            <summary>
            Gets dynamic champion information for all champions. This method uses the Champion API.
            </summary>
            <param name="freeToPlay">True if only requesting free to play champion information. Default is false.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetChampionById(System.Int64)">
            <summary>
            Gets dynamic champion information for the specified champion. This method uses the Champion API.
            </summary>
            <param name="id">The champion id.</param>
            <returns>Champion information.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetChampionByIdAsync(System.Int64)">
            <summary>
            Gets dynamic champion information for the specified champion. This method uses the Champion API.
            </summary>
            <param name="id">The champion id.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetChampionMastery(System.Int64,System.Int64)">
            <summary>
            Gets information about a summoner's mastery of a champion. This method uses the Champion Mastery API.
            </summary>
            <param name="playerId">The summoner ID.</param>
            <param name="championId">The champion ID.</param>
            <returns>The champion mastery information.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetChampionMasteryAsync(System.Int64,System.Int64)">
            <summary>
            Gets information about a summoner's mastery of a champion. This method uses the Champion Mastery API.
            </summary>
            <param name="playerId">The summoner ID.</param>
            <param name="championId">The champion ID.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetChampionMasteries(System.Int64)">
            <summary>
            Gets information about a summoner's mastery of all champions they have played. This method uses the Champion Mastery API.
            </summary>
            <param name="playerId">The summoner ID.</param>
            <returns>The champion mastery information.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetChampionMasteriesAsync(System.Int64)">
            <summary>
            Gets information about a summoner's mastery of all champions they have played. This method uses the Champion Mastery API.
            </summary>
            <param name="playerId">The summoner ID.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetChampionMasteryScore(System.Int64)">
            <summary>
            Gets a summoner's champion mastery score (the sum of the champion levels of all champions for that summoner). This method uses the Champion Mastery API.
            </summary>
            <param name="playerId">The summoner ID.</param>
            <returns>The champion mastery information.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetChampionMasteryScoreAsync(System.Int64)">
            <summary>
            Gets a summoner's champion mastery score (the sum of the champion levels of all champions for that summoner). This method uses the Champion Mastery API.
            </summary>
            <param name="playerId">The summoner ID.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetChampionMasteryTopChampions(System.Int64,System.Nullable{System.Int32})">
            <summary>
            Gets information about a summoner's mastery of their most mastered champions. This method uses the Champion Mastery API.
            </summary>
            <param name="playerId">The summoner ID.</param>
            <param name="count">The number of entries to retrieve. Defaults to 3.</param>
            <returns>The champion mastery information.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetChampionMasteryTopChampionsAsync(System.Int64,System.Nullable{System.Int32})">
            <summary>
            Gets information about a summoner's mastery of their most mastered champions. This method uses the Champion Mastery API.
            </summary>
            <param name="playerId">The summoner ID.</param>
            <param name="count">The number of entries to retrieve. Defaults to 3.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="P:RiotNet.IRiotClient.CurrentGameApiVersion">
            <summary>
            Gets the currently supported version of the Current Game API that the client communicates with.
            </summary>
        </member>
        <member name="M:RiotNet.IRiotClient.GetCurrentGameBySummonerId(System.Int64)">
            <summary>
            Gets information about the current game a summoner is playing. This method uses the Current Game API.
            </summary>
            <param name="summonerId">The summoner's summoner ID.</param>
            <returns>The current game information.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetCurrentGameBySummonerIdAsync(System.Int64)">
            <summary>
            Gets information about the current game a summoner is playing. This method uses the Current Game API.
            </summary>
            <param name="summonerId">The summoner's summoner ID.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="P:RiotNet.IRiotClient.FeaturedGameApiVersion">
            <summary>
            Gets the currently supported version of the Featured Game API that the client communicates with.
            </summary>
        </member>
        <member name="M:RiotNet.IRiotClient.GetFeaturedGames">
            <summary>
            Gets the games currently featured in the League of Legends client. This method uses the Featured Game API.
            </summary>
            <returns>The featured games.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetFeaturedGamesAsync">
            <summary>
            Gets the games currently featured in the League of Legends client. This method uses the Featured Game API.
            </summary>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="P:RiotNet.IRiotClient.GameApiVersion">
            <summary>
            Gets the currently supported version of the Game API that the client communicates with.
            </summary>
        </member>
        <member name="M:RiotNet.IRiotClient.GetGamesBySummonerId(System.Int64)">
            <summary>
            Gets the recent games for a summoner. This method uses the Game API.
            </summary>
            <param name="summonerId">The summoner's summoner ID.</param>
            <returns>The summoner's recent games.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetGamesBySummonerIdAsync(System.Int64)">
            <summary>
            Gets the recent games for a summoner. This method uses the Game API.
            </summary>
            <param name="summonerId">The summoner's summoner ID.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="P:RiotNet.IRiotClient.LeagueApiVersion">
            <summary>
            Gets the currently supported version of the League API that the client communicates with.
            </summary>
        </member>
        <member name="M:RiotNet.IRiotClient.GetLeaguesBySummonerIds(System.Int64[])">
            <summary>
            Gets the full league information for all leagues that the summoners are in, including the leages for the teams they are on. Data is mapped by summoner ID. This method uses the League API.
            </summary>
            <param name="summonerIds">The summoners' summoner IDs. The maximum allowed at once is 10.</param>
            <returns>The mapping from summoner IDs to the collection of leagues.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetLeaguesBySummonerIdsAsync(System.Int64[])">
            <summary>
            Gets the full league information for all leagues that the summoners are in, including the leages for the teams they are on. Data is mapped by summoner ID. This method uses the League API.
            </summary>
            <param name="summonerIds">The summoners' summoner IDs. The maximum allowed at once is 10.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetLeagueEntriesBySummonerIds(System.Int64[])">
            <summary>
            Gets the full league information for all leagues that the summoners are in, including the leages for the teams they are on. Only includes the league entry for the specified summoner(s). Data is mapped by summoner ID. This method uses the League API.
            </summary>
            <param name="summonerIds">The summoners' summoner IDs. The maximum allowed at once is 10.</param>
            <returns>The mapping from summoner IDs to the collection of league entries for the summoner.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetLeagueEntriesBySummonerIdsAsync(System.Int64[])">
            <summary>
            Gets the full league information for all leagues that the summoners are in, including the leages for the teams they are on. Only includes the league entry for the specified summoner(s). Data is mapped by summoner ID. This method uses the League API.
            </summary>
            <param name="summonerIds">The summoners' summoner IDs. The maximum allowed at once is 10.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetLeaguesByTeamIds(System.String[])">
            <summary>
            Gets the full league information for all leagues that the teams are in. Data is mapped by team ID. This method uses the League API.
            </summary>
            <param name="teamIds">The teams' team IDs. The maximum allowed at once is 10.</param>
            <returns>The mapping from team IDs to the collection of leagues.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetLeaguesByTeamIdsAsync(System.String[])">
            <summary>
            Gets the full league information for all leagues that the teams are in. Data is mapped by team ID. This method uses the League API.
            </summary>
            <param name="teamIds">The teams' team IDs. The maximum allowed at once is 10.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetLeagueEntriesByTeamIds(System.String[])">
            <summary>
            Gets the league information for all leagues that the teams are in. Only includes the league entry for the specified team(s). Data is mapped by team ID. This method uses the League API.
            </summary>
            <param name="teamIds">The teams' team IDs. The maximum allowed at once is 10.</param>
            <returns>The mapping from team IDs to the collection of league entries for the team.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetLeagueEntriesByTeamIdsAsync(System.String[])">
            <summary>
            Gets the league information for all leagues that the teams are in. Only includes the league entry for the specified team(s). Data is mapped by team ID. This method uses the League API.
            </summary>
            <param name="teamIds">The teams' team IDs. The maximum allowed at once is 10.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetChallengerLeague(RiotNet.Models.RankedQueue)">
            <summary>
            Gets the challenger league. This method uses the League API.
            </summary>
            <param name="type">The queue type.</param>
            <returns>The challenger league.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetChallengerLeagueAsync(RiotNet.Models.RankedQueue)">
            <summary>
            Gets the challenger league. This method uses the League API.
            </summary>
            <param name="type">The queue type.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetMasterLeague(RiotNet.Models.RankedQueue)">
            <summary>
            Gets the master league. This method uses the League API.
            </summary>
            <param name="type">The queue type.</param>
            <returns>The master league.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetMasterLeagueAsync(RiotNet.Models.RankedQueue)">
            <summary>
            Gets the master league. This method uses the League API.
            </summary>
            <param name="type">The queue type.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="P:RiotNet.IRiotClient.LolStaticDataApiVersion">
            <summary>
            Gets the currently supported version of the LoL Static Data API that the client communicates with.
            </summary>
        </member>
        <member name="M:RiotNet.IRiotClient.GetStaticChampions(System.String,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the details for all champions.
            </summary>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from <see cref="M:RiotNet.IRiotClient.GetVersionsAsync"/>.</param>
            <param name="dataById">If true, the returned data map will use the champions' IDs as the keys. If false, the returned data map will use the champions' keys instead.</param>
            <param name="champListData">Tags to return additional data. Valid tags are any property of the <see cref="T:RiotNet.Models.StaticChampion"/> or <see cref="T:RiotNet.Models.StaticChampionList"/> objects. Only type, version, data, id, name, key, and title are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.</param>
            <returns>A <see cref="T:RiotNet.Models.StaticChampionList"/>.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.IRiotClient.GetStaticChampionsAsync(System.String,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the details for all champions. This method uses the LoL Static Data API.
            </summary>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from <see cref="M:RiotNet.IRiotClient.GetVersionsAsync"/>.</param>
            <param name="dataById">If true, the returned data map will use the champions' IDs as the keys. If false, the returned data map will use the champions' keys instead.</param>
            <param name="champListData">Tags to return additional data. Valid tags are any property of the <see cref="T:RiotNet.Models.StaticChampion"/> or <see cref="T:RiotNet.Models.StaticChampionList"/> objects. Only type, version, data, id, name, key, and title are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.IRiotClient.GetStaticChampionById(System.Int32,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets champion details by ID. This method uses the LoL Static Data API.
            </summary>
            <param name="id">The champion ID.</param>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. A list of valid versions can be obtained from <see cref="M:RiotNet.IRiotClient.GetStaticVersions"/>.</param>
            <param name="champData">Tags to return additional data. Valid tags are any property of the <see cref="T:RiotNet.Models.StaticChampion"/> object. Only id, name, key, and title are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.</param>
            <returns>A <see cref="T:RiotNet.Models.StaticChampion"/>.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.IRiotClient.GetStaticChampionByIdAsync(System.Int32,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets champion details by ID. This method uses the LoL Static Data API.
            </summary>
            <param name="id">The champion ID.</param>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. A list of valid versions can be obtained from <see cref="M:RiotNet.IRiotClient.GetVersionsAsync"/>.</param>
            <param name="champData">Tags to return additional data. Valid tags are any property of the <see cref="T:RiotNet.Models.StaticChampion"/> object. Only id, name, key, and title are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.IRiotClient.GetStaticItems(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets a list of all available items. This method uses the LoL Static Data API.
            </summary>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from <see cref="M:RiotNet.IRiotClient.GetStaticVersions"/>.</param>
            <param name="itemListData">Tags to return additional data. Valid tags are any property of the <see cref="T:RiotNet.Models.StaticItem"/> or <see cref="T:RiotNet.Models.StaticItemList"/> objects. Only id, name, type, version, basic, data, plaintext, group, and description are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.</param>
            <returns>A <see cref="T:RiotNet.Models.StaticItemList"/>.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.IRiotClient.GetStaticItemsAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets a list of all available items. This method uses the LoL Static Data API.
            </summary>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from <see cref="M:RiotNet.IRiotClient.GetVersionsAsync"/>.</param>
            <param name="itemListData">Tags to return additional data. Valid tags are any property of the <see cref="T:RiotNet.Models.StaticItem"/> or <see cref="T:RiotNet.Models.StaticItemList"/> objects. Only id, name, type, version, basic, data, plaintext, group, and description are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.IRiotClient.GetStaticLanguages">
            <summary>
            Gets a list of available languages. This method uses the LoL Static Data API.
            </summary>
            <returns>A list of strings that represent a language.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.IRiotClient.GetStaticLanguagesAsync">
            <summary>
            Gets a list of available languages. This method uses the LoL Static Data API.
            </summary>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.IRiotClient.GetStaticLanguageStrings(System.String,System.String)">
            <summary>
            Gets a list of available language strings. This method uses the LoL Static Data API.
            </summary>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from <see cref="M:RiotNet.IRiotClient.GetStaticVersions"/>.</param>
            <returns>A <see cref="T:RiotNet.Models.StaticLanuageStrings"/>.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.IRiotClient.GetStaticLanguageStringsAsync(System.String,System.String)">
            <summary>
            Gets a list of available language strings. This method uses the LoL Static Data API.
            </summary>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from <see cref="M:RiotNet.IRiotClient.GetVersionsAsync"/>.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.IRiotClient.GetStaticMaps(System.String,System.String)">
            <summary>
            Gets a list of all maps. This method uses the LoL Static Data API.
            </summary>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from <see cref="M:RiotNet.IRiotClient.GetStaticVersions"/>.</param>
            <returns>A <see cref="T:RiotNet.Models.StaticMapList"/>.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.IRiotClient.GetStaticMapsAsync(System.String,System.String)">
            <summary>
            Gets a list of all maps. This method uses the LoL Static Data API.
            </summary>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from <see cref="M:RiotNet.IRiotClient.GetVersionsAsync"/>.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.IRiotClient.GetStaticMasteries(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the details for all masteries. This method uses the LoL Static Data API.
            </summary>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from <see cref="M:RiotNet.IRiotClient.GetVersionsAsync"/>.</param>
            <param name="masteryListData">Tags to return additional data. Valid tags are any property of the <see cref="T:RiotNet.Models.StaticMastery"/> or <see cref="T:RiotNet.Models.StaticMasteryList"/> objects. Only type, version, data, id, name, and description are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.</param>
            <returns>A <see cref="T:RiotNet.Models.StaticMasteryList"/>.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.IRiotClient.GetStaticMasteriesAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the details for all masteries. This method uses the LoL Static Data API.
            </summary>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from <see cref="M:RiotNet.IRiotClient.GetVersionsAsync"/>.</param>
            <param name="masteryListData">Tags to return additional data. Valid tags are any property of the <see cref="T:RiotNet.Models.StaticMastery"/> or <see cref="T:RiotNet.Models.StaticMasteryList"/> objects. Only type, version, data, id, name, and description are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.IRiotClient.GetStaticMasteryById(System.Int32,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets mastery details by ID. This method uses the LoL Static Data API.
            </summary>
            <param name="id">The mastery ID.</param>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. A list of valid versions can be obtained from <see cref="M:RiotNet.IRiotClient.GetStaticVersions"/>.</param>
            <param name="masteryData">Tags to return additional data. Valid tags are any property of the <see cref="T:RiotNet.Models.StaticMastery"/> object. Only id, name, and description are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.</param>
            <returns>A <see cref="T:RiotNet.Models.StaticChampion"/>.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.IRiotClient.GetStaticMasteryByIdAsync(System.Int32,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets mastery details by ID. This method uses the LoL Static Data API.
            </summary>
            <param name="id">The mastery ID.</param>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. A list of valid versions can be obtained from <see cref="M:RiotNet.IRiotClient.GetVersionsAsync"/>.</param>
            <param name="masteryData">Tags to return additional data. Valid tags are any property of the <see cref="T:RiotNet.Models.StaticMastery"/> object. Only id, name, description are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.IRiotClient.GetStaticRealm">
            <summary>
            Gets the realm data. This method uses the LoL Static Data API.
            </summary>
            <returns>The current realm data.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.IRiotClient.GetStaticRealmAsync">
            <summary>
            Gets the realm data. This method uses the LoL Static Data API.
            </summary>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.IRiotClient.GetStaticRunes(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets a list of all available runes. This method uses the LoL Static Data API.
            </summary>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from <see cref="M:RiotNet.IRiotClient.GetStaticVersions"/>.</param>
            <param name="runeListData">Tags to return additional data. Valid tags are any property of the <see cref="T:RiotNet.Models.StaticRune"/> or <see cref="T:RiotNet.Models.StaticRuneList"/> objects. Only type, version, data, id, name, rune, and description are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.</param>
            <returns>A dictionary of runes indexed by ID.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.IRiotClient.GetStaticRunesAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets a list of all available runes. This method uses the LoL Static Data API.
            </summary>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from <see cref="M:RiotNet.IRiotClient.GetVersionsAsync"/>.</param>
            <param name="runeListData">Tags to return additional data. Valid tags are any property of the <see cref="T:RiotNet.Models.StaticRune"/> or <see cref="T:RiotNet.Models.StaticRuneList"/> objects. Only type, version, data, id, name, rune, and description are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.IRiotClient.GetStaticRuneById(System.Int32,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets a rune by ID. This method uses the LoL Static Data API.
            </summary>
            <param name="id">The rune ID.</param>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. A list of valid versions can be obtained from <see cref="M:RiotNet.IRiotClient.GetStaticVersions"/>.</param>
            <param name="runeData">Tags to return additional data. Valid tags are any property of the <see cref="T:RiotNet.Models.StaticRune"/> object. Only id, name, rune, and description are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.</param>
            <returns>A <see cref="T:RiotNet.Models.StaticRune"/>.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.IRiotClient.GetStaticRuneByIdAsync(System.Int32,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets a rune by ID. This method uses the LoL Static Data API.
            </summary>
            <param name="id">The rune ID.</param>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. A list of valid versions can be obtained from <see cref="M:RiotNet.IRiotClient.GetVersionsAsync"/>.</param>
            <param name="runeData">Tags to return additional data. Valid tags are any property of the <see cref="T:RiotNet.Models.StaticRune"/> object. Only id, name, rune, and description are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.IRiotClient.GetStaticSummonerSpells(System.String,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the details for all summoner spells. This method uses the LoL Static Data API.
            </summary>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from <see cref="M:RiotNet.IRiotClient.GetVersionsAsync"/>.</param>
            <param name="dataById">If true, the returned data map will use the spells' IDs as the keys. If false, the returned data map will use the spells' keys instead.</param>
            <param name="spellListData">Tags to return additional data. Valid tags are any property of the <see cref="T:RiotNet.Models.StaticSummonerSpell"/> or <see cref="T:RiotNet.Models.StaticSummonerSpellList"/> objects. Only type, version, data, id, key, name, description, and summonerLevel are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.</param>
            <returns>A <see cref="T:RiotNet.Models.StaticSummonerSpellList"/>.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.IRiotClient.GetStaticSummonerSpellsAsync(System.String,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the details for all summoner spells. This method uses the LoL Static Data API.
            </summary>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from <see cref="M:RiotNet.IRiotClient.GetVersionsAsync"/>.</param>
            <param name="dataById">If true, the returned data map will use the spells' IDs as the keys. If false, the returned data map will use the spells' keys instead.</param>
            <param name="spellListData">Tags to return additional data. Valid tags are any property of the <see cref="T:RiotNet.Models.StaticSummonerSpell"/> or <see cref="T:RiotNet.Models.StaticSummonerSpellList"/> objects. Only type, version, data, id, key, name, description, and summonerLevel are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.IRiotClient.GetStaticSummonerSpellById(System.Int32,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets summoner spell details by ID. This method uses the LoL Static Data API.
            </summary>
            <param name="id">The summoner spell ID.</param>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. A list of valid versions can be obtained from <see cref="M:RiotNet.IRiotClient.GetStaticVersions"/>.</param>
            <param name="spellData">Tags to return additional data. Valid tags are any property of the <see cref="T:RiotNet.Models.StaticSummonerSpell"/> object. Only id, key, name, description, and summonerLevel are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.</param>
            <returns>A <see cref="T:RiotNet.Models.StaticSummonerSpell"/>.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.IRiotClient.GetStaticSummonerSpellByIdAsync(System.Int32,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets summoner spell details by ID. This method uses the LoL Static Data API.
            </summary>
            <param name="id">The summoner spell ID.</param>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. A list of valid versions can be obtained from <see cref="M:RiotNet.IRiotClient.GetVersionsAsync"/>.</param>
            <param name="spellData">Tags to return additional data. Valid tags are any property of the <see cref="T:RiotNet.Models.StaticSummonerSpell"/> object. Only id, key, name, description, and summonerLevel are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.IRiotClient.GetStaticVersions">
            <summary>
            Gets the list of available game versions. This method uses the LoL Static Data API. Each version represents a patch number.
            </summary>
            <returns>The list of versions.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.IRiotClient.GetVersionsAsync">
            <summary>
            Gets the list of available game versions. This method uses the LoL Static Data API.
            </summary>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="P:RiotNet.IRiotClient.LolStatusApiVersion">
            <summary>
            Gets the currently supported version of the LoL Status API that the client communicates with.
            </summary>
        </member>
        <member name="M:RiotNet.IRiotClient.GetShards">
            <summary>
            Gets the list of shards for all reagions. This method uses the LoL Status API.
            </summary>
            <returns>The shards.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.IRiotClient.GetShardsAsync">
            <summary>
            Gets the list of shards for all reagions. This method uses the LoL Status API.
            </summary>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.IRiotClient.GetShardStatus">
            <summary>
            Gets the status of the shard for the current region. This method uses the LoL Status API.
            </summary>
            <returns>The shard's status.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetShardStatusAsync">
            <summary>
            Gets the status of the shard for the current region. This method uses the LoL Status API.
            </summary>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="P:RiotNet.IRiotClient.MatchApiVersion">
            <summary>
            Gets the currently supported version of the Match API that the client communicates with.
            </summary>
        </member>
        <member name="M:RiotNet.IRiotClient.GetMatchIdsByTournamentCode(System.String)">
            <summary>
            Gets the list of match IDs for a tournament code. This method uses the Match API. This endpoint is only accessible if you have a tournament API key.
            </summary>
            <param name="tournamentCode">The tournament code.</param>
            <returns>The match IDs.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetMatchIdsByTournamentCodeAsync(System.String)">
            <summary>
            Gets the list of match IDs for a tournament code. This method uses the Match API. This endpoint is only accessible if you have a tournament API key.
            </summary>
            <param name="tournamentCode">The tournament code.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetMatchForTournament(System.Int64,System.String)">
            <summary>
            Gets the details of a match. This method uses the Match API. This endpoint is only accessible if you have a tournament API key.
            </summary>
            <param name="matchId">The ID of the match.</param>
            <param name="tournamentCode">The tournament code.</param>
            <returns>The details of the match.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetMatchForTournamentAsync(System.Int64,System.String)">
            <summary>
            Gets the details of a match. This method uses the Match API. This endpoint is only accessible if you have a tournament API key.
            </summary>
            <param name="matchId">The ID of the match.</param>
            <param name="tournamentCode">The tournament code.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetMatch(System.Int64,System.Boolean)">
            <summary>
            Gets the details of a match. This method uses the Match API.
            </summary>
            <param name="matchId">The ID of the match (also referred to as Game ID).</param>
            <param name="includeTimeline">Whether or not to include the match timeline data.</param>
            <returns>The details of the match.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetMatchAsync(System.Int64,System.Boolean)">
            <summary>
            Gets the details of a match. This method uses the Match API.
            </summary>
            <param name="matchId">The ID of the match (also referred to as Game ID).</param>
            <param name="includeTimeline">Whether or not to include the match timeline data.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="P:RiotNet.IRiotClient.MatchListApiVersion">
            <summary>
            Gets the currently supported version of the Match List API that the client communicates with.
            </summary>
        </member>
        <member name="M:RiotNet.IRiotClient.GetMatchList(System.Int64,System.Int64[],RiotNet.Models.RankedQueue[],RiotNet.Models.Season[],System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Gets the match list for a summoner. This method uses the Match List API.
            </summary>
            <param name="summonerId">The summoner's summoner IDs.</param>
            <param name="championIds">Only get games where the summoner played one of these champions.</param>
            <param name="rankedQueues">Only get games from these ranked queues.</param>
            <param name="seasons">Only get games from these seasons.</param>
            <param name="beginTime">Only get games played after this time.</param>
            <param name="endTime">Only get games played before this time.</param>
            <param name="beginIndex">The begin index to use for fetching games.</param>
            <param name="endIndex">The end index to use for fetching games. The maximum allowed difference between beginIndex and endIndex is 20; if it is larger than 20, endIndex will be modified to satisfy this restriction.</param>
            <returns>The match list for the summoner.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetMatchListAsync(System.Int64,System.Int64[],RiotNet.Models.RankedQueue[],RiotNet.Models.Season[],System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Gets the match list for a summoner. This method uses the Match List API.
            </summary>
            <param name="summonerId">The summoner's summoner IDs.</param>
            <param name="championIds">Only get games where the summoner played one of these champions.</param>
            <param name="rankedQueues">Only get games from these ranked queues.</param>
            <param name="seasons">Only get games from these seasons.</param>
            <param name="beginTime">Only get games played after this time.</param>
            <param name="endTime">Only get games played before this time.</param>
            <param name="beginIndex">The begin index to use for fetching games.</param>
            <param name="endIndex">The end index to use for fetching games. The maximum allowed difference between beginIndex and endIndex is 20; if it is larger than 20, endIndex will be modified to satisfy this restriction.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="P:RiotNet.IRiotClient.StatsApiVersion">
            <summary>
            Gets the currently supported version of the Stats API that the client communicates with.
            </summary>
        </member>
        <member name="M:RiotNet.IRiotClient.GetRankedStats(System.Int64,System.Nullable{RiotNet.Models.Season})">
            <summary>
            Gets the ranked stats for a summoner. Includes ranked stats for Summoner's Rift and Twisted Treeline. This method uses the Stats API.
            </summary>
            <param name="summonerId">The summoner's summoner IDs.</param>
            <param name="season">The season to get ranked stats for. If unspecified, stats for the current season are returned.</param>
            <returns>The ranked stats for the summoner for the specified season.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetRankedStatsAsync(System.Int64,System.Nullable{RiotNet.Models.Season})">
            <summary>
            Gets the ranked stats for a summoner. Includes ranked stats for Summoner's Rift and Twisted Treeline. This method uses the Stats API.
            </summary>
            <param name="summonerId">The summoner's summoner IDs.</param>
            <param name="season">The season to get ranked stats for. If unspecified, stats for the current season are returned.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetStatsSummary(System.Int64,System.Nullable{RiotNet.Models.Season})">
            <summary>
            Gets aggregated stats for a summoner. This method uses the Stats API.
            </summary>
            <param name="summonerId">The summoner's summoner IDs.</param>
            <param name="season">The season to get stats for. If unspecified, stats for the current season are returned.</param>
            <returns>The aggregated stats for the summoner for the specified season. One summary is returned per queue type.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetStatsSummaryAsync(System.Int64,System.Nullable{RiotNet.Models.Season})">
            <summary>
            Gets aggregated stats for a summoner. This method uses the Stats API.
            </summary>
            <param name="summonerId">The summoner's summoner IDs.</param>
            <param name="season">The season to get stats for. If unspecified, stats for the current season are returned.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="P:RiotNet.IRiotClient.SummonerApiVersion">
            <summary>
            Gets the currently supported version of the Summoner API that the client communicates with.
            </summary>
        </member>
        <member name="M:RiotNet.IRiotClient.GetSummonersBySummonerNames(System.String[])">
            <summary>
            Gets the summoner information for each summoner whose summoner name is in summonerNames. This method uses the Summoner API.
            </summary>
            <param name="summonerNames">The summoner names The maximum allowed at once is 40..</param>
            <returns>The mapping from standardized summoner name (all lowercase, spaces removed) to summoner information.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetSummonersBySummonerNamesAsync(System.String[])">
            <summary>
            Gets the summoner information for each summoner whose summoner name is in summonerNames. This method uses the Summoner API.
            </summary>
            <param name="summonerNames">The summoner names. The maximum allowed at once is 40.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetSummonerBySummonerName(System.String)">
            <summary>
            Gets the summoner information for the specified summoner. This method uses the Summoner API.
            </summary>
            <param name="summonerName">The summoner name.</param>
            <returns>A <see cref="T:RiotNet.Models.Summoner"/>.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetSummonerBySummonerNameAsync(System.String)">
            <summary>
            Gets the summoner information for the specified summoner. This method uses the Summoner API.
            </summary>
            <param name="summonerName">The summoner name.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetSummonersBySummonerIds(System.Int64[])">
            <summary>
            Gets the summoner information for each summoner whose summoner ID is in summonerIds. This method uses the Summoner API.
            </summary>
            <param name="summonerIds">The summoner IDs. The maximum allowed at once is 40.</param>
            <returns>The mapping from summoner ID to summoner information.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetSummonersBySummonerIdsAsync(System.Int64[])">
            <summary>
            Gets the summoner information for each summoner whose summoner ID is in summonerIds. This method uses the Summoner API.
            </summary>
            <param name="summonerIds">The summoner IDs. The maximum allowed at once is 40.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetSummonerBySummonerId(System.Int64)">
            <summary>
            Gets the summoner information for the specified summoner. This method uses the Summoner API.
            </summary>
            <param name="summonerId">The summoner ID.</param>
            <returns>A <see cref="T:RiotNet.Models.Summoner"/>.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetSummonerBySummonerIdAsync(System.Int64)">
            <summary>
            Gets the summoner information for the specified summoner. This method uses the Summoner API.
            </summary>
            <param name="summonerId">The summoner ID.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetSummonerMasteriesBySummonerIds(System.Int64[])">
            <summary>
            Gets the mastery pages for each summoner whose summoner ID is in summonerIds. This method uses the Summoner API.
            </summary>
            <param name="summonerIds">The summoner IDs. The maximum allowed at once is 40.</param>
            <returns>The mapping from summoner ID to collection of mastery pages.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetSummonerMasteriesBySummonerIdsAsync(System.Int64[])">
            <summary>
            Gets the mastery pages for each summoner whose summoner ID is in summonerIds. This method uses the Summoner API.
            </summary>
            <param name="summonerIds">The summoner IDs. The maximum allowed at once is 40.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetSummonerNamesBySummonerIds(System.Int64[])">
            <summary>
            Gets the summoner name for each summoner whose summoner ID is in summonerIds. This method uses the Summoner API.
            </summary>
            <param name="summonerIds">The summoner IDs.</param>
            <returns>The mapping from summoner ID to summoner name.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetSummonerNamesBySummonerIdsAsync(System.Int64[])">
            <summary>
            Gets the summoner name for each summoner whose summoner ID is in summonerIds. This method uses the Summoner API.
            </summary>
            <param name="summonerIds">The summoner IDs. The maximum allowed at once is 40.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetSummonerRunesBySummonerIds(System.Int64[])">
            <summary>
            Gets the rune pages for each summoner whose summoner ID is in summonerIds. This method uses the Summoner API.
            </summary>
            <param name="summonerIds">The summoner IDs. The maximum allowed at once is 40.</param>
            <returns>The mapping from summoner ID to collection of rune pages.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetSummonerRunesBySummonerIdsAsync(System.Int64[])">
            <summary>
            Gets the rune pages for each summoner whose summoner ID is in summonerIds. This method uses the Summoner API.
            </summary>
            <param name="summonerIds">The summoner IDs. The maximum allowed at once is 40.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="P:RiotNet.IRiotClient.TeamApiVersion">
            <summary>
            Gets the currently supported version of the Team API that the client communicates with.
            </summary>
        </member>
        <member name="M:RiotNet.IRiotClient.GetTeamsBySummonerIds(System.Int64[])">
            <summary>
            Gets, for every summoner in summonerIds, the teams that summoner is on. This method uses the Team API.
            </summary>
            <param name="summonerIds">The summoner IDs. The maximum allowed at once is 10.</param>
            <returns>The mapping from summoner ID to the teams that summoner is on.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetTeamsBySummonerIdsAsync(System.Int64[])">
            <summary>
            Gets, for every summoner in summonerIds, the teams that summoner is on. This method uses the Team API.
            </summary>
            <param name="summonerIds">The summoner IDs. The maximum allowed at once is 10.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetTeamsByTeamIds(System.String[])">
            <summary>
            Gets the team corresponding to each team ID. This method uses the Team API.
            </summary>
            <param name="teamIds">The team IDs. The maximum allowed at once is 10.</param>
            <returns>The mapping from team IDs to teams.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetTeamsByTeamIdsAsync(System.String[])">
            <summary>
            Gets the team corresponding to each team ID. This method uses the Team API.
            </summary>
            <param name="teamIds">The team IDs. The maximum allowed at once is 10.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="P:RiotNet.IRiotClient.TournamentApiVersion">
            <summary>
            Gets the currently supported version of the Tournament API that the client communicates with.
            </summary>
        </member>
        <member name="M:RiotNet.IRiotClient.CreateTournamentProvider(System.String)">
            <summary>
            Registers the current client as a tournament provider. This method uses the Tournament API. This endpoint is only accessible if you have a tournament API key.
            </summary>
            <param name="url">The provider's callback URL to which tournament game results in this region should be posted.</param>
            <returns>The registered providerID.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.CreateTournamentProviderAsync(System.String)">
            <summary>
            Registers the current client as a tournament provider. This method uses the Tournament API. This endpoint is only accessible if you have a tournament API key.
            </summary>
            <param name="url">The provider's callback URL to which tournament game results in this region should be posted.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.CreateTournament(System.Int64,System.String)">
            <summary>
            Creates a tournament. This method uses the Tournament API. This endpoint is only accessible if you have a tournament API key.
            </summary>
            <param name="providerID">The providerID obtained from <see cref="M:RiotNet.IRiotClient.CreateTournamentProvider(System.String)"/>.</param>
            <param name="name">The optional name of the tournament.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.CreateTournamentAsync(System.Int64,System.String)">
            <summary>
            Creates a tournament. This method uses the Tournament API. This endpoint is only accessible if you have a tournament API key.
            </summary>
            <param name="providerID">The providerID obtained from <see cref="M:RiotNet.IRiotClient.CreateTournamentProviderAsync(System.String)"/>.</param>
            <param name="name">The optional name of the tournament.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.CreateTournamentCode(System.Int64,System.Nullable{System.Int32},System.Collections.Generic.List{System.Int64},RiotNet.Models.MapType,RiotNet.Models.PickType,RiotNet.Models.SpectatorType,System.Int32,System.String)">
            <summary>
            Creates one or more tournament codes. This method uses the Tournament API. This endpoint is only accessible if you have a tournament API key.
            </summary>
            <param name="tournamentId">The tournament ID obtained from <see cref="M:RiotNet.IRiotClient.CreateTournament(System.Int64,System.String)"/>.</param>
            <param name="count">The number of codes to create (max 1000).</param>
            <param name="allowedSummonerIds">Optional list of participants in order to validate the players eligible to join the lobby.</param>
            <param name="mapType">The map type of the game.</param>
            <param name="pickType">The pick type of the game.</param>
            <param name="spectatorType">The spectator type of the game.</param>
            <param name="teamSize">The team size of the game. Valid values are 1-5.</param>
            <param name="metadata">Optional string that may contain any data in any format, if specified at all. Used to denote any custom information about the game.</param>
            <returns>A list of tournament codes.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.CreateTournamentCodeAsync(System.Int64,System.Nullable{System.Int32},System.Collections.Generic.List{System.Int64},RiotNet.Models.MapType,RiotNet.Models.PickType,RiotNet.Models.SpectatorType,System.Int32,System.String)">
            <summary>
            Creates one or more tournament codes. This method uses the Tournament API. This endpoint is only accessible if you have a tournament API key.
            </summary>
            <param name="tournamentId">The tournament ID obtained from <see cref="M:RiotNet.IRiotClient.CreateTournamentAsync(System.Int64,System.String)"/>.</param>
            <param name="count">The number of codes to create (max 1000).</param>
            <param name="allowedSummonerIds">Optional list of participants in order to validate the players eligible to join the lobby.</param>
            <param name="mapType">The map type of the game.</param>
            <param name="pickType">The pick type of the game.</param>
            <param name="spectatorType">The spectator type of the game.</param>
            <param name="teamSize">The team size of the game. Valid values are 1-5.</param>
            <param name="metadata">Optional string that may contain any data in any format, if specified at all. Used to denote any custom information about the game.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetTournamentCode(System.String)">
            <summary>
            Gets the details of a tournament code. This method uses the Tournament API. This endpoint is only accessible if you have a tournament API key.
            </summary>
            <param name="tournamentCode">The tournament code obtained from <see cref="M:RiotNet.IRiotClient.CreateTournamentCode(System.Int64,System.Nullable{System.Int32},System.Collections.Generic.List{System.Int64},RiotNet.Models.MapType,RiotNet.Models.PickType,RiotNet.Models.SpectatorType,System.Int32,System.String)"/>.</param>
            <returns>The tournament code details.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetTournamentCodeAsync(System.String)">
            <summary>
            Gets the details of a tournament code. This method uses the Tournament API. This endpoint is only accessible if you have a tournament API key.
            </summary>
            <param name="tournamentCode">The tournament code obtained from <see cref="M:RiotNet.IRiotClient.CreateTournamentCodeAsync(System.Int64,System.Nullable{System.Int32},System.Collections.Generic.List{System.Int64},RiotNet.Models.MapType,RiotNet.Models.PickType,RiotNet.Models.SpectatorType,System.Int32,System.String)"/>.</param>
            <returns>The tournament code details.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.UpdateTournamentCode(System.String,System.Collections.Generic.List{System.Int64},RiotNet.Models.MapType,RiotNet.Models.PickType,RiotNet.Models.SpectatorType)">
            <summary>
            Saves changes to a tournament code. This method uses the Tournament API. This endpoint is only accessible if you have a tournament API key.
            </summary>
            <param name="tournamentCode">The tournament code obtained from <see cref="M:RiotNet.IRiotClient.CreateTournamentCode(System.Int64,System.Nullable{System.Int32},System.Collections.Generic.List{System.Int64},RiotNet.Models.MapType,RiotNet.Models.PickType,RiotNet.Models.SpectatorType,System.Int32,System.String)"/>.</param>
            <param name="allowedSummonerIds">Optional list of participants in order to validate the players eligible to join the lobby.</param>
            <param name="mapType">The map type of the game.</param>
            <param name="pickType">The pick type of the game.</param>
            <param name="spectatorType">The spectator type of the game.</param>
        </member>
        <member name="M:RiotNet.IRiotClient.UpdateTournamentCodeAsync(System.String,System.Collections.Generic.List{System.Int64},RiotNet.Models.MapType,RiotNet.Models.PickType,RiotNet.Models.SpectatorType)">
            <summary>
            Saves changes to a tournament code. This method uses the Tournament API. This endpoint is only accessible if you have a tournament API key.
            </summary>
            <param name="tournamentCode">The tournament code obtained from <see cref="M:RiotNet.IRiotClient.CreateTournamentCodeAsync(System.Int64,System.Nullable{System.Int32},System.Collections.Generic.List{System.Int64},RiotNet.Models.MapType,RiotNet.Models.PickType,RiotNet.Models.SpectatorType,System.Int32,System.String)"/>.</param>
            <param name="allowedSummonerIds">Optional list of participants in order to validate the players eligible to join the lobby.</param>
            <param name="mapType">The map type of the game.</param>
            <param name="pickType">The pick type of the game.</param>
            <param name="spectatorType">The spectator type of the game.</param>
        </member>
        <member name="M:RiotNet.IRiotClient.UpdateTournamentCode(RiotNet.Models.TournamentCode)">
            <summary>
            Saves changes to a tournament code. This method uses the Tournament API. This endpoint is only accessible if you have a tournament API key.
            </summary>
            <param name="tournamentCode">The tournament code to update. Only the Code, Participants, MapType, PickType, and SpectatorType proerties are used.</param>
        </member>
        <member name="M:RiotNet.IRiotClient.UpdateTournamentCodeAsync(RiotNet.Models.TournamentCode)">
            <summary>
            Saves changes to a tournament code. This method uses the Tournament API. This endpoint is only accessible if you have a tournament API key.
            </summary>
            <param name="tournamentCode">The tournament code to update. Only the Code, Participants, MapType, PickType, and SpectatorType proerties are used.</param>
        </member>
        <member name="M:RiotNet.IRiotClient.GetTournamentCodeLobbyEvents(System.String)">
            <summary>
            Gets the events that happened in the lobby of atournament code game. This method uses the Tournament API. This endpoint is only accessible if you have a tournament API key.
            </summary>
            <param name="tournamentCode">The tournament code obtained from <see cref="M:RiotNet.IRiotClient.CreateTournamentCode(System.Int64,System.Nullable{System.Int32},System.Collections.Generic.List{System.Int64},RiotNet.Models.MapType,RiotNet.Models.PickType,RiotNet.Models.SpectatorType,System.Int32,System.String)"/>.</param>
            <returns>The tournament code details.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetTournamentCodeLobbyEventsAsync(System.String)">
            <summary>
            Gets the events that happened in the lobby of atournament code game. This method uses the Tournament API. This endpoint is only accessible if you have a tournament API key.
            </summary>
            <param name="tournamentCode">The tournament code obtained from <see cref="M:RiotNet.IRiotClient.CreateTournamentCodeAsync(System.Int64,System.Nullable{System.Int32},System.Collections.Generic.List{System.Int64},RiotNet.Models.MapType,RiotNet.Models.PickType,RiotNet.Models.SpectatorType,System.Int32,System.String)"/>.</param>
            <returns>The tournament code details.</returns>
        </member>
        <member name="T:RiotNet.ConnectionFailedException">
            <summary>
            Represents an error that occurs when a REST request fails because it could not to connect to the server.
            </summary>
        </member>
        <member name="M:RiotNet.ConnectionFailedException.#ctor">
            <summary>
            Creates a new <see cref="T:RiotNet.ConnectionFailedException"/> instance.
            </summary>
        </member>
        <member name="M:RiotNet.ConnectionFailedException.#ctor(RestSharp.IRestResponse)">
            <summary>
            Creates a new <see cref="T:RiotNet.ConnectionFailedException"/> instance.
            </summary>
            <param name="response">The response.</param>
        </member>
        <member name="M:RiotNet.ConnectionFailedException.#ctor(RestSharp.IRestResponse,System.Exception)">
            <summary>
            Creates a new <see cref="T:RiotNet.ConnectionFailedException"/> instance.
            </summary>
            <param name="response">The response.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:RiotNet.ConnectionFailedException.#ctor(RestSharp.IRestResponse,System.String)">
            <summary>
            Creates a new <see cref="T:RiotNet.ConnectionFailedException"/> instance.
            </summary>
            <param name="response">The response.</param>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:RiotNet.ConnectionFailedException.#ctor(RestSharp.IRestResponse,System.String,System.Exception)">
            <summary>
            Creates a new <see cref="T:RiotNet.ConnectionFailedException"/> instance.
            </summary>
            <param name="response">The response.</param>
            <param name="message">A message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:RiotNet.ConnectionFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new <see cref="T:RiotNet.ConnectionFailedException"/> instance.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:RiotNet.Models.AggregatedStats">
            <summary>
            This object contains aggregated stat information (can be for a specific champion, or for a specific game mode, or overall).
            Only some of these stats are used at a time, depending on what was requested.
            </summary>
        </member>
        <member name="P:RiotNet.Models.AggregatedStats.AverageAssists">
            <summary>
            Gets or sets the average number of assists (Dominion only).
            </summary>
        </member>
        <member name="P:RiotNet.Models.AggregatedStats.AverageChampionsKilled">
            <summary>
            Gets or sets the average number of kills (Dominion only).
            </summary>
        </member>
        <member name="P:RiotNet.Models.AggregatedStats.AverageCombatPlayerScore">
            <summary>
            Gets or sets the average combat score (Dominion only).
            </summary>
        </member>
        <member name="P:RiotNet.Models.AggregatedStats.AverageNodeCapture">
            <summary>
            Gets or sets the average number of points captured (Dominion only).
            </summary>
        </member>
        <member name="P:RiotNet.Models.AggregatedStats.AverageNodeCaptureAssist">
            <summary>
            Gets or sets the average number of point capture assists (Dominion only).
            </summary>
        </member>
        <member name="P:RiotNet.Models.AggregatedStats.AverageNodeNeutralize">
            <summary>
            Gets or sets the average number of points neutralized (Dominion only).
            </summary>
        </member>
        <member name="P:RiotNet.Models.AggregatedStats.AverageNodeNeutralizeAssist">
            <summary>
            Gets or sets the average number of point-neutralized assists (Dominion only).
            </summary>
        </member>
        <member name="P:RiotNet.Models.AggregatedStats.AverageNumDeaths">
            <summary>
            Gets or sets the average number of deaths (Dominion only).
            </summary>
        </member>
        <member name="P:RiotNet.Models.AggregatedStats.AverageObjectivePlayerScore">
            <summary>
            Gets or sets the average objective player score (Dominion only).
            </summary>
        </member>
        <member name="P:RiotNet.Models.AggregatedStats.AverageTeamObjective">
            <summary>
            Gets or sets the average number of objectives (quests) completed (Dominion only).
            </summary>
        </member>
        <member name="P:RiotNet.Models.AggregatedStats.AverageTotalPlayerScore">
            <summary>
            Gets or sets the average total player score (Dominion only).
            </summary>
        </member>
        <member name="P:RiotNet.Models.AggregatedStats.BotGamesPlayed">
            <summary>
            Gets or sets the number of bot games played.
            </summary>
        </member>
        <member name="P:RiotNet.Models.AggregatedStats.KillingSpree">
            <summary>
            Gets or sets the number of killing sprees achieved.
            </summary>
        </member>
        <member name="P:RiotNet.Models.AggregatedStats.MaxAssists">
            <summary>
            Gets or sets the maximum number of assists (Dominion only).
            </summary>
        </member>
        <member name="P:RiotNet.Models.AggregatedStats.MaxChampionsKilled">
            <summary>
            Gets or sets the maximum number of champions killed in the game.
            </summary>
        </member>
        <member name="P:RiotNet.Models.AggregatedStats.MaxCombatPlayerScore">
            <summary>
            Gets or sets the maximum conbat player score (Dominion only).
            </summary>
        </member>
        <member name="P:RiotNet.Models.AggregatedStats.MaxLargestCriticalStrike">
            <summary>
            Gets or sets the largest critical strike achieved.
            </summary>
        </member>
        <member name="P:RiotNet.Models.AggregatedStats.MaxLargestKillingSpree">
            <summary>
            Gets or sets the largest killing spree achieved.
            </summary>
        </member>
        <member name="P:RiotNet.Models.AggregatedStats.MaxNodeCapture">
            <summary>
            Gets or sets the maximum number of points captured (Dominion only).
            </summary>
        </member>
        <member name="P:RiotNet.Models.AggregatedStats.MaxNodeCaptureAssist">
            <summary>
            Gets or sets the maximum number of point capture assists (Dominion only).
            </summary>
        </member>
        <member name="P:RiotNet.Models.AggregatedStats.MaxNodeNeutralize">
            <summary>
            Gets or sets the maximum number of points neutralized (Dominion only).
            </summary>
        </member>
        <member name="P:RiotNet.Models.AggregatedStats.MaxNodeNeutralizeAssist">
            <summary>
            Gets or sets the maximum number of point-neutralize assists (Dominion only).
            </summary>
        </member>
        <member name="P:RiotNet.Models.AggregatedStats.MaxNumDeaths">
            <summary>
            Gets or sets the maximum number of deaths (only returned for ranked statistics).
            </summary>
        </member>
        <member name="P:RiotNet.Models.AggregatedStats.MaxObjectivePlayerScore">
            <summary>
            Gets or sets the maximum objective player score (Dominion only).
            </summary>
        </member>
        <member name="P:RiotNet.Models.AggregatedStats.MaxTeamObjective">
            <summary>
            Gets or sets the maximum number of team objectives achieved (Dominion only).
            </summary>
        </member>
        <member name="P:RiotNet.Models.AggregatedStats.MaxTimePlayed">
            <summary>
            Gets or sets the longest game played.
            </summary>
        </member>
        <member name="P:RiotNet.Models.AggregatedStats.MaxTimeSpentLiving">
            <summary>
            Gets or sets the maximum time spent living.
            </summary>
        </member>
        <member name="P:RiotNet.Models.AggregatedStats.MaxTotalPlayerScore">
            <summary>
            Gets or sets the largest total player score (Dominion only).
            </summary>
        </member>
        <member name="P:RiotNet.Models.AggregatedStats.MostChampionKillsPerSession">
            <summary>
            Gets or sets the most champion kills per session.
            </summary>
        </member>
        <member name="P:RiotNet.Models.AggregatedStats.MostSpellsCast">
            <summary>
            Gets or sets the most spells cast in a game.
            </summary>
        </member>
        <member name="P:RiotNet.Models.AggregatedStats.NormalGamesPlayed">
            <summary>
            Gets or sets the number of normal games played.
            </summary>
        </member>
        <member name="P:RiotNet.Models.AggregatedStats.RankedPremadeGamesPlayed">
            <summary>
            Gets or sets the number of ranked premade games played.
            </summary>
        </member>
        <member name="P:RiotNet.Models.AggregatedStats.RankedSoloGamesPlayed">
            <summary>
            Gets or sets the number of ranked solo games played.
            </summary>
        </member>
        <member name="P:RiotNet.Models.AggregatedStats.TotalAssists">
            <summary>
            Gets or sets the total number of assists.
            </summary>
        </member>
        <member name="P:RiotNet.Models.AggregatedStats.TotalChampionKills">
            <summary>
            Gets or sets the total number of champion kills.
            </summary>
        </member>
        <member name="P:RiotNet.Models.AggregatedStats.TotalDamageDealt">
            <summary>
            Gets or sets the total amount of damage dealt.
            </summary>
        </member>
        <member name="P:RiotNet.Models.AggregatedStats.TotalDamageTaken">
            <summary>
            Gets or sets the total amount of damage taken.
            </summary>
        </member>
        <member name="P:RiotNet.Models.AggregatedStats.TotalDeathsPerSession">
            <summary>
            Gets or sets the total number of deaths per session (only returned for ranked statistics).
            </summary>
        </member>
        <member name="P:RiotNet.Models.AggregatedStats.TotalDoubleKills">
            <summary>
            Gets or sets the total number of double kills.
            </summary>
        </member>
        <member name="P:RiotNet.Models.AggregatedStats.TotalFirstBlood">
            <summary>
            Gets or sets the number of firstbloods achieved.
            </summary>
        </member>
        <member name="P:RiotNet.Models.AggregatedStats.TotalGoldEarned">
            <summary>
            Gets or sets the total amount of gold earned.
            </summary>
        </member>
        <member name="P:RiotNet.Models.AggregatedStats.TotalHeal">
            <summary>
            Gets or sets the total amount of healing done.
            </summary>
        </member>
        <member name="P:RiotNet.Models.AggregatedStats.TotalMagicDamageDealt">
            <summary>
            Gets or sets the total amount of magic damage dealt.
            </summary>
        </member>
        <member name="P:RiotNet.Models.AggregatedStats.TotalMinionKills">
            <summary>
            Gets or sets the total number of minion kills.
            </summary>
        </member>
        <member name="P:RiotNet.Models.AggregatedStats.TotalNeutralMinionsKilled">
            <summary>
            Gets or sets the total number of neutral minions killed.
            </summary>
        </member>
        <member name="P:RiotNet.Models.AggregatedStats.TotalNodeCapture">
            <summary>
            Gets or sets the number of points captured (Dominion only).
            </summary>
        </member>
        <member name="P:RiotNet.Models.AggregatedStats.TotalNodeNeutralize">
            <summary>
            Gets or sets the number of points neutralized (Dominion only).
            </summary>
        </member>
        <member name="P:RiotNet.Models.AggregatedStats.TotalPentaKills">
            <summary>
            Gets or sets the number of pentakills achieved.
            </summary>
        </member>
        <member name="P:RiotNet.Models.AggregatedStats.TotalPhysicalDamageDealt">
            <summary>
            Gets or sets the total amount of physical damage dealt.
            </summary>
        </member>
        <member name="P:RiotNet.Models.AggregatedStats.TotalQuadraKills">
            <summary>
            Gets or sets the number of quadrakills achieved.
            </summary>
        </member>
        <member name="P:RiotNet.Models.AggregatedStats.TotalSessionsLost">
            <summary>
            Gets or sets the number of sessions lost.
            </summary>
        </member>
        <member name="P:RiotNet.Models.AggregatedStats.TotalSessionsPlayed">
            <summary>
            Gets or sets the number of sessions played.
            </summary>
        </member>
        <member name="P:RiotNet.Models.AggregatedStats.TotalSessionsWon">
            <summary>
            Gets or sets the number of sessions won.
            </summary>
        </member>
        <member name="P:RiotNet.Models.AggregatedStats.TotalTripleKills">
            <summary>
            Gets or sets the number of triple kills.
            </summary>
        </member>
        <member name="P:RiotNet.Models.AggregatedStats.TotalTurretsKilled">
            <summary>
            Gets or sets the number of turrets killed.
            </summary>
        </member>
        <member name="P:RiotNet.Models.AggregatedStats.TotalUnrealKills">
            <summary>
            Gets or sets the number of unreal kills (beyond pentakill).
            </summary>
        </member>
        <member name="T:RiotNet.Models.BannedChampion">
            <summary>
            Contains information about a banned champion.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BannedChampion.ChampionId">
            <summary>
            Gets or sets the banned champion id (see StaticChampion Id).
            </summary>
        </member>
        <member name="P:RiotNet.Models.BannedChampion.PickTurn">
            <summary>
            Gets or sets the turn during which the champion was banned.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BannedChampion.TeamId">
            <summary>
            Gets or sets the team that banned the champion.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BannedChampion.DatabaseId">
            <summary>
            Gets or sets the ID of the <see cref="T:RiotNet.Models.BannedChampion"/>. This does NOT come from the Riot API; it is used as a key when storing this object in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.BasicDataStats">
            <summary>
            Represents stats, or buffs, of an object.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.FlatArmorMod">
            <summary>
            Gets the flat armor added to the target's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.FlatAttackSpeedMod">
            <summary>
            Gets the flat attack speed added to the target's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.FlatBlockMod">
            <summary>
            Gets the flat block chance added to the target's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.FlatCritChanceMod">
            <summary>
            Gets the flat critical strike chance added to the target's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.FlatCritDamageMod">
            <summary>
            Gets the flat critical strike damage added to the target's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.FlatEXPBonus">
            <summary>
            Gets the flat experience bonus added to the target's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.FlatEnergyPoolMod">
            <summary>
            Gets the flat energy added to the target's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.FlatEnergyRegenMod">
            <summary>
            Gets the flat enery regeneration added to the target's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.FlatHPPoolMod">
            <summary>
            Gets the flat health added to the target's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.FlatHPRegenMod">
            <summary>
            Gets the flat health regeneration added to the target's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.FlatMPPoolMod">
            <summary>
            Gets the flat mana modifiacation to the target's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.FlatMPRegenMod">
            <summary>
            Gets the flat mana regeneration added to the target's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.FlatMagicDamageMod">
            <summary>
            Gets the flat ability power added to the target's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.FlatMovementSpeedMod">
            <summary>
            Gets the flat movement speed added to the target's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.FlatPhysicalDamageMod">
            <summary>
            Gets the flat attack damage added to the target's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.FlatSpellBlockMod">
            <summary>
            Gets the flat spell block added to the target's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.PercentArmorMod">
            <summary>
            Gets the percent armor added to the target's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.PercentAttackSpeedMod">
            <summary>
            Gets the percent attack speed added to the target's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.PercentBlockMod">
            <summary>
            Gets the percent block added to the target's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.PercentCritChanceMod">
            <summary>
            Gets the percent ctritical strike chance added to the target's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.PercentCritDamageMod">
            <summary>
            Gets the percent critical strike damage added to the target's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.PercentDodgeMod">
            <summary>
            Gets the percent dodge added to the target's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.PercentEXPBonus">
            <summary>
            Gets the percent experience bonus added to the target's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.PercentHPPoolMod">
            <summary>
            Gets the percent health added to the target's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.PercentHPRegenMod">
            <summary>
            Gets the percent health regeneration added to the target's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.PercentLifeStealMod">
            <summary>
            Gets the percent life steal added to the target's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.PercentMPPoolMod">
            <summary>
            Gets the percent mana added to the target's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.PercentMPRegenMod">
            <summary>
            Gets the percent mana regeneration added to the target's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.PercentMagicDamageMod">
            <summary>
            Gets the percent ability power added to the target's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.PercentMovementSpeedMod">
            <summary>
            Gets the percent movement speed added to the target's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.PercentPhysicalDamageMod">
            <summary>
            Gets the percent attack damage added to the target's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.PercentSpellBlockMod">
            <summary>
            Gets the percent spell block added to the target's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.PercentSpellVampMod">
            <summary>
            Gets the percent spell vamp added to the target's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.FlatArmorModPerLevel">
            <summary>
            Gets the flat armor added per level to the target's stats. This value is only set for runes.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.FlatArmorPenetrationMod">
            <summary>
            Gets the flat armor penetration added to the target's stats. This value is only set for runes.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.FlatArmorPenetrationModPerLevel">
            <summary>
            Gets the flat armor added per level to the target's stats. This value is only set for runes.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.FlatCritChanceModPerLevel">
            <summary>
            Gets the flat critical strike chance per level added to the target's stats. This value is only set for runes.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.FlatCritDamageModPerLevel">
            <summary>
            Gets the flat critical strike damage per level added to the target's stats. This value is only set for runes.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.FlatDodgeMod">
            <summary>
            Gets the flat dodge chance added to the target's stats. This value is only set for runes.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.FlatDodgeModPerLevel">
            <summary>
            Gets the flat dodge chance per level added to the target's stats. This value is only set for runes.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.FlatEnergyModPerLevel">
            <summary>
            Gets the flat energy per level added to the target's stats. This value is only set for runes.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.FlatEnergyRegenModPerLevel">
            <summary>
            Gets the flat energy regeneration per level added to the target's stats. This value is only set for runes.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.FlatGoldPer10Mod">
            <summary>
            Gets the gold per 10 seconds added to the target's stats. This value is only set for runes.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.FlatHPModPerLevel">
            <summary>
            Gets the flat health per level added to the target's stats. This value is only set for runes.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.FlatHPRegenModPerLevel">
            <summary>
            Gets the flat health regen per level added to the target's stats. This value is only set for runes.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.FlatMPModPerLevel">
            <summary>
            Gets the flat mana per level added to the target's stats. This value is only set for runes.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.FlatMPRegenModPerLevel">
            <summary>
            Gets the flat mana regeneration per level added to the target's stats. This value is only set for runes.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.FlatMagicDamageModPerLevel">
            <summary>
            Gets the flat ability power per level added to the target's stats. This value is only set for runes.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.FlatMagicPenetrationMod">
            <summary>
            Gets the flat magic penetration added to the target's stats. This value is only set for runes.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.FlatMagicPenetrationModPerLevel">
            <summary>
            Gets the flat magic penetration per level added to the target's stats. This value is only set for runes.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.FlatMovementSpeedModPerLevel">
            <summary>
            Gets the flat movement speed per level added to the target's stats. This value is only set for runes.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.FlatPhysicalDamageModPerLevel">
            <summary>
            Gets the flat attack damage per level added to the target's stats. This value is only set for runes.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.FlatSpellBlockModPerLevel">
            <summary>
            Gets the flat spell block per level added to the target's stats. This value is only set for runes.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.FlatTimeDeadMod">
            <summary>
            Gets the flat time spent dead subtracted from the target's stats. This value is only set for runes.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.FlatTimeDeadModPerLevel">
            <summary>
            Gets the flat time spent dead per level subtracted from the target's stats. This value is only set for runes.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.PercentArmorPenetrationMod">
            <summary>
            Gets the percent armor penetration per level added to the target's stats. This value is only set for runes.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.PercentArmorPenetrationModPerLevel">
            <summary>
            Gets the percent armor penetration per level added to the target's stats. This value is only set for runes.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.PercentAttackSpeedModPerLevel">
            <summary>
            Gets the percent attack speed per level added to the target's stats. This value is only set for runes.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.PercentCooldownMod">
            <summary>
            Gets the percent cooldown reduction added to the target's stats. This value is only set for runes.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.PercentCooldownModPerLevel">
            <summary>
            Gets the percent cooldown reduction per level added to the target's stats. This value is only set for runes.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.PercentMagicPenetrationMod">
            <summary>
            Gets the percent magic penetration added to the target's stats. This value is only set for runes.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.PercentMagicPenetrationModPerLevel">
            <summary>
            Gets the percent magic penetration per level added to the target's stats. This value is only set for runes.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.PercentMovementSpeedModPerLevel">
            <summary>
            Gets the percent movement speed per level added to the target's stats. This value is only set for runes.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.PercentTimeDeadMod">
            <summary>
            Gets the percent time spent dead subtracted from the target's stats. This value is only set for runes.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.PercentTimeDeadModPerLevel">
            <summary>
            Gets the percent time spent per level dead subtracted from the target's stats. This value is only set for runes.
            </summary>
        </member>
        <member name="T:RiotNet.Models.Block">
            <summary>
            Represents a group of items in an item page.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Block.Items">
            <summary>
            Gets or sets the list of items in this block.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Block.RecMath">
            <summary>
            Gets or sets a flag that indicates whether to use tutorial formatting when displaying items in the block. If true, all items within the block are separated by a plus sign with the last item being separated by an arrow indicating that the other items build into the last item.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Block.Type">
            <summary>
            Gets or sets the type (or internal name) of the block.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Block.DatabaseId">
            <summary>
            Gets or sets the ID of the current <see cref="T:RiotNet.Models.Block"/>. This does NOT come from the Riot API; it is used as a key when storing this object in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.BlockItem">
            <summary>
            Represents an item on an item page.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BlockItem.Id">
            <summary>
            Gets or sets the ID of the item in this slot.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BlockItem.Count">
            <summary>
            Gets or sets the count of the specified item that is in this slot.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BlockItem.DatabaseId">
            <summary>
            Gets or sets the ID of the current <see cref="T:RiotNet.Models.BlockItem"/>. This does NOT come from the Riot API; it is used as a key when storing this object in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.ChampionMastery">
            <summary>
            Contains champion mastery data.
            </summary>
        </member>
        <member name="P:RiotNet.Models.ChampionMastery.ChampionId">
            <summary>
            Gets or sets the ID of the champion to which this data applies.
            </summary>
        </member>
        <member name="P:RiotNet.Models.ChampionMastery.ChampionLevel">
            <summary>
            Gets or sets the champion mastery level for the champion.
            </summary>
        </member>
        <member name="P:RiotNet.Models.ChampionMastery.ChampionPoints">
            <summary>
            Gets or sets the number of champion points that the player has accumulated for the current champion.
            </summary>
        </member>
        <member name="P:RiotNet.Models.ChampionMastery.ChampionPointsSinceLastLevel">
            <summary>
            Gets or sets the number of champion points that the player has accumulated for the current champion since reaching the last champion level.
            Zero if the player reached maximum champion level for this champion.
            </summary>
            <remarks>
            Don't ask me why this is stored as a long but ChampionPoints is stored as an int. Ask Rito.
            </remarks>
        </member>
        <member name="P:RiotNet.Models.ChampionMastery.ChampionPointsUntilNextLevel">
            <summary>
            Gets or sets the number of champion points until the player reaches the next champion level for this champion.
            Zero if the player reached maximum champion level for this champion.
            </summary>
        </member>
        <member name="P:RiotNet.Models.ChampionMastery.ChestGranted">
            <summary>
            Gets or sets whether a chest has been granted for this champion in the current season.
            </summary>
        </member>
        <member name="P:RiotNet.Models.ChampionMastery.HighestGrade">
            <summary>
            Gets or sets the highest grade (e.g. B+, S-, etc.) that the player has earned for this champion in the current season.
            </summary>
        </member>
        <member name="P:RiotNet.Models.ChampionMastery.LastPlayTime">
            <summary>
            Gets or sets the time when the player last played this champion.
            </summary>
        </member>
        <member name="P:RiotNet.Models.ChampionMastery.PlayerId">
            <summary>
            Gets or sets the summoner ID of the player to which this data applies.
            </summary>
        </member>
        <member name="P:RiotNet.Models.ChampionMastery.DatabaseId">
            <summary>
            Gets or sets the ID of the current <see cref="T:RiotNet.Models.ChampionMastery"/>. This does NOT come from the Riot API; it is used as a key when storing this object in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.LobbyEventWrapper">
            <summary>
            Contains a list of lobby events.
            </summary>
        </member>
        <member name="P:RiotNet.Models.LobbyEventWrapper.EventList">
            <summary>
            Gets or sets the list of events.
            </summary>
        </member>
        <member name="T:RiotNet.Models.ChampionStats">
            <summary>
            This object contains a collection of champion stats information.
            </summary>
        </member>
        <member name="M:RiotNet.Models.ChampionStats.#ctor">
            <summary>
            Creates a new <see cref="T:RiotNet.Models.ChampionStats"/> instance.
            </summary>
        </member>
        <member name="P:RiotNet.Models.ChampionStats.Id">
            <summary>
            Gets or sets champion ID. Note that champion ID 0 represents the combined stats for all champions. For static information correlating to champion IDs, please refer to the LoL Static Data API.
            </summary>
        </member>
        <member name="P:RiotNet.Models.ChampionStats.Stats">
            <summary>
            Gets or sets aggregated stats associated with the champion.
            </summary>
        </member>
        <member name="P:RiotNet.Models.ChampionStats.DatabaseId">
            <summary>
            Gets or sets the ID of the <see cref="T:RiotNet.Models.ChampionStats"/>. This does NOT come from the Riot API; it is used as a key when storing this object in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.CurrentGameInfo">
            <summary>
            Contains info about a game.
            </summary>
        </member>
        <member name="T:RiotNet.Models.LobbyEvent">
            <summary>
            Represents an event that occurred in a game lobby.
            </summary>
        </member>
        <member name="P:RiotNet.Models.LobbyEvent.EventType">
            <summary>
            Gets or sets the type of event that occurred.
            </summary>
        </member>
        <member name="P:RiotNet.Models.LobbyEvent.SummonerId">
            <summary>
            Gets or sets the ID of the summoner who triggered the event, if any.
            </summary>
        </member>
        <member name="P:RiotNet.Models.LobbyEvent.Timestamp">
            <summary>
            Gets or sets time at which the event occurred.
            </summary>
        </member>
        <member name="P:RiotNet.Models.LobbyEvent.DatabaseId">
            <summary>
            Gets or sets the ID of the <see cref="T:RiotNet.Models.LobbyEvent"/>. This does NOT come from the Riot API; it is used as a key when storing this object in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.TournamentCode">
            <summary>
            Contains information about a tournament code.
            </summary>
        </member>
        <member name="P:RiotNet.Models.TournamentCode.Code">
            <summary>
             Gets or sets the tournament code.
            </summary>
        </member>
        <member name="P:RiotNet.Models.TournamentCode.Id">
            <summary>
             Gets or sets tournament code ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.TournamentCode.LobbyName">
            <summary>
             Gets or sets the name of the lobby for the tournament code game.
            </summary>
        </member>
        <member name="P:RiotNet.Models.TournamentCode.Map">
            <summary>
             Gets or sets the map on which the tournament code game will be played.
            </summary>
        </member>
        <member name="P:RiotNet.Models.TournamentCode.MetaData">
            <summary>
             Gets or sets the metadata for the tournament code game.
            </summary>
        </member>
        <member name="P:RiotNet.Models.TournamentCode.Participants">
            <summary>
             Gets or sets the IDs of the summoners who are allowed to participate in the game.
            </summary>
        </member>
        <member name="P:RiotNet.Models.TournamentCode.Password">
            <summary>
             Gets or sets the lobby password.
            </summary>
        </member>
        <member name="P:RiotNet.Models.TournamentCode.PickType">
            <summary>
            Gets or sets the method used for picking champions.
            </summary>
        </member>
        <member name="P:RiotNet.Models.TournamentCode.ProviderId">
            <summary>
             Gets or sets the provider ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.TournamentCode.Region">
            <summary>
             Gets or sets the region in which the game is played.
            </summary>
        </member>
        <member name="P:RiotNet.Models.TournamentCode.Spectators">
            <summary>
             Gets or sets the spectator type for the game.
            </summary>
        </member>
        <member name="P:RiotNet.Models.TournamentCode.TeamSize">
            <summary>
             Gets or sets the number of players per team.
            </summary>
        </member>
        <member name="P:RiotNet.Models.TournamentCode.TournamentId">
            <summary>
             Gets or sets the tournament ID.
            </summary>
        </member>
        <member name="T:RiotNet.Models.MatchList">
            <summary>
            Contains a list of matches, with basic match information. Returned when using the Matchlist API. 
            The end index of the list may be modified to ensure that there is a maximum of 20 games in the list.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchList.EndIndex">
            <summary>
            Gets or sets the end index of the match list (<see cref="P:RiotNet.Models.MatchList.Matches"/>).
            The end index may be modified to ensure that there is a maximum of 20 games in the list.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchList.Matches">
            <summary>
            Gets or sets the list of matches. A maximum of 20 games may be in this list.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchList.StartIndex">
            <summary>
            Gets or sets the start index for the list of matches.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchList.TotalGames">
            <summary>
            Gets or sets the the total number of games in the match list.
            </summary>
        </member>
        <member name="T:RiotNet.Models.MatchParticipantFrameCollection">
            <summary>
            A collection of <see cref="T:RiotNet.Models.MatchParticipantFrame"/>, mapped by participant ID.
            </summary>
        </member>
        <member name="M:RiotNet.Models.MatchParticipantFrameCollection.GetKeyForItem(RiotNet.Models.MatchParticipantFrame)">
            <summary>
            Gets the key for an item.
            </summary>
            <param name="item">The item to get the key from.</param>
            <returns>The key.</returns>
        </member>
        <member name="T:RiotNet.Models.MatchReference">
            <summary>
            This object contains some basic match information. Used as a part of the Matchlist API in <see cref="T:RiotNet.Models.MatchList"/>.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchReference.Champion">
            <summary>
            Gets or sets the ID for the champion played.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchReference.Lane">
            <summary>
            Gets or sets the participant's lane for the match.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchReference.MatchId">
            <summary>
            Gets or sets the match ID (also referred to as Game ID).
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchReference.PlatformId">
            <summary>
            Gets or sets the platform ID that the match was played on.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchReference.Queue">
            <summary>
            Gets or sets the queue type for the match.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchReference.Role">
            <summary>
            Gets or sets the participant's role.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchReference.Season">
            <summary>
            Gets or sets the season the match was played in.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchReference.Timestamp">
            <summary>
            Gets or sets the time the match was played, in UTC.
            </summary>
        </member>
        <member name="T:RiotNet.Models.Participant">
            <summary>
            Contains information about a participant in a game that is in progress (or was in progress at the time the data was retrieved).
            </summary>
        </member>
        <member name="P:RiotNet.Models.Participant.Bot">
            <summary>
             Gets or sets the flag indicating whether or not this participant is a bot.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Participant.ChampionId">
            <summary>
             Gets or sets the ID of the champion played by this participant.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Participant.Masteries">
            <summary>
             Gets or sets the list of masteries used by this participant. This property is not specified for featured games.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Participant.ProfileIconId">
            <summary>
             Gets or sets the ID of the profile icon used by this participant.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Participant.Runes">
            <summary>
             Gets or sets the list of runes used by this participant. This property is not specified for featured games.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Participant.Spell1Id">
            <summary>
             Gets or sets the ID of the first summoner spell used by this participant. This corresponds to a <see cref="T:RiotNet.Models.StaticSummonerSpell"/> ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Participant.Spell2Id">
            <summary>
             Gets or sets the ID of the second summoner spell used by this participant. This corresponds to a <see cref="T:RiotNet.Models.StaticSummonerSpell"/> ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Participant.SummonerId">
            <summary>
             Gets or sets the summoner ID of this participant. This property is not specified for featured games.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Participant.SummonerName">
            <summary>
             Gets or sets the summoner name of this participant.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Participant.TeamId">
            <summary>
             Gets or sets the team ID of this participant.
            </summary>
        </member>
        <member name="T:RiotNet.Models.Event">
            <summary>
            This object contains game event information. Note that not all legal type values documented below are valid for all games. Event data evolves over time and certain values may be relevant only for older or newer games.
            </summary>
        </member>
        <member name="M:RiotNet.Models.Event.#ctor">
            <summary>
            Creates a new <see cref="T:RiotNet.Models.Event"/> instance.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Event.AscendedType">
            <summary>
            Gets or sets the ascended type of the event. Only present if relevant.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Event.AssistingParticipantIds">
            <summary>
            Gets or sets the assisting participant IDs of the event. Only present if relevant.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Event.BuildingType">
            <summary>
            Gets or sets the building type of the event. Only present if relevant.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Event.CreatorId">
            <summary>
            Gets or sets the participant ID of the participant who created the object. Only present if relevant.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Event.EventType">
            <summary>
            Gets or sets event type.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Event.ItemAfter">
            <summary>
            Gets or sets the ending item ID of the event. Only present if relevant.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Event.ItemBefore">
            <summary>
            Gets or sets the starting item ID of the event. Only present if relevant.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Event.ItemId">
            <summary>
            Gets or sets the item ID of the event. Only present if relevant.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Event.KillerId">
            <summary>
            Gets or sets the participant ID of the killer. Only present if relevant. Killer ID 0 indicates a minion.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Event.LaneType">
            <summary>
            Gets or sets the lane type of the event. Only present if relevant.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Event.LevelUpType">
            <summary>
            Gets or sets the level up type of the event. Only present if relevant.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Event.MonsterType">
            <summary>
            Gets or sets the monster type of the event. Only present if relevant.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Event.ParticipantId">
            <summary>
            Gets or sets the participant ID (1-10) of the event. Only present if relevant.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Event.PointCaptured">
            <summary>
            Gets or sets the point captured in the event. Only present if relevant.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Event.Position">
            <summary>
            Gets or sets the position of the event. Only present if relevant.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Event.SkillSlot">
            <summary>
            Gets or sets the skill slot of the event. Only present if relevant.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Event.TeamId">
            <summary>
            Gets or sets the team ID of the event. Only present if relevant.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Event.Timestamp">
            <summary>
            Gets or sets the game time at which the event occurred.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Event.TowerType">
            <summary>
            Gets or sets the tower type of the event. Only present if relevant.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Event.VictimId">
            <summary>
            Gets or sets the participant ID of the victiom of the event. Only present if relevant.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Event.WardType">
            <summary>
            Gets or sets the ward type of the event. Only present if relevant.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Event.DatabaseId">
            <summary>
            Gets or sets the ID of the <see cref="T:RiotNet.Models.Event"/>. This does NOT come from the Riot API; it is used as a key when storing this object in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.Frame">
            <summary>
            This object contains game frame information.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Frame.Events">
            <summary>
            Gets or sets list of events for this frame.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Frame.ParticipantFrames">
            <summary>
            Gets or sets each participant's information for the frame, mapped by the participant's ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Frame.Timestamp">
            <summary>
            Gets or sets game time at which the frame occurred.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Frame.DatabaseId">
            <summary>
            Gets or sets the ID of the <see cref="T:RiotNet.Models.Frame"/>. This does NOT come from the Riot API; it is used as a key when storing this object in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.MatchParticipant">
            <summary>
            This object contains match participant information.
            </summary>
        </member>
        <member name="M:RiotNet.Models.MatchParticipant.#ctor">
            <summary>
            Creates a new <see cref="T:RiotNet.Models.MatchParticipant"/> instance.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipant.ChampionId">
            <summary>
            Gets or sets champion ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipant.HighestAchievedSeasonTier">
            <summary>
            Gets or sets highest ranked tier achieved for the previous season, if any; otherwise null. Used to display border in game loading screen.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipant.Masteries">
            <summary>
            Gets or sets list of mastery information.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipant.ParticipantId">
            <summary>
            Gets or sets the match participant ID (normally 1-10; this value appears to always be 0 when coming from the Match History API).
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipant.Runes">
            <summary>
            Gets or sets the list of rune information.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipant.Spell1Id">
            <summary>
            Gets or sets the first summoner spell ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipant.Spell2Id">
            <summary>
            Gets or sets the second summoner spell ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipant.Stats">
            <summary>
            Gets or sets the participant statistics.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipant.TeamId">
            <summary>
            Gets or sets the team ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipant.Timeline">
            <summary>
            Gets or sets timeline data. Delta fields refer to values for the specified period.
            </summary>
            <remarks>
            Delta fields refer to values for the specified period
            (e.g. the gold per minute over the first 10 minutes of the game versus the second 20 minutes of the game).
            Diffs fields refer to the deltas versus the calculated lane opponent(s).
            </remarks>
        </member>
        <member name="P:RiotNet.Models.MatchParticipant.DatabaseId">
            <summary>
            Gets or sets the ID of the current <see cref="T:RiotNet.Models.MatchParticipant"/>. This does NOT come from the Riot API; it is used as a key when storing this object in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.MatchParticipantFrame">
            <summary>
            This object contains participant frame information.
            </summary>
        </member>
        <member name="M:RiotNet.Models.MatchParticipantFrame.#ctor">
            <summary>
            Creates a new <see cref="T:RiotNet.Models.MatchParticipantFrame"/> instance.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantFrame.CurrentGold">
            <summary>
            Gets or sets participant's current gold.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantFrame.DominionScore">
            <summary>
            Gets or sets dominion score of the participant.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantFrame.JungleMinionsKilled">
            <summary>
            Gets or sets number of jungle minions killed by participant.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantFrame.Level">
            <summary>
            Gets or sets participant's current level.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantFrame.MinionsKilled">
            <summary>
            Gets or sets number of minions killed by participant.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantFrame.ParticipantId">
            <summary>
            Gets or sets participant ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantFrame.Position">
            <summary>
            Gets or sets participant's position.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantFrame.TeamScore">
            <summary>
            Gets or sets team score of the participant.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantFrame.TotalGold">
            <summary>
            Gets or sets participant's total gold.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantFrame.Xp">
            <summary>
            Gets or sets experience earned by participant.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantFrame.DatabaseId">
            <summary>
            Gets or sets the ID of the <see cref="T:RiotNet.Models.MatchParticipantFrame"/>. This does NOT come from the Riot API; it is used as a key when storing this object in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.MatchParticipantIdentity">
            <summary>
            Contains participant identity information.
            </summary>
        </member>
        <member name="M:RiotNet.Models.MatchParticipantIdentity.#ctor">
            <summary>
            Creates a new <see cref="T:RiotNet.Models.MatchParticipantIdentity"/> instance.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantIdentity.ParticipantId">
            <summary>
            Gets or sets participant ID (normally 1-10; this value appears to always be 0 when coming from the Match History API).
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantIdentity.Player">
            <summary>
            Gets or sets player information.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantIdentity.DatabaseId">
            <summary>
            Gets or sets the ID of the <see cref="T:RiotNet.Models.MatchParticipantIdentity"/>. This does NOT come from the Riot API; it is used as a key when storing this object in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.MatchParticipantStats">
            <summary>
            This object contains participant statistics information.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.Assists">
            <summary>
            Gets or sets the number of assists.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.ChampLevel">
            <summary>
            Gets or sets the champion level at the end of the game.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.CombatPlayerScore">
            <summary>
            Gets or sets the player's combat score if the game was a dominion game. This value is always 0 for non-dominion games.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.Deaths">
            <summary>
            Gets or sets the number of deaths.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.DoubleKills">
            <summary>
            Gets or sets the number of double kills.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.FirstBloodAssist">
            <summary>
            Gets or sets a flag indicating if participant got an assist on first blood.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.FirstBloodKill">
            <summary>
            Gets or sets a flag indicating if participant got first blood.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.FirstInhibitorAssist">
            <summary>
            Gets or sets a flag indicating if participant got an assist on the first inhibitor.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.FirstInhibitorKill">
            <summary>
            Gets or sets a flag indicating if participant destroyed the first inhibitor.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.FirstTowerAssist">
            <summary>
            Gets or sets a flag indicating if participant got an assist on the first tower.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.FirstTowerKill">
            <summary>
            Gets or sets a flag indicating if participant destroyed the first tower.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.GoldEarned">
            <summary>
            Gets or sets the gold earned by the participant.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.GoldSpent">
            <summary>
            Gets or sets the gold spent by the participant.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.InhibitorKills">
            <summary>
            Gets or sets the number of inhibitor kills.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.Item0">
            <summary>
            Gets or sets the ID of the item in slot 0 at the end of the game.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.Item1">
            <summary>
            Gets or sets the ID of the item in slot 1 at the end of the game.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.Item2">
            <summary>
            Gets or sets the ID of the item in slot 2 at the end of the game.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.Item3">
            <summary>
            Gets or sets the ID of the item in slot 3 at the end of the game.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.Item4">
            <summary>
            Gets or sets the ID of the item in slot 4 at the end of the game.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.Item5">
            <summary>
            Gets or sets the ID of the item in slot 5 at the end of the game.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.Item6">
            <summary>
            Gets or sets the ID of the item in slot 6 at the end of the game.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.KillingSprees">
            <summary>
            Gets or sets the number of killing sprees.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.Kills">
            <summary>
            Gets or sets the number of kills.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.LargestCriticalStrike">
            <summary>
            Gets or sets the largest critical strike.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.LargestKillingSpree">
            <summary>
            Gets or sets the largest killing spree.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.LargestMultiKill">
            <summary>
            Gets or sets the largest multi kill.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.MagicDamageDealt">
            <summary>
            Gets or sets the amount of magical damage dealt.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.MagicDamageDealtToChampions">
            <summary>
            Gets or setsthe amount of magical damage dealt to champions.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.MagicDamageTaken">
            <summary>
            Gets or sets the amount of magic damage taken.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.MinionsKilled">
            <summary>
            Gets or sets the number of minions killed.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.NeutralMinionsKilled">
            <summary>
            Gets or sets the number of neutral minions killed.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.NeutralMinionsKilledEnemyJungle">
            <summary>
            Gets or sets the number of neutral jungle minions killed in the enemy team's jungle.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.NeutralMinionsKilledTeamJungle">
            <summary>
            Gets or sets nthe number of eutral jungle minions killed in your team's jungle.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.NodeCapture">
            <summary>
            Gets or sets the number of point captures if the game was a dominion game. This value is always 0 for non-dominion games.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.NodeCaptureAssist">
            <summary>
            Gets or sets the number of point capture assists if the game was a dominion game. This value is always 0 for non-dominion games.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.NodeNeutralize">
            <summary>
            Gets or sets the number of point neutralizations if game was a dominion game. This value is always 0 for non-dominion games.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.NodeNeutralizeAssist">
            <summary>
            Gets or sets the number of point neutralization assists if the game was a dominion game. This value is always 0 for non-dominion games.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.ObjectivePlayerScore">
            <summary>
            Gets or sets the player's objectives score if the game was a dominion game. This value is always 0 for non-dominion games.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.PentaKills">
            <summary>
            Gets or sets the number of penta kills.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.PhysicalDamageDealt">
            <summary>
            Gets or sets the amount of physical damage dealt.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.PhysicalDamageDealtToChampions">
            <summary>
            Gets or sets the amount of physical damage dealt to champions.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.PhysicalDamageTaken">
            <summary>
            Gets or sets the amount of physical damage taken.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.QuadraKills">
            <summary>
            Gets or sets the number of quadra kills.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.SightWardsBoughtInGame">
            <summary>
            Gets or sets the number of sight wards purchased.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.TeamObjective">
            <summary>
            Gets or sets the number of completed team objectives (i.e., quests) if the game was a dominion game. This value is always 0 for non-dominion games.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.TotalDamageDealt">
            <summary>
            Gets or sets the total damage dealt.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.TotalDamageDealtToChampions">
            <summary>
            Gets or sets the total damage dealt to champions.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.TotalDamageTaken">
            <summary>
            Gets or sets the total damage taken.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.TotalHeal">
            <summary>
            Gets or sets the total heal amount.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.TotalPlayerScore">
            <summary>
            Gets or sets the player's total score if the game was a dominion game. This value is always 0 for non-dominion games.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.TotalScoreRank">
            <summary>
            Gets or sets the team rank of the player's total score (e.g., 1-5) if the game was a dominion game. This value is always 0 for non-dominion games.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.TotalTimeCrowdControlDealt">
            <summary>
            Gets or sets the total dealt crowd control time.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.TotalUnitsHealed">
            <summary>
            Gets or sets the total units healed.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.TowerKills">
            <summary>
            Gets or sets the number of tower kills.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.TripleKills">
            <summary>
            Gets or sets the number of triple kills.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.TrueDamageDealt">
            <summary>
            Gets or sets the amount of true damage dealt.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.TrueDamageDealtToChampions">
            <summary>
            Gets or sets the amount of true damage dealt to champions.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.TrueDamageTaken">
            <summary>
            Gets or sets the amount of true damage taken.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.UnrealKills">
            <summary>
            Gets or sets the amount of number of unreal kills (beyond pentakill).
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.VisionWardsBoughtInGame">
            <summary>
            Gets or sets the number of vision wards purchased.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.WardsKilled">
            <summary>
            Gets or sets the number of wards killed.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.WardsPlaced">
            <summary>
            Gets or sets the number of wards placed.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.Winner">
            <summary>
            Gets or sets a flag indicating whether or not the participant won.
            </summary>
        </member>
        <member name="T:RiotNet.Models.MatchParticipantTimeline">
            <summary>
            This object contains all timeline information.
            Delta fields refer to values for the specified period (e.g., the gold per minute over the first 10 minutes of the game versus the second 20 minutes of the game).
            Diffs fields refer to the deltas versus the calculated lane opponent(s).
            </summary>
        </member>
        <member name="M:RiotNet.Models.MatchParticipantTimeline.#ctor">
            <summary>
            Creates a new <see cref="T:RiotNet.Models.MatchParticipantTimeline"/> instance.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantTimeline.AncientGolemAssistsPerMinCounts">
            <summary>
            Gets or sets ancient golem assists per minute timeline counts.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantTimeline.AncientGolemKillsPerMinCounts">
            <summary>
            Gets or sets ancient golem kills per minute timeline counts.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantTimeline.AssistedLaneDeathsPerMinDeltas">
            <summary>
            Gets or sets assisted lane deaths per minute timeline data.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantTimeline.AssistedLaneKillsPerMinDeltas">
            <summary>
            Gets or sets assisted lane kills per minute timeline data.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantTimeline.BaronAssistsPerMinCounts">
            <summary>
            Gets or sets baron assists per minute timeline counts.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantTimeline.BaronKillsPerMinCounts">
            <summary>
            Gets or sets baron kills per minute timeline counts.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantTimeline.CreepsPerMinDeltas">
            <summary>
            Gets or sets creeps per minute timeline data.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantTimeline.CsDiffPerMinDeltas">
            <summary>
            Gets or sets creep score difference per minute timeline data
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantTimeline.DamageTakenDiffPerMinDeltas">
            <summary>
            Gets or sets damage taken difference per minute timeline data.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantTimeline.DamageTakenPerMinDeltas">
            <summary>
            Gets or sets damage taken per minute timeline data.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantTimeline.DragonAssistsPerMinCounts">
            <summary>
            Gets or sets dragon assists per minute timeline counts.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantTimeline.DragonKillsPerMinCounts">
            <summary>
            Gets or sets dragon kills per minute timeline counts.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantTimeline.ElderLizardAssistsPerMinCounts">
            <summary>
            Gets or sets elder lizard assists per minute timeline counts.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantTimeline.ElderLizardKillsPerMinCounts">
            <summary>
            Gets or sets elder lizard kills per minute timeline counts.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantTimeline.GoldPerMinDeltas">
            <summary>
            Gets or sets gold per minute timeline data.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantTimeline.InhibitorAssistsPerMinCounts">
            <summary>
            Gets or sets inhibitor assists per minute timeline counts.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantTimeline.InhibitorKillsPerMinCounts">
            <summary>
            Gets or sets inhibitor kills per minute timeline counts.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantTimeline.Lane">
            <summary>
            Gets or sets the participant's lane.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantTimeline.Role">
            <summary>
            Gets or sets the participant's role.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantTimeline.TowerAssistsPerMinCounts">
            <summary>
            Gets or sets tower assists per minute timeline counts.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantTimeline.TowerKillsPerMinCounts">
            <summary>
            Gets or sets tower kills per minute timeline counts.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantTimeline.TowerKillsPerMinDeltas">
            <summary>
            Gets or sets tower kills per minute timeline data.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantTimeline.VilemawAssistsPerMinCounts">
            <summary>
            Gets or sets vilemaw assists per minute timeline counts.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantTimeline.VilemawKillsPerMinCounts">
            <summary>
            Gets or sets vilemaw kills per minute timeline counts.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantTimeline.WardsPerMinDeltas">
            <summary>
            Gets or sets wards placed per minute timeline data.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantTimeline.XpDiffPerMinDeltas">
            <summary>
            Gets or sets experience difference per minute timeline data.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantTimeline.XpPerMinDeltas">
            <summary>
            Gets or sets experience per minute timeline data.
            </summary>
        </member>
        <member name="T:RiotNet.Models.MatchParticipantTimelineData">
            <summary>
            This object contains timeline data.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantTimelineData.TenToTwenty">
            <summary>
            Gets or sets the value per minute from 10 min to 20 min.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantTimelineData.ThirtyToEnd">
            <summary>
            Gets or sets the value per minute from 30 min to the end of the game.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantTimelineData.TwentyToThirty">
            <summary>
            Gets or sets the value per minute from 20 min to 30 min.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantTimelineData.ZeroToTen">
            <summary>
            Gets or sets the value per minute from the beginning of the game to 10 min.
            </summary>
        </member>
        <member name="T:RiotNet.Models.MatchPlayer">
            <summary>
            This object contains match player information.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchPlayer.MatchHistoryUri">
            <summary>
            Gets or sets the match history URI.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchPlayer.ProfileIcon">
            <summary>
            Gets or sets the profile icon ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchPlayer.SummonerId">
            <summary>
            Gets or sets the summoner ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchPlayer.SummonerName">
            <summary>
            Gets or sets the summoner name.
            </summary>
        </member>
        <member name="T:RiotNet.Models.MatchTeam">
            <summary>
            Represents a team in a particular match.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchTeam.Bans">
            <summary>
            Gets or sets banned champion data if the game was draft mode, otherwise null.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchTeam.BaronKills">
            <summary>
            Gets or sets number of times the team killed baron.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchTeam.DominionVictoryScore">
            <summary>
            Gets or sets the points the team had at game end if the game was a dominion game, otherwise 0.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchTeam.DragonKills">
            <summary>
            Gets or sets number of times the team killed dragon.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchTeam.FirstBaron">
            <summary>
            Gets or sets flag indicating whether or not the team got the first baron kill.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchTeam.FirstBlood">
            <summary>
            Gets or sets flag indicating whether or not the team got first blood.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchTeam.FirstDragon">
            <summary>
            Gets or sets flag indicating whether or not the team got the first dragon kill.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchTeam.FirstInhibitor">
            <summary>
            Gets or sets flag indicating whether or not the team destroyed the first inhibitor.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchTeam.FirstRiftHerald">
            <summary>
            Gets or sets the number of times the team killed the rift herald.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchTeam.FirstTower">
            <summary>
            Gets or sets flag indicating whether or not the team destroyed the first tower.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchTeam.InhibitorKills">
            <summary>
            Gets or sets number of inhibitors the team destroyed.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchTeam.RiftHeraldKills">
            <summary>
            Gets or sets the number of times the team killed the rift herald.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchTeam.TeamId">
            <summary>
            Gets or sets team ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchTeam.TowerKills">
            <summary>
            Gets or sets number of towers the team destroyed.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchTeam.VilemawKills">
            <summary>
            Gets or sets number of times the team killed vilemaw.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchTeam.Winner">
            <summary>
            Gets or sets flag indicating whether or not the team won.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchTeam.DatabaseId">
            <summary>
            Gets or sets the ID of the <see cref="T:RiotNet.Models.MatchTeam"/>. This does NOT come from the Riot API; it is used as a key when storing this object in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.PlayerStatsSummary">
            <summary>
            This object contains player stats summary information.
            </summary>
        </member>
        <member name="P:RiotNet.Models.PlayerStatsSummary.AggregatedStats">
            <summary>
            Gets or sets the aggregated stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.PlayerStatsSummary.Losses">
            <summary>
            Gets or sets the number of losses for this queue type. Returned for ranked queue types only.
            </summary>
        </member>
        <member name="P:RiotNet.Models.PlayerStatsSummary.ModifyDate">
            <summary>
            Gets or sets the date when the stats were last modified in UTC.
            </summary>
        </member>
        <member name="P:RiotNet.Models.PlayerStatsSummary.PlayerStatSummaryType">
            <summary>
            Gets or sets the player stats summary type.
            </summary>
        </member>
        <member name="P:RiotNet.Models.PlayerStatsSummary.Wins">
            <summary>
            Gets or sets the number of wins for this queue type.
            </summary>
        </member>
        <member name="T:RiotNet.Models.PlayerStatsSummaryList">
            <summary>
            This object contains a collection of player stats summary information. Each one is associated with a different game mode.
            </summary>
        </member>
        <member name="P:RiotNet.Models.PlayerStatsSummaryList.PlayerStatSummaries">
            <summary>
            Gets or sets several collections of player stat summaries associated with the summoner.
            </summary>
        </member>
        <member name="P:RiotNet.Models.PlayerStatsSummaryList.SummonerId">
            <summary>
            Gets or sets the summoner ID.
            </summary>
        </member>
        <member name="T:RiotNet.Models.Position">
            <summary>
            This object contains participant frame position information.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Position.X">
            <summary>
            Gets or sets participant X position.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Position.Y">
            <summary>
            Gets or sets participant Y position.
            </summary>
        </member>
        <member name="T:RiotNet.Models.RankedStats">
            <summary>
            This object contains ranked stats information.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RankedStats.Champions">
            <summary>
            Gets or sets collection of aggregated stats summarized by champion.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RankedStats.ModifyDate">
            <summary>
            Gets or sets the date and time (in UTC) when the stats were last modified.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RankedStats.SummonerId">
            <summary>
            Gets or sets the summoner ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RankedStats.DatabaseId">
            <summary>
            Gets or sets the ID of the <see cref="T:RiotNet.Models.RankedStats"/>. This does NOT come from the Riot API; it is used as a key when storing this object in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.Rune">
            <summary>
            Represents a rune on a player's rune page.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Rune.Count">
            <summary>
            Gets or sets number of instances of the rune used on the rune page. This is equal to Rank, but it is set by the Current Game API.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Rune.Rank">
            <summary>
            Gets or sets number of instances of the rune used on the rune page. This is equal to Count, but it is set by the Match API.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Rune.RuneId">
            <summary>
            Gets or sets rune ID. This corresponds to the ID of a <see cref="T:RiotNet.Models.StaticRune"/>.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Rune.DatabaseId">
            <summary>
            Gets or sets the ID of the <see cref="T:RiotNet.Models.Rune"/>. This does NOT come from the Riot API; it is used as a key when storing this object in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.StaticDataList">
            <summary>
            The base class for a list of data points.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticDataList.Type">
            <summary>
            Gets or sets the type of list.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticDataList.Version">
            <summary>
            Gets or sets the game version to which the item list applies.
            </summary>
        </member>
        <member name="T:RiotNet.Models.FeaturedGameInfo">
            <summary>
            Contains some information on a featured game.
            </summary>
        </member>
        <member name="T:RiotNet.Models.FeaturedGames">
            <summary>
            Contains list of featured games.
            </summary>
        </member>
        <member name="P:RiotNet.Models.FeaturedGames.ClientRefreshInterval">
            <summary>
             Gets or sets the suggested interval to wait before requesting featured games again.
            </summary>
        </member>
        <member name="P:RiotNet.Models.FeaturedGames.GameList">
            <summary>
             Gets or sets the list of featured games.
            </summary>
        </member>
        <member name="T:RiotNet.Models.Game">
            <summary>
            Contains information about a historical game, as well as stats associated with the player for which this game was requested.
            </summary>
            <remarks>
            This object comes from the Games API, which gets the 10 most recent games played by a player.
            For more detailed game information, use the <see cref="T:RiotNet.Models.MatchDetail"/> object from the Match API instead.
            </remarks>
        </member>
        <member name="M:RiotNet.Models.Game.#ctor">
            <summary>
            Creates a new <see cref="T:RiotNet.Models.Game"/> instance.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Game.ChampionId">
            <summary>
             Gets or sets the player's champion ID. This corresponds to a <see cref="T:RiotNet.Models.StaticChampion"/> ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Game.CreateDate">
            <summary>
             Gets or sets the date and time (in UTC) that end game data was recorded.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Game.FellowPlayers">
            <summary>
             Gets or sets the other players in the game.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Game.GameId">
            <summary>
             Gets or sets the game ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Game.GameMode">
            <summary>
             Gets or sets the game mode.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Game.GameType">
            <summary>
             Gets or sets the game type.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Game.Invalid">
            <summary>
             Gets or sets whether the game resulted in a loss prevented for either team.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Game.IpEarned">
            <summary>
             Gets or sets the amount IP earned by the summoner.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Game.Level">
            <summary>
             Gets or sets the level of the player's champion at the end of the game.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Game.MapId">
            <summary>
             Gets or sets the map ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Game.Spell1">
            <summary>
             Gets or sets the ID of first summoner spell. This corresponds to a <see cref="T:RiotNet.Models.StaticSummonerSpell"/> ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Game.Spell2">
            <summary>
             Gets or sets the ID of second summoner spell. This corresponds to a <see cref="T:RiotNet.Models.StaticSummonerSpell"/> ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Game.Stats">
            <summary>
             Gets or sets the statistics associated with the game for this summoner.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Game.SubType">
            <summary>
             Gets or sets the game sub-type.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Game.TeamId">
            <summary>
             Gets or sets the team ID of the team that the player was on.
            </summary>
        </member>
        <member name="T:RiotNet.Models.GameInfoBase">
            <summary>
            Base information for games (used in <see cref="T:RiotNet.Models.FeaturedGameInfo"/> and <see cref="T:RiotNet.Models.CurrentGameInfo"/>).
            </summary>
        </member>
        <member name="P:RiotNet.Models.GameInfoBase.BannedChampions">
            <summary>
            Gets or sets the list of banned champion information.
            </summary>
        </member>
        <member name="P:RiotNet.Models.GameInfoBase.GameId">
            <summary>
            Gets or sets the game Id.
            </summary>
        </member>
        <member name="P:RiotNet.Models.GameInfoBase.GameLength">
            <summary>
            Gets or sets the amount of time in seconds that has passed since the game started.
            </summary>
        </member>
        <member name="P:RiotNet.Models.GameInfoBase.GameMode">
            <summary>
            Gets or sets the game mode.
            </summary>
        </member>
        <member name="P:RiotNet.Models.GameInfoBase.GameQueueConfigId">
            <summary>
            Gets or sets the queue type.
            </summary>
        </member>
        <member name="P:RiotNet.Models.GameInfoBase.GameStartTime">
            <summary>
            Gets or sets the game start time in UTC.
            </summary>
        </member>
        <member name="P:RiotNet.Models.GameInfoBase.GameType">
            <summary>
            Gets of sets the game type.
            </summary>
        </member>
        <member name="P:RiotNet.Models.GameInfoBase.MapId">
            <summary>
            Gets or sets the map id.
            </summary>
        </member>
        <member name="P:RiotNet.Models.GameInfoBase.Observers">
            <summary>
            Gets or sets the observer information.
            </summary>
        </member>
        <member name="P:RiotNet.Models.GameInfoBase.Participants">
            <summary>
            Gets or sets the participant information.
            </summary>
        </member>
        <member name="P:RiotNet.Models.GameInfoBase.PlatformId">
            <summary>
            Gets or sets the ID of the platform on which the game is being played.
            </summary>
        </member>
        <member name="T:RiotNet.Models.Incident">
            <summary>
            Represents a server incident report.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Incident.Active">
            <summary>
            Gets or sets flag stating if incident is active.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Incident.CreatedAt">
            <summary>
            Gets or sets incident created time in UTC.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Incident.Id">
            <summary>
            Gets or sets incident id.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Incident.Updates">
            <summary>
            Gets or sets list of update messages for the incident.
            </summary>
        </member>
        <member name="T:RiotNet.Models.Mastery">
            <summary>
            Contains information about a single mastery in a mastery page.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Mastery.Id">
            <summary>
            Gets or sets the ID of this mastery. This corresponds to a <see cref="T:RiotNet.Models.StaticMastery"/> ID. This is equal to <see cref="P:RiotNet.Models.Mastery.MasteryId"/>, but it is set by the Summoner API.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Mastery.MasteryId">
            <summary>
            Gets or sets the ID of this mastery. This corresponds to a <see cref="T:RiotNet.Models.StaticMastery"/> ID. This is equal to <see cref="P:RiotNet.Models.Mastery.Id"/>, but it is set by the Match API.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Mastery.Rank">
            <summary>
            Gets or sets the number of mastery points put into this mastery.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Mastery.DatabaseId">
            <summary>
            Gets or sets the ID of the <see cref="T:RiotNet.Models.Mastery"/>. This does NOT come from the Riot API; it is used as a key when storing this object in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.MasteryPage">
            <summary>
            Contains information about a single mastery page.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MasteryPage.Current">
            <summary>
            Gets or sets if this mastery page is the summoner's currently selected mastery page.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MasteryPage.Id">
            <summary>
            Gets or sets the ID of this mastery page.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MasteryPage.Masteries">
            <summary>
            Gets or sets the collection of masteries in this mastery page.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MasteryPage.Name">
            <summary>
            Gets or sets the name of this mastery page.
            </summary>
        </member>
        <member name="T:RiotNet.Models.MasteryPages">
            <summary>
            Contains information about a summoner's mastery pages.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MasteryPages.Pages">
            <summary>
            Gets or sets the collection of mastery pages of this summoner.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MasteryPages.SummonerId">
            <summary>
            Gets or sets the summoner ID of this summoner.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MasteryPages.DatabaseId">
            <summary>
            Gets or sets the ID of the <see cref="T:RiotNet.Models.MasteryPages"/>. This does NOT come from the Riot API; it is used as a key when storing this object in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.Message">
            <summary>
            Represents a server incident message.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Message.Author">
            <summary>
            Gets or sets the message author.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Message.Content">
            <summary>
            Gets or sets the message content.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Message.CreatedAt">
            <summary>
            Gets or sets the created time (in UTC) for the message.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Message.Id">
            <summary>
            Gets or sets the message id.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Message.Severity">
            <summary>
            Gets or sets server incident message severity.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Message.Translations">
            <summary>
            Gets or sets the list of translations of the message.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Message.UpdatedAt">
            <summary>
            Gets or sets the message updated time in UTC.
            </summary>
        </member>
        <member name="T:RiotNet.Models.RunePage">
            <summary>
            Contains information about a single rune page.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RunePage.Current">
            <summary>
            Gets or sets if this rune page is the summoner's currently selected rune page.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RunePage.Id">
            <summary>
            Gets or sets the ID of this rune page.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RunePage.Name">
            <summary>
            Gets or sets the name of this rune page.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RunePage.Slots">
            <summary>
            Gets or sets the collection of rune slots (and their runes) in this rune page.
            </summary>
        </member>
        <member name="T:RiotNet.Models.RunePages">
            <summary>
            Contains information about a single summoner's rune pages.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RunePages.Pages">
            <summary>
            Gets or sets the collection of rune pages of this summoner.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RunePages.SummonerId">
            <summary>
            Gets or sets the summoner ID of this summoner.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RunePages.DatabaseId">
            <summary>
            Gets or sets the ID of the <see cref="T:RiotNet.Models.RunePages"/>. This does NOT come from the Riot API; it is used as a key when storing this object in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.RuneSlot">
            <summary>
            Contains information about a single rune slot in a rune page.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RuneSlot.RuneId">
            <summary>
            Gets or sets the ID of the rune in this rune slot. This corresponds to the ID of a <see cref="T:RiotNet.Models.StaticRune"/>.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RuneSlot.RuneSlotId">
            <summary>
            Gets or sets the ID of this rune slot.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RuneSlot.DatabaseId">
            <summary>
            Gets or sets the ID of the <see cref="T:RiotNet.Models.RuneSlot"/>. This does NOT come from the Riot API; it is used as a key when storing this object in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.Service">
            <summary>
            Represents server services.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Service.Incidents">
            <summary>
            Gets or sets list of service incidents.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Service.Name">
            <summary>
            Gets or sets the service name.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Service.Slug">
            <summary>
            Gets or sets the service tag name.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Service.Status">
            <summary>
            Gets or sets service status.
            </summary>
        </member>
        <member name="T:RiotNet.Models.Shard">
            <summary>
            Represents the server information.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Shard.Hostname">
            <summary>
            Gets or sets the server hostname.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Shard.Locales">
            <summary>
            Gets or sets the list of locales for the server.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Shard.Name">
            <summary>
            Gets or sets the name for the server.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Shard.RegionTag">
            <summary>
            Gets or sets the region tag for the server. This is similar to the platform ID, but it is not set for all regions.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Shard.Slug">
            <summary>
            Gets or sets the region name (ex. "na").
            </summary>
        </member>
        <member name="T:RiotNet.Models.ShardStatus">
            <summary>
            Represents detailed server information.
            </summary>
        </member>
        <member name="P:RiotNet.Models.ShardStatus.Services">
            <summary>
            Gets or sets list of server services.
            </summary>
        </member>
        <member name="T:RiotNet.Models.AltImage">
            <summary>
            Contains alternate image data.
            </summary>
        </member>
        <member name="P:RiotNet.Models.AltImage.Full">
            <summary>
            Gets or sets the file name of the full-size image.
            </summary>
        </member>
        <member name="P:RiotNet.Models.AltImage.Group">
            <summary>
            Gets or sets the group to which the image belongs.
            </summary>
        </member>
        <member name="P:RiotNet.Models.AltImage.Sprite">
            <summary>
            Gets or sets the file name of the sprite image.
            </summary>
        </member>
        <member name="P:RiotNet.Models.AltImage.X">
            <summary>
            Gets or sets the x-offset of the image.
            </summary>
        </member>
        <member name="P:RiotNet.Models.AltImage.Y">
            <summary>
            Gets or sets the y-offset of the image.
            </summary>
        </member>
        <member name="P:RiotNet.Models.AltImage.W">
            <summary>
            Gets or sets the width of the image.
            </summary>
        </member>
        <member name="P:RiotNet.Models.AltImage.H">
            <summary>
            Gets or sets the height of the image.
            </summary>
        </member>
        <member name="P:RiotNet.Models.AltImage.DatabaseId">
            <summary>
            Gets or sets the ID of the <see cref="T:RiotNet.Models.AltImage"/>. This does NOT come from the Riot API; it is used as a key when storing this object in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.StaticMasteryTree">
            <summary>
            Represents a mastery tree.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticMasteryTree.Cunning">
            <summary>
            Gets or sets the Cunning mastery tree.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticMasteryTree.Ferocity">
            <summary>
            Gets or sets the Ferocity mastery tree.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticMasteryTree.Resolve">
            <summary>
            Gets or sets the Resolve mastery tree.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticMasteryTree.DatabaseId">
            <summary>
            Gets or sets the ID of the <see cref="T:RiotNet.Models.StaticMasteryTree"/>. This does NOT come from the Riot API; it is used as a key when storing this object in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.MatchDetail">
            <summary>
            Contains detailed match information.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchDetail.MapId">
            <summary>
            Gets or sets the map ID of the map where the match was played.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchDetail.MatchCreation">
            <summary>
            Gets or sets the match creation time in UTC. Designates when the team select lobby is created and/or the match is made through match making; not when the game actually starts.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchDetail.MatchDuration">
            <summary>
            Gets or sets the match duration.
            </summary>
            <remarks>
            The match duration is serialized as an integer representing the duration of the match in seconds.
            </remarks>
        </member>
        <member name="P:RiotNet.Models.MatchDetail.MatchId">
            <summary>
            Gets or sets the ID of the match (also referred to as Game ID).
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchDetail.MatchMode">
            <summary>
            Gets or sets the match mode.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchDetail.MatchType">
            <summary>
            Gets or sets the match type.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchDetail.MatchVersion">
            <summary>
            Gets or sets the match version (patch number).
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchDetail.ParticipantIdentities">
            <summary>
            Gets or sets the list of participants' identity information.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchDetail.Participants">
            <summary>
            Gets or sets the list of participants' information.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchDetail.PlatformId">
            <summary>
            Gets or sets the platform ID of the match.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchDetail.QueueType">
            <summary>
            Gets or sets the match queue type.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchDetail.Region">
            <summary>
            Gets or sets the region where the match was played.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchDetail.Season">
            <summary>
            Gets or sets season when the match was played.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchDetail.Teams">
            <summary>
            Gets or sets team information.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchDetail.Timeline">
            <summary>
            Gets or sets match timeline data (not included by default)
            </summary>
        </member>
        <member name="T:RiotNet.Models.MatchHistorySummary">
            <summary>
            Contains match history summary information.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchHistorySummary.Assists">
            <summary>
            Gets or sets the number of assists obtained by the team in this match.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchHistorySummary.Date">
            <summary>
            Gets or sets the date and time (in UTC) when the match was completed.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchHistorySummary.Deaths">
            <summary>
            Gets or sets the number of deaths obtained by the team in this match.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchHistorySummary.GameId">
            <summary>
            Gets or sets the Game ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchHistorySummary.GameMode">
            <summary>
            Gets or sets the game mode of this game.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchHistorySummary.Invalid">
            <summary>
            Gets or sets whether this game resulted in a Loss Prevented for either team.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchHistorySummary.Kills">
            <summary>
            Gets or sets the number of kills obtained by the team in this match.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchHistorySummary.MapId">
            <summary>
            Gets or sets the ID of the map this match was played on.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchHistorySummary.OpposingTeamKills">
            <summary>
            Gets or sets the number of kills obtained by the enemy team in this match.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchHistorySummary.OpposingTeamName">
            <summary>
            Gets or sets the name of the opposing team.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchHistorySummary.Win">
            <summary>
            Gets or sets whether this team won the match.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchHistorySummary.DatabaseId">
            <summary>
            Gets or sets the ID of the current <see cref="T:RiotNet.Models.MatchHistorySummary"/>. This does NOT come from the Riot API; it is used as a key when storing this object in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.Observer">
            <summary>
            Contains observer information (for spectator).
            </summary>
        </member>
        <member name="P:RiotNet.Models.Observer.EncryptionKey">
            <summary>
             Gets or sets the key used to decrypt the spectator grid game data for playback.
            </summary>
        </member>
        <member name="T:RiotNet.Models.PersistableDictionary`2">
            <summary>
            Allows persisting of scalar values in a dictionary.
            </summary>
            <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the dictionary.</typeparam>
        </member>
        <member name="P:RiotNet.Models.PersistableDictionary`2.Value">
            <summary>
            Gets or sets the serialized form of the dictionary. This is used for saving the dictionary into a database. This property is not intended to be used by your code.
            </summary>      
        </member>
        <member name="T:RiotNet.Models.DictionaryOfBoolean">
            <summary>
            A dictionary with string keys and boolean values that can be stored in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.DictionaryOfString">
            <summary>
            A dictionary with string keys and string values that can be stored in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.PersistableList`1">
            <summary>
            Allows persisting of scalar values as a collection.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
        </member>
        <member name="P:RiotNet.Models.PersistableList`1.Value">
            <summary>
            Gets or sets the serialized form of the list. This is used for saving the list into a database. This property is not intended to be used by your code.
            </summary>      
        </member>
        <member name="P:RiotNet.Models.PersistableList`1.Capacity">
            <summary>
            Gets or sets the total number of elements the internal data structure can hold without resizing.
            </summary>
        </member>
        <member name="T:RiotNet.Models.ListOfString">
            <summary>
            A list of strings that can be stored in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.ListOfInt">
            <summary>
            A list of integers that can be stored in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.ListOfLong">
            <summary>
            A list of long integers that can be stored in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.ListOfDouble">
            <summary>
            A list of doubles that can be stored in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.ListOfListOfDouble">
            <summary>
            A 2-dimensional list of doubles that can be stored in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.Player">
            <summary>
            Basic info about a player in a game.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Player.ChampionId">
            <summary>
             Gets or sets the champion id associated with player.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Player.SummonerId">
            <summary>
             Gets or sets the summoner id associated with player.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Player.TeamId">
            <summary>
             Gets or sets the team id associated with player (team 1 or team 2).
            </summary>
        </member>
        <member name="P:RiotNet.Models.Player.DatabaseId">
            <summary>
            Gets or sets the ID of the current <see cref="T:RiotNet.Models.Player"/>. This does NOT come from the Riot API; it is used as a key when storing this object in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.RawStats">
            <summary>
            Statistics associated with the game for this summoner.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.Assists">
            <summary>
            Gets or sets the number of assists by the player.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.BarracksKilled">
            <summary>
            Gets or sets the number of enemy inhibitors killed by the player.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.ChampionsKilled">
            <summary>
            Gets or sets the number of champions killed by the player.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.CombatPlayerScore">
            <summary>
            Gets or sets the player's combat score (Dominion).
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.ConsumablesPurchased">
            <summary>
            This stat appears to be unused. It may have been used for a special game mode.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.DamageDealtPlayer">
            <summary>
            This stat appears to be unused. It may have been used for a special game mode.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.DoubleKills">
            <summary>
            Gets or sets number of double kills by the player.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.FirstBlood">
            <summary>
            This appears to be unused. It may have been used for Snowdown Showdown games.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.Gold">
            <summary>
            This stat appears to be unused. It may have been used for a special game mode.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.GoldEarned">
            <summary>
            Gets or sets the amount of gold earned by the player.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.GoldSpent">
            <summary>
            Gets or sets the amount of gold spent by the player.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.Item0">
            <summary>
            Gets or sets the ID of the item in slot 0. This corresponds to a <see cref="T:RiotNet.Models.StaticItem"/> ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.Item1">
            <summary>
            Gets or sets the ID of the item in slot 1. This corresponds to a <see cref="T:RiotNet.Models.StaticItem"/> ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.Item2">
            <summary>
            Gets or sets the ID of the item in slot 2. This corresponds to a <see cref="T:RiotNet.Models.StaticItem"/> ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.Item3">
            <summary>
            Gets or sets the ID of the item in slot 3. This corresponds to a <see cref="T:RiotNet.Models.StaticItem"/> ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.Item4">
            <summary>
            Gets or sets the ID of the item in slot 4. This corresponds to a <see cref="T:RiotNet.Models.StaticItem"/> ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.Item5">
            <summary>
            Gets or sets the ID of the item in slot 5. This corresponds to a <see cref="T:RiotNet.Models.StaticItem"/> ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.Item6">
            <summary>
            Gets or sets the ID of the item in slot 6. This corresponds to a <see cref="T:RiotNet.Models.StaticItem"/> ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.ItemsPurchased">
            <summary>
            This stat appears to be unused. It may have been used for a special game mode.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.KillingSprees">
            <summary>
            Gets or sets the number of killing sprees (number of times the player got three or more kills without dying).
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.LargestCriticalStrike">
            <summary>
            Gets or sets the amount of damage dealt by the player's most damaging critical strike.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.LargestKillingSpree">
            <summary>
            Gets or sets the player's largest killing spree.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.LargestMultiKill">
            <summary>
            Gets or sets the largest multikill by the player.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.LegendaryItemsCreated">
            <summary>
            Gets or sets the number of tier 3 items built by the player.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.Level">
            <summary>
            Gets or sets the player's champion level at the end of the game.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.MagicDamageDealtPlayer">
            <summary>
            Gets or sets the total amount of magic damage dealt by player.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.MagicDamageDealtToChampions">
            <summary>
            Gets or sets the amount of magic damage dealt to champions by the player.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.MagicDamageTaken">
            <summary>
            Gets or sets amount of magic damage takenby the player.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.MinionsDenied">
            <summary>
            This stat appears to be unused. It may have been used for a special game mode.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.MinionsKilled">
            <summary>
            Gets or sets the number of minions killed by the player.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.NeutralMinionsKilled">
            <summary>
            Gets or sets the number of neutral monsters killed by the player.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.NeutralMinionsKilledEnemyJungle">
            <summary>
            Gets or sets the number of neutral monsters killed by the player in the enemy jungle.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.NeutralMinionsKilledYourJungle">
            <summary>
            Gets or sets the number of neutral monsters killed by the player in their jungle.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.NexusKilled">
            <summary>
            Gets or sets flag specifying if the summoner got the killing blow on the nexus.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.NodeCapture">
            <summary>
            Gets or sets the number of points captured by player (Dominion).
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.NodeCaptureAssist">
            <summary>
            Gets or sets the number of points the player assisted in capturing (Dominion).
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.NodeNeutralize">
            <summary>
            Gets or sets the number of points the player neutralized (Dominion).
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.NodeNeutralizeAssist">
            <summary>
            Gets or sets the number of points the player assisted in neutralizing (Dominion).
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.NumDeaths">
            <summary>
            Gets or sets number of deaths by the player.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.NumItemsBought">
            <summary>
            This stat appears to be unused. It may have been used for a special game mode.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.ObjectivePlayerScore">
            <summary>
            Gets or sets the player's objective score (Dominion).
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.PentaKills">
            <summary>
            Gets or sets the number of penta kills by the player.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.PhysicalDamageDealtPlayer">
            <summary>
            Gets or sets total amount of physical damage dealt by the player.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.PhysicalDamageDealtToChampions">
            <summary>
            Gets or sets amount of physical damage dealt to champions by the player.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.PhysicalDamageTaken">
            <summary>
            Gets or sets amount of physical damage taken by player.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.PlayerPosition">
            <summary>
            Gets or sets player's position (lane or jungle).
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.PlayerRole">
            <summary>
            Gets or sets player role.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.QuadraKills">
            <summary>
            Gets or sets number of quadra kills by the player.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.SightWardsBought">
            <summary>
            Gets or sets the number of sight wards purchased by the player.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.Spell1Cast">
            <summary>
            Gets or sets the number of times the player cast the first champion spell.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.Spell2Cast">
            <summary>
            Gets or sets the number of times the player cast the second champion spell.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.Spell3Cast">
            <summary>
            Gets or sets the number of times the player cast the third champion spell.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.Spell4Cast">
            <summary>
            Gets or sets the number of times the player cast the fourth champion spell.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.SummonSpell1Cast">
            <summary>
            Gets or sets the number of times the player cast the first summoner spell.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.SummonSpell2Cast">
            <summary>
            Gets or sets  the number of times the player cast the second summoner spell 2.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.SuperMonsterKilled">
            <summary>
            This stat appears to be unused. It may have been used for a special game mode.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.Team">
            <summary>
            Gets or sets which team player is on.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.TeamObjective">
            <summary>
            Gets or sets the number of completed team objectives (Dominion).
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.TimePlayed">
            <summary>
            Gets or sets the length of the game.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.TotalDamageDealt">
            <summary>
            Gets or sets the total amount of damage dealt by player.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.TotalDamageDealtToChampions">
            <summary>
            Gets or sets the total amount of damage dealt to champions by the player.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.TotalDamageTaken">
            <summary>
            Gets or sets the total amount of damage taken by the player.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.TotalHeal">
            <summary>
            Gets or sets the total amount of healing done by the player.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.TotalPlayerScore">
            <summary>
            Gets or sets the player's total score (Dominion).
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.TotalScoreRank">
            <summary>
            Gets or sets the player's rank from score (Dominion).
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.TotalTimeCrowdControlDealt">
            <summary>
            Gets or sets the total crowd control time dealt by the player.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.TotalUnitsHealed">
            <summary>
            Gets or sets the total number of units healed in the game by the player.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.TripleKills">
            <summary>
            Gets or sets the number of triple kills by the player.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.TrueDamageDealtPlayer">
            <summary>
            Gets or sets the amount of total true damage dealt by the player.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.TrueDamageDealtToChampions">
            <summary>
            Gets or sets the amount of true damage dealt to champions by the player.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.TrueDamageTaken">
            <summary>
            Gets or sets the amount of true damage taken by the player.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.TurretsKilled">
            <summary>
            Gets or sets the number of turrets killed by the player.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.UnrealKills">
            <summary>
            Gets or sets the number of unreal kills by the player. An "unreal" kill is bigger than a pentakill (so 6 or more kills).
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.VictoryPointTotal">
            <summary>
            This stat appears to be unused. It may have been used for a special game mode.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.VisionWardsBought">
            <summary>
            Gets or sets the number of vision wards bought by the player.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.WardKilled">
            <summary>
            Gets or sets the number of wards killed by the player.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.WardPlaced">
            <summary>
            Gets or sets the number of wards placed by the player.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RawStats.Win">
            <summary>
            Gets or sets flag specifying whether or not the player won the game.
            </summary>
        </member>
        <member name="T:RiotNet.Models.RecentGames">
            <summary>
            This object contains recent games information
            </summary>
        </member>
        <member name="P:RiotNet.Models.RecentGames.Games">
            <summary>
             Gets or sets the collection of recent games played by player (max 10).
            </summary>
        </member>
        <member name="P:RiotNet.Models.RecentGames.SummonerId">
            <summary>
             Gets or sets the summoner ID.
            </summary>
        </member>
        <member name="T:RiotNet.Models.Roster">
            <summary>
            Contains roster information.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Roster.MemberList">
            <summary>
            Gets or sets a list of the members of the team.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Roster.OwnerId">
            <summary>
            Gets or sets the player ID of the owner of the team.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Roster.DatabaseId">
            <summary>
            Gets or sets the ID of the current <see cref="T:RiotNet.Models.Roster"/>. This does NOT come from the Riot API; it is used as a key when storing this object in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.StaticChampion">
            <summary>
            Contains champion data.
            </summary>
        </member>
        <member name="M:RiotNet.Models.StaticChampion.#ctor">
            <summary>
            Creates a new <see cref="T:RiotNet.Models.StaticChampion"/> instance.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticChampion.AllyTips">
            <summary>
            Gets or sets a list of tips for how to play as this champion.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticChampion.Blurb">
            <summary>
            Gets or sets the blurb describing the champion.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticChampion.EnemyTips">
            <summary>
            Gets or sets a list of tips for how to play against this champion.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticChampion.Id">
            <summary>
            Gets or sets the champion ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticChampion.Image">
            <summary>
            Gets or sets the champion image data.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticChampion.Info">
            <summary>
            Gets or sets the strength and difficulty information for the current champion.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticChampion.Key">
            <summary>
            Gets or sets the champion key.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticChampion.Lore">
            <summary>
            Gets or sets the champion's lore text.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticChampion.Name">
            <summary>
            Gets or sets the champion name.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticChampion.ParType">
            <summary>
            Gets or sets the type of resource this champion uses (e.g. Mana).
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticChampion.Passive">
            <summary>
            Gets or sets the champion's passive ability.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticChampion.Recommended">
            <summary>
            Gets or sets the champion's recommended item sets.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticChampion.Skins">
            <summary>
            Gets or sets the available skins for the champion.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticChampion.Spells">
            <summary>
            Gets or sets the champion's spells.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticChampion.Stats">
            <summary>
            Gets or sets the champion's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticChampion.Tags">
            <summary>
            Gets or sets the champion's roles (e.g. Fighter, Tank).
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticChampion.Title">
            <summary>
            Gets or sets the champion's title.
            </summary>
        </member>
        <member name="T:RiotNet.Models.StaticChampionInfo">
            <summary>
            Contains champion strength and difficulty information.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticChampionInfo.Attack">
            <summary>
            Gets or sets the champion's attack power.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticChampionInfo.Magic">
            <summary>
            Gets or sets the champion's magic power.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticChampionInfo.Defense">
            <summary>
            Gets or sets the champion's defense power.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticChampionInfo.Difficulty">
            <summary>
            Gets or sets the champion's difficulty.
            </summary>
        </member>
        <member name="T:RiotNet.Models.ChampionList">
            <summary>
            Contains a list of dynamic champion data.
            </summary>
        </member>
        <member name="P:RiotNet.Models.ChampionList.Champions">
            <summary>
            Gets or sets the list of champions.
            </summary>
        </member>
        <member name="T:RiotNet.Models.StaticChampionList">
            <summary>
            Contains champion list data.
            </summary>
        </member>
        <member name="M:RiotNet.Models.StaticChampionList.#ctor">
            <summary>
            Creates a new <see cref="T:RiotNet.Models.StaticChampionList"/> instance.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticChampionList.Data">
            <summary>
            Gets or sets the set of champions indexed by name (or ID if you specified dataById in the request).
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticChampionList.Format">
            <summary>
            Gets or sets the format.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticChampionList.Keys">
            <summary>
            Gets or sets the keys. This maps champion IDs to champion names.
            </summary>
        </member>
        <member name="T:RiotNet.Models.StaticChampionSpell">
            <summary>
            Contains champion spell data.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticChampionSpell.AltImages">
            <summary>
            Gets or sets the alternate image data for the current ability.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticChampionSpell.DatabaseId">
            <summary>
            Gets or sets the ID of the current <see cref="T:RiotNet.Models.StaticChampionSpell"/>. This does NOT come from the Riot API; it is used as a key when storing this object in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.Champion">
            <summary>
            Contains champion data.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Champion.Active">
            <summary>
            Gets or sets whether the champion is active.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Champion.BotEnabled">
            <summary>
            Gets or sets whether the champion bot is enabled (for custom games).
            </summary>
        </member>
        <member name="P:RiotNet.Models.Champion.BotMmEnabled">
            <summary>
            Gets or sets whether the champion bot is enabled for match-made games (Co-op vs. AI).
            </summary>
        </member>
        <member name="P:RiotNet.Models.Champion.FreeToPlay">
            <summary>
            Gets or sets whether the champion is free to play.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Champion.Id">
            <summary>
            Gets or sets the champion id. This corresponds to a <see cref="T:RiotNet.Models.StaticChampion"/> ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Champion.RankedPlayEnabled">
            <summary>
            Gets or sets the ranked play enabled flag.
            </summary>
        </member>
        <member name="T:RiotNet.Models.AscendedType">
            <summary>
            Represents the ascension event type.  Used in <see cref="T:RiotNet.Models.Event"/> for event type <see cref="F:RiotNet.Models.EventType.ASCENDED_EVENT"/>.
            </summary>
        </member>
        <member name="F:RiotNet.Models.AscendedType.CHAMPION_ASCENDED">
            <summary>
            Indicates that a player has become ascended.
            </summary>
        </member>
        <member name="F:RiotNet.Models.AscendedType.CLEAR_ASCENDED">
            <summary>
            Inticates that a player has killed the ascended player.
            </summary>
        </member>
        <member name="F:RiotNet.Models.AscendedType.MINION_ASCENDED">
            <summary>
            Indicates that a minion has ascended.
            </summary>
        </member>
        <member name="T:RiotNet.Models.BuildingType">
            <summary>
            Represents the building type. Used in <see cref="T:RiotNet.Models.Event"/> for event type <see cref="F:RiotNet.Models.EventType.BUILDING_KILL"/>.
            </summary>
        </member>
        <member name="F:RiotNet.Models.BuildingType.INHIBITOR_BUILDING">
            <summary>
            Inhibitor building
            </summary>
        </member>
        <member name="F:RiotNet.Models.BuildingType.TOWER_BUILDING">
            <summary>
            Tower building
            </summary>
        </member>
        <member name="T:RiotNet.Models.EventType">
            <summary>
            Represents the event type. Used in <see cref="T:RiotNet.Models.Event"/>.
            </summary>
        </member>
        <member name="F:RiotNet.Models.EventType.ASCENDED_EVENT">
            <summary>
            Ascended event
            </summary>
        </member>
        <member name="F:RiotNet.Models.EventType.BUILDING_KILL">
            <summary>
            Building kill
            </summary>
        </member>
        <member name="F:RiotNet.Models.EventType.CAPTURE_POINT">
            <summary>
            Capture point
            </summary>
        </member>
        <member name="F:RiotNet.Models.EventType.CHAMPION_KILL">
            <summary>
            Champion kill
            </summary>
        </member>
        <member name="F:RiotNet.Models.EventType.ELITE_MONSTER_KILL">
            <summary>
            Elite monster kill
            </summary>
        </member>
        <member name="F:RiotNet.Models.EventType.ITEM_DESTROYED">
            <summary>
            Item destroyed. This usually indicates that an item was built into a higher tier item.
            </summary>
        </member>
        <member name="F:RiotNet.Models.EventType.ITEM_PURCHASED">
            <summary>
            Item purchased
            </summary>
        </member>
        <member name="F:RiotNet.Models.EventType.ITEM_SOLD">
            <summary>
            Item sold
            </summary>
        </member>
        <member name="F:RiotNet.Models.EventType.ITEM_UNDO">
            <summary>
            Item undo
            </summary>
        </member>
        <member name="F:RiotNet.Models.EventType.PORO_KING_SUMMON">
            <summary>
            Poro king summon
            </summary>
        </member>
        <member name="F:RiotNet.Models.EventType.SKILL_LEVEL_UP">
            <summary>
            Skill level up
            </summary>
        </member>
        <member name="F:RiotNet.Models.EventType.WARD_KILL">
            <summary>
            Ward kill
            </summary>
        </member>
        <member name="F:RiotNet.Models.EventType.WARD_PLACED">
            <summary>
            Ward placed
            </summary>
        </member>
        <member name="T:RiotNet.Models.GameMode">
            <summary>
            Represents the game mode.
            </summary>
        </member>
        <member name="F:RiotNet.Models.GameMode.CLASSIC">
            <summary>
            Classic, played on both Summoner's Rift and Twisted Treeline.
            </summary>
        </member>
        <member name="F:RiotNet.Models.GameMode.ODIN">
            <summary>
            Dominion, played on The Crystal Scar.
            </summary>
        </member>
        <member name="F:RiotNet.Models.GameMode.ARAM">
            <summary>
            All Random All Mid, played on both Howling Abyss and Butcher's Bridge.
            </summary>
        </member>
        <member name="F:RiotNet.Models.GameMode.TUTORIAL">
            <summary>
            Tutorial.
            </summary>
        </member>
        <member name="F:RiotNet.Models.GameMode.ONEFORALL">
            <summary>
             One for All, played on both Summoner's Rift and Howling Abyss.
            </summary>
        </member>
        <member name="F:RiotNet.Models.GameMode.ASCENSION">
            <summary>
            Ascension, played on The Crystal Scar.
            </summary>
        </member>
        <member name="F:RiotNet.Models.GameMode.FIRSTBLOOD">
            <summary>
            Snowdown Showdown, played on the Howling Abyss.
            </summary>
        </member>
        <member name="F:RiotNet.Models.GameMode.KINGPORO">
            <summary>
            Legend of the Poro King, played on the Howling Abyss.
            </summary>
        </member>
        <member name="T:RiotNet.Models.GameSubType">
            <summary>
            Represents the game sub-type.
            </summary>
        </member>
        <member name="F:RiotNet.Models.GameSubType.NONE">
            <summary>
            None
            </summary>
        </member>
        <member name="F:RiotNet.Models.GameSubType.NORMAL">
            <summary>
            Normal
            </summary>
        </member>
        <member name="F:RiotNet.Models.GameSubType.BOT">
            <summary>
            Bot
            </summary>
        </member>
        <member name="F:RiotNet.Models.GameSubType.RANKED_SOLO_5x5">
            <summary>
            Ranked solo 5x5
            </summary>
        </member>
        <member name="F:RiotNet.Models.GameSubType.RANKED_PREMADE_3x3">
            <summary>
            Ranked premade 3x3
            </summary>
        </member>
        <member name="F:RiotNet.Models.GameSubType.RANKED_PREMADE_5x5">
            <summary>
            Ranked premade 5x5
            </summary>
        </member>
        <member name="F:RiotNet.Models.GameSubType.ODIN_UNRANKED">
            <summary>
            Dominion unranked
            </summary>
        </member>
        <member name="F:RiotNet.Models.GameSubType.RANKED_TEAM_3x3">
            <summary>
            Ranked team 3x3
            </summary>
        </member>
        <member name="F:RiotNet.Models.GameSubType.RANKED_TEAM_5x5">
            <summary>
            Ranked team 5x5
            </summary>
        </member>
        <member name="F:RiotNet.Models.GameSubType.NORMAL_3x3">
            <summary>
            Normal 3x3
            </summary>
        </member>
        <member name="F:RiotNet.Models.GameSubType.BOT_3x3">
            <summary>
            Bot 3x3
            </summary>
        </member>
        <member name="F:RiotNet.Models.GameSubType.CAP_5x5">
            <summary>
            Teambuilder 5x5
            </summary>
        </member>
        <member name="F:RiotNet.Models.GameSubType.ARAM_UNRANKED_5x5">
            <summary>
            ARAM unranked 5x5
            </summary>
        </member>
        <member name="F:RiotNet.Models.GameSubType.ONEFORALL_5x5">
            <summary>
            One for all 5x5
            </summary>
        </member>
        <member name="F:RiotNet.Models.GameSubType.FIRSTBLOOD_1x1">
            <summary>
            Snowdown Showdown 1x1
            </summary>
        </member>
        <member name="F:RiotNet.Models.GameSubType.FIRSTBLOOD_2x2">
            <summary>
            Snowdown Showdown 2x2
            </summary>
        </member>
        <member name="F:RiotNet.Models.GameSubType.SR_6x6">
            <summary>
            Summoner's Rift Hexakill
            </summary>
        </member>
        <member name="F:RiotNet.Models.GameSubType.URF">
            <summary>
            URF
            </summary>
        </member>
        <member name="F:RiotNet.Models.GameSubType.URF_BOT">
            <summary>
            URF bot
            </summary>
        </member>
        <member name="F:RiotNet.Models.GameSubType.NIGHTMARE_BOT">
            <summary>
            Doom bots
            </summary>
        </member>
        <member name="F:RiotNet.Models.GameSubType.ASCENSION">
            <summary>
            Ascension
            </summary>
        </member>
        <member name="F:RiotNet.Models.GameSubType.HEXAKILL">
            <summary>
            Twisted Treeline Hexakill
            </summary>
        </member>
        <member name="F:RiotNet.Models.GameSubType.KING_PORO">
            <summary>
            Legend of the Poro King
            </summary>
        </member>
        <member name="F:RiotNet.Models.GameSubType.COUNTER_PICK">
            <summary>
            Nemesis draft
            </summary>
        </member>
        <member name="F:RiotNet.Models.GameSubType.BILGEWATER">
            <summary>
            Black Market Brawlers
            </summary>
        </member>
        <member name="T:RiotNet.Models.GameType">
            <summary>
            Represents the game type.
            </summary>
        </member>
        <member name="F:RiotNet.Models.GameType.CUSTOM_GAME">
            <summary>
            Custom game
            </summary>
        </member>
        <member name="F:RiotNet.Models.GameType.MATCHED_GAME">
            <summary>
            Matched game (any game that is queued up for)
            </summary>
        </member>
        <member name="F:RiotNet.Models.GameType.TUTORIAL_GAME">
            <summary>
            Tutorial
            </summary>
        </member>
        <member name="T:RiotNet.Models.LaneType">
            <summary>
            Represents the lane an event occured.  Used in <see cref="T:RiotNet.Models.Event"/>.
            </summary>
        </member>
        <member name="F:RiotNet.Models.LaneType.BOT_LANE">
            <summary>
            Bot lane
            </summary>
        </member>
        <member name="F:RiotNet.Models.LaneType.MID_LANE">
            <summary>
            Mid lane
            </summary>
        </member>
        <member name="F:RiotNet.Models.LaneType.TOP_LANE">
            <summary>
            Top lane
            </summary>
        </member>
        <member name="T:RiotNet.Models.LevelUpType">
            <summary>
            Represents the level up type. Used in <see cref="T:RiotNet.Models.Event"/> for event type <see cref="F:RiotNet.Models.EventType.SKILL_LEVEL_UP"/>.
            </summary>
        </member>
        <member name="F:RiotNet.Models.LevelUpType.EVOLVE">
            <summary>
            Evolve
            </summary>
        </member>
        <member name="F:RiotNet.Models.LevelUpType.NORMAL">
            <summary>
            Normal
            </summary>
        </member>
        <member name="T:RiotNet.Models.MapType">
            <summary>
            Represents a map type for a tournament game.
            </summary>
        </member>
        <member name="F:RiotNet.Models.MapType.SUMMONERS_RIFT">
            <summary>
            Summoner's Rift
            </summary>
        </member>
        <member name="F:RiotNet.Models.MapType.TWISTED_TREELINE">
            <summary>
            Twisted Treeline
            </summary>
        </member>
        <member name="F:RiotNet.Models.MapType.CRYSTAL_SCAR">
            <summary>
            Crystal Scar (dominion)
            </summary>
        </member>
        <member name="F:RiotNet.Models.MapType.HOWLING_ABYSS">
            <summary>
            Howling Abyss (ARAM)
            </summary>
        </member>
        <member name="T:RiotNet.Models.MatchRole">
            <summary>
            Represents a player's role. Very similar to <see cref="T:RiotNet.Models.PlayerRole"/> but used in the Match API instead of Game API.
            </summary>
        </member>
        <member name="F:RiotNet.Models.MatchRole.DUO">
            <summary>
            Duo
            </summary>
        </member>
        <member name="F:RiotNet.Models.MatchRole.NONE">
            <summary>
            None
            </summary>
        </member>
        <member name="F:RiotNet.Models.MatchRole.SOLO">
            <summary>
            Solo
            </summary>
        </member>
        <member name="F:RiotNet.Models.MatchRole.DUO_CARRY">
            <summary>
            Duo carry
            </summary>
        </member>
        <member name="F:RiotNet.Models.MatchRole.DUO_SUPPORT">
            <summary>
            Duo support
            </summary>
        </member>
        <member name="T:RiotNet.Models.MonsterType">
            <summary>
            Represents the type of monster that an event applies to. This is only valid for buff monsters and epic monsters.
            </summary>
        </member>
        <member name="F:RiotNet.Models.MonsterType.BARON_NASHOR">
            <summary>
            Baron nashor
            </summary>
        </member>
        <member name="F:RiotNet.Models.MonsterType.BLUE_GOLEM">
            <summary>
            Blue golem
            </summary>
        </member>
        <member name="F:RiotNet.Models.MonsterType.DRAGON">
            <summary>
            Dragon
            </summary>
        </member>
        <member name="F:RiotNet.Models.MonsterType.RED_LIZARD">
            <summary>
            Red lizard
            </summary>
        </member>
        <member name="F:RiotNet.Models.MonsterType.RIFTHERALD">
            <summary>
            Rift Herald
            </summary>
        </member>
        <member name="F:RiotNet.Models.MonsterType.VILEMAW">
            <summary>
            Vilemaw
            </summary>
        </member>
        <member name="T:RiotNet.Models.MastertyTreeType">
            <summary>
            Indicates a type of mastery tree.
            </summary>
        </member>
        <member name="F:RiotNet.Models.MastertyTreeType.Ferocity">
            <summary>
            Specifies the Ferocity mastery tree.
            </summary>
        </member>
        <member name="F:RiotNet.Models.MastertyTreeType.Cunning">
            <summary>
            Specifies the Cunning mastery tree.
            </summary>
        </member>
        <member name="F:RiotNet.Models.MastertyTreeType.Resolve">
            <summary>
            Specifies the Resolve mastery tree.
            </summary>
        </member>
        <member name="T:RiotNet.Models.PickType">
            <summary>
            The method used for picking champions.
            </summary>
        </member>
        <member name="F:RiotNet.Models.PickType.BLIND_PICK">
            <summary>
            Blind pick
            </summary>
        </member>
        <member name="F:RiotNet.Models.PickType.DRAFT_MODE">
            <summary>
            Draft pick
            </summary>
        </member>
        <member name="F:RiotNet.Models.PickType.ALL_RANDOM">
            <summary>
            All randowm
            </summary>
        </member>
        <member name="F:RiotNet.Models.PickType.TOURNAMENT_DRAFT">
            <summary>
            Tournament draft pick
            </summary>
        </member>
        <member name="T:RiotNet.Models.PlayerPosition">
            <summary>
            Represents player's position, or lane.
            </summary>
        </member>
        <member name="F:RiotNet.Models.PlayerPosition.TOP">
            <summary>
            Top
            </summary>
        </member>
        <member name="F:RiotNet.Models.PlayerPosition.MIDDLE">
            <summary>
            Mid
            </summary>
        </member>
        <member name="F:RiotNet.Models.PlayerPosition.JUNGLE">
            <summary>
            Jungle
            </summary>
        </member>
        <member name="F:RiotNet.Models.PlayerPosition.BOT">
            <summary>
            Bot
            </summary>
        </member>
        <member name="T:RiotNet.Models.PlayerRole">
            <summary>
            Represents a player's role. Very similar to <see cref="T:RiotNet.Models.MatchRole"/> but used in the Game API instead of the Match API.
            </summary>
        </member>
        <member name="F:RiotNet.Models.PlayerRole.NONE">
            <summary>
            None of the other roles
            </summary>
        </member>
        <member name="F:RiotNet.Models.PlayerRole.DUO">
            <summary>
            Duo lane
            </summary>
        </member>
        <member name="F:RiotNet.Models.PlayerRole.SUPPORT">
            <summary>
            Support
            </summary>
        </member>
        <member name="F:RiotNet.Models.PlayerRole.CARRY">
            <summary>
            Carry
            </summary>
        </member>
        <member name="F:RiotNet.Models.PlayerRole.SOLO">
            <summary>
            Solo lane
            </summary>
        </member>
        <member name="T:RiotNet.Models.Point">
            <summary>
            Represents a capturable point in Dominion. Used in <see cref="T:RiotNet.Models.Event"/> for event type <see cref="F:RiotNet.Models.EventType.CAPTURE_POINT"/>.
            </summary>
        </member>
        <member name="F:RiotNet.Models.Point.POINT_A">
            <summary>
            Point a
            </summary>
        </member>
        <member name="F:RiotNet.Models.Point.POINT_B">
            <summary>
            Point b
            </summary>
        </member>
        <member name="F:RiotNet.Models.Point.POINT_C">
            <summary>
            Point c
            </summary>
        </member>
        <member name="F:RiotNet.Models.Point.POINT_D">
            <summary>
            Point d
            </summary>
        </member>
        <member name="F:RiotNet.Models.Point.POINT_E">
            <summary>
            Point e
            </summary>
        </member>
        <member name="T:RiotNet.Models.QueueType">
            <summary>
            Respresents the queue type.
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.CUSTOM">
            <summary>
            Custom
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.NORMAL_5x5_BLIND">
            <summary>
            Normal 5v5 Blind Pick
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.BOT_5x5">
            <summary>
            Historical Summoner's Rift Coop vs AI. This queue is deprecated.
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.BOT_5x5_INTRO">
            <summary>
            Summoner's Rift Coop vs AI Intro Bot
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.BOT_5x5_BEGINNER">
            <summary>
            Summoner's Rift Coop vs AI Beginner Bot
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.BOT_5x5_INTERMEDIATE">
            <summary>
            Historical Summoner's Rift Coop vs AI Intermediate Bot
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.NORMAL_3x3">
            <summary>
            Normal 3v3
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.NORMAL_5x5_DRAFT">
            <summary>
            Normal 5v5 Draft Pick
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.ODIN_5x5_BLIND">
            <summary>
            Dominion 5v5 Blind Pick
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.ODIN_5x5_DRAFT">
            <summary>
            Dominion 5v5 Draft Pick
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.BOT_ODIN_5x5">
            <summary>
            Dominion Coop vs AI
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.RANKED_SOLO_5x5">
            <summary>
            Ranked Solo 5v5
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.RANKED_PREMADE_3x3">
            <summary>
            Ranked Premade 3v3. This queue is deprecated.
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.RANKED_PREMADE_5x5">
            <summary>
            Ranked Premade 5v5. This queue is deprecated.
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.RANKED_TEAM_3x3">
            <summary>
            Ranked Team 3v3
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.RANKED_TEAM_5x5">
            <summary>
            Ranked Team 5v5
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.BOT_TT_3x3">
            <summary>
            Twisted Treeline Coop vs AI
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.GROUP_FINDER_5x5">
            <summary>
            Team Builder
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.ARAM_5x5">
            <summary>
            All Random All Mid
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.ONEFORALL_5x5">
            <summary>
            One for All
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.FIRSTBLOOD_1x1">
            <summary>
            Snowdown Showdown 1v1
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.FIRSTBLOOD_2x2">
            <summary>
            Snowdown Showdown 2v2
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.SR_6x6">
            <summary>
            Summoner's Rift Hexakill
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.URF_5x5">
            <summary>
            Ultra Rapid Fire
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.BOT_URF_5x5">
            <summary>
            Ultra Rapid Fire games played against AI
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.NIGHTMARE_BOT_5x5_RANK1">
            <summary>
            Doom Bots Rank 1
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.NIGHTMARE_BOT_5x5_RANK2">
            <summary>
            Doom Bots Rank 2
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.NIGHTMARE_BOT_5x5_RANK5">
            <summary>
            Doom Bots Rank 5
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.ASCENSION_5x5">
            <summary>
            Ascension
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.HEXAKILL">
            <summary>
            Twisted Treeline Hexakill
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.KING_PORO_5x5">
            <summary>
            King Poro
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.COUNTER_PICK">
            <summary>
            Nemesis draft
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.BILGEWATER_ARAM_5x5">
            <summary>
            Bilgewater version of All Random All Mid
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.BILGEWATER_5x5">
            <summary>
            Black Market Brawlers
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.DEFINITELY_NOT_DOMINION_5x5">
            <summary>
            Definitely Not Dominion
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.TEAM_BUILDER_DRAFT_UNRANKED_5x5">
            <summary>
            Normal 5v5 Draft Pick
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.TEAM_BUILDER_DRAFT_RANKED_5x5">
            <summary>
            Ranked Dynamic Queue
            </summary>
        </member>
        <member name="T:RiotNet.Models.RankedQueue">
            <summary>
            Represents a ranked queue.
            </summary>
        </member>
        <member name="F:RiotNet.Models.RankedQueue.RANKED_SOLO_5x5">
            <summary>
            Ranked Solo 5v5
            </summary>
        </member>
        <member name="F:RiotNet.Models.RankedQueue.RANKED_TEAM_3x3">
            <summary>
            Ranked Team 3v3
            </summary>
        </member>
        <member name="F:RiotNet.Models.RankedQueue.RANKED_TEAM_5x5">
            <summary>
            Ranked Team 5v5
            </summary>
        </member>
        <member name="T:RiotNet.Models.Region">
            <summary>
            Represents a region (or server).
            </summary>
        </member>
        <member name="F:RiotNet.Models.Region.BR">
            <summary>
            Brazil
            </summary>
        </member>
        <member name="F:RiotNet.Models.Region.EUNE">
            <summary>
            Europe Nordic &amp; East
            </summary>
        </member>
        <member name="F:RiotNet.Models.Region.EUW">
            <summary>
            Europe West
            </summary>
        </member>
        <member name="F:RiotNet.Models.Region.KR">
            <summary>
            Korea
            </summary>
        </member>
        <member name="F:RiotNet.Models.Region.LAN">
            <summary>
            Latin America North
            </summary>
        </member>
        <member name="F:RiotNet.Models.Region.LAS">
            <summary>
            Latin America South
            </summary>
        </member>
        <member name="F:RiotNet.Models.Region.NA">
            <summary>
            North America
            </summary>
        </member>
        <member name="F:RiotNet.Models.Region.OCE">
            <summary>
            Oceania
            </summary>
        </member>
        <member name="F:RiotNet.Models.Region.PBE">
            <summary>
            Public Beta Environment
            </summary>
        </member>
        <member name="F:RiotNet.Models.Region.RU">
            <summary>
            Russia
            </summary>
        </member>
        <member name="F:RiotNet.Models.Region.TR">
            <summary>
            Turkey
            </summary>
        </member>
        <member name="T:RiotNet.Models.Season">
            <summary>
            Represents the season.
            </summary>
        </member>
        <member name="F:RiotNet.Models.Season.PRESEASON3">
            <summary>
            Pre-season 3, 2013
            </summary>
        </member>
        <member name="F:RiotNet.Models.Season.SEASON3">
            <summary>
            Season 3, 2013
            </summary>
        </member>
        <member name="F:RiotNet.Models.Season.PRESEASON2014">
            <summary>
            Pre-season 4, 2014
            </summary>
        </member>
        <member name="F:RiotNet.Models.Season.SEASON2014">
            <summary>
            Season 4, 2014
            </summary>
        </member>
        <member name="F:RiotNet.Models.Season.PRESEASON2015">
            <summary>
            Pre-season 5, 2015
            </summary>
        </member>
        <member name="F:RiotNet.Models.Season.SEASON2015">
            <summary>
            Season 5, 2015
            </summary>
        </member>
        <member name="F:RiotNet.Models.Season.PRESEASON2016">
            <summary>
            Pre-season 6, 2016
            </summary>
        </member>
        <member name="F:RiotNet.Models.Season.SEASON2016">
            <summary>
            Season 6, 2016
            </summary>
        </member>
        <member name="T:RiotNet.Models.ServerStatus">
            <summary>
            Represents the status of one of the services on the Riot servers.
            </summary>
        </member>
        <member name="F:RiotNet.Models.ServerStatus.Online">
            <summary>
            Online
            </summary>
        </member>
        <member name="F:RiotNet.Models.ServerStatus.Alert">
            <summary>
            Alert
            </summary>
        </member>
        <member name="F:RiotNet.Models.ServerStatus.Offline">
            <summary>
            Offline
            </summary>
        </member>
        <member name="F:RiotNet.Models.ServerStatus.Deploying">
            <summary>
            Deploying
            </summary>
        </member>
        <member name="T:RiotNet.Models.Severity">
            <summary>
            Represents the server incident message severity.
            </summary>
        </member>
        <member name="F:RiotNet.Models.Severity.Info">
            <summary>
            Info
            </summary>
        </member>
        <member name="F:RiotNet.Models.Severity.Alert">
            <summary>
            Alert
            </summary>
        </member>
        <member name="F:RiotNet.Models.Severity.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="T:RiotNet.Models.SpectatorType">
            <summary>
            The type of spectators allowed for a game.
            </summary>
        </member>
        <member name="F:RiotNet.Models.SpectatorType.NONE">
            <summary>
            No spectators are allowed.
            </summary>
        </member>
        <member name="F:RiotNet.Models.SpectatorType.LOBBYONLY">
            <summary>
            Spectators are allowed only if they joined in the lobby.
            </summary>
        </member>
        <member name="F:RiotNet.Models.SpectatorType.ALL">
            <summary>
            Spectators can join at any point (in the lobby or after the game starts).
            </summary>
        </member>
        <member name="T:RiotNet.Models.TeamSide">
            <summary>
            Identifies which side/team the player was on.
            </summary>
        </member>
        <member name="F:RiotNet.Models.TeamSide.Team1">
            <summary>
            Team 1 (blue).
            </summary>
        </member>
        <member name="F:RiotNet.Models.TeamSide.Team2">
            <summary>
            Team 2 (red).
            </summary>
        </member>
        <member name="T:RiotNet.Models.Tier">
            <summary>
            Represents a ranked tier.
            </summary>
        </member>
        <member name="F:RiotNet.Models.Tier.CHALLENGER">
            <summary>
            Challenger tier
            </summary>
        </member>
        <member name="F:RiotNet.Models.Tier.MASTER">
            <summary>
            Master tier
            </summary>
        </member>
        <member name="F:RiotNet.Models.Tier.DIAMOND">
            <summary>
            Diamond tier
            </summary>
        </member>
        <member name="F:RiotNet.Models.Tier.PLATINUM">
            <summary>
            Platinum tier
            </summary>
        </member>
        <member name="F:RiotNet.Models.Tier.GOLD">
            <summary>
            Gold tier
            </summary>
        </member>
        <member name="F:RiotNet.Models.Tier.SILVER">
            <summary>
            Silver tier
            </summary>
        </member>
        <member name="F:RiotNet.Models.Tier.BRONZE">
            <summary>
            Bronze tier
            </summary>
        </member>
        <member name="F:RiotNet.Models.Tier.UNRANKED">
            <summary>
            Unranked
            </summary>
        </member>
        <member name="T:RiotNet.Models.TowerType">
            <summary>
            Represents the tower type. Used in <see cref="T:RiotNet.Models.Event"/> for event type <see cref="F:RiotNet.Models.EventType.BUILDING_KILL"/>.
            </summary>
        </member>
        <member name="F:RiotNet.Models.TowerType.BASE_TURRET">
            <summary>
            Base turret
            </summary>
        </member>
        <member name="F:RiotNet.Models.TowerType.FOUNTAIN_TURRET">
            <summary>
            Fountain turret
            </summary>
        </member>
        <member name="F:RiotNet.Models.TowerType.INNER_TURRET">
            <summary>
            Inner turret
            </summary>
        </member>
        <member name="F:RiotNet.Models.TowerType.NEXUS_TURRET">
            <summary>
            Nexus turret
            </summary>
        </member>
        <member name="F:RiotNet.Models.TowerType.OUTER_TURRET">
            <summary>
            Outer turret
            </summary>
        </member>
        <member name="F:RiotNet.Models.TowerType.UNDEFINED_TURRET">
            <summary>
            Undefined turret
            </summary>
        </member>
        <member name="T:RiotNet.Models.WardType">
            <summary>
            Represents the ward type. Used in <see cref="T:RiotNet.Models.Event"/> for event types <see cref="F:RiotNet.Models.EventType.WARD_KILL"/> and <see cref="F:RiotNet.Models.EventType.WARD_PLACED"/>.
            </summary>
        </member>
        <member name="F:RiotNet.Models.WardType.SIGHT_WARD">
            <summary>
            Sight ward
            </summary>
        </member>
        <member name="F:RiotNet.Models.WardType.TEEMO_MUSHROOM">
            <summary>
            Teemo mushroom
            </summary>
        </member>
        <member name="F:RiotNet.Models.WardType.UNDEFINED">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:RiotNet.Models.WardType.VISION_WARD">
            <summary>
            Vision ward
            </summary>
        </member>
        <member name="F:RiotNet.Models.WardType.YELLOW_TRINKET">
            <summary>
            Yellow trinket
            </summary>
        </member>
        <member name="F:RiotNet.Models.WardType.YELLOW_TRINKET_UPGRADE">
            <summary>
            Yellow trinket upgrade
            </summary>
        </member>
        <member name="F:RiotNet.Models.WardType.BLUE_TRINKET">
            <summary>
            Blue trinket
            </summary>
        </member>
        <member name="T:RiotNet.Models.Gold">
            <summary>
            Contains purchase information for an item.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Gold.Base">
            <summary>
            Gets or sets the cost of the item excluding the cost of its recipe.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Gold.Purchasable">
            <summary>
            Gets or sets whether the item can be purchased.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Gold.Sell">
            <summary>
            Gets or sets the sell price of the item.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Gold.Total">
            <summary>
            Gets or sets the total cost of the item including the cost of its recipe.
            </summary>
        </member>
        <member name="T:RiotNet.Models.Group">
            <summary>
            Contains item group data, which defines the maximum number of items of a certain type that a player can own.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Group.MaxGroupOwnable">
            <summary>
            Gets or sets the maximum number of items in the current group that a player is allowed to own.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Group.Key">
            <summary>
            Gets or sets the name of the group.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Group.DatabaseId">
            <summary>
            Gets or sets the ID of the current <see cref="T:RiotNet.Models.Group"/>. This does NOT come from the Riot API; it is used as a key when storing this object in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.Image">
            <summary>
            Contains image data.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Image.Full">
            <summary>
            Gets or sets the file name of the full-size image.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Image.Group">
            <summary>
            Gets or sets the group to which the image belongs.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Image.Sprite">
            <summary>
            Gets or sets the file name of the sprite image.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Image.X">
            <summary>
            Gets or sets the x-offset of the image.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Image.Y">
            <summary>
            Gets or sets the y-offset of the image.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Image.W">
            <summary>
            Gets or sets the width of the image.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Image.H">
            <summary>
            Gets or sets the height of the image.
            </summary>
        </member>
        <member name="T:RiotNet.Models.StaticItem">
            <summary>
            Represents an item that a player can use during a match.
            </summary>
        </member>
        <member name="M:RiotNet.Models.StaticItem.#ctor">
            <summary>
            Creates a new <see cref="T:RiotNet.Models.StaticItem"/> instance.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticItem.ConsumeOnFull">
            <summary>
            Gets or sets whether the item should automatically be consumed upon purchase if the player's item slots are full.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticItem.Consumed">
            <summary>
            Gets or sets whether the item is consumable.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticItem.Depth">
            <summary>
            Gets or sets the depth of the recipe for this item.
            </summary>
            <remarks>
            An item's depth is equal to the maximum depth of the items that it builds out of, plus one.
            </remarks>
        </member>
        <member name="P:RiotNet.Models.StaticItem.Effect">
            <summary>
            Gets or sets the effect of the item.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticItem.From">
            <summary>
            Gets or sets the list of items that this item builds out of.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticItem.Gold">
            <summary>
            Gold cost information for the item. Does not apply to runes.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticItem.HideFromAll">
            <summary>
            Gets or sets whether the item is hidden when searching. This is usually used for enchantments (such as homeguard).
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticItem.InStore">
            <summary>
            Gets or sets whether the item exists in the store.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticItem.Into">
            <summary>
            Gets or sets the list of items that this item can build into.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticItem.SpecialRecipe">
            <summary>
            Gets or sets the ID of the item that this item builds from using a special rule (e.g. Archangel's Staff into Seraph's Embrace).
            </summary>
        </member>
        <member name="T:RiotNet.Models.StaticLanuageStrings">
            <summary>
            Contains strings in a specified language.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticLanuageStrings.Data">
            <summary>
            Contains the strings.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticLanuageStrings.Type">
            <summary>
            Gets or sets the LanguageStrings type.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticLanuageStrings.Version">
            <summary>
            Gets or sets the game version to which the list applies.
            </summary>
        </member>
        <member name="T:RiotNet.Models.StaticMapDetails">
            <summary>
            Contains data for a map (e.g. Summoner's Rift).
            </summary>
        </member>
        <member name="M:RiotNet.Models.StaticMapDetails.#ctor">
            <summary>
            Creates a new <see cref="T:RiotNet.Models.StaticMapDetails"/> instance.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticMapDetails.Image">
            <summary>
            Gets or sets data for the map's image.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticMapDetails.MapId">
            <summary>
            Gets or sets the map ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticMapDetails.MapName">
            <summary>
            Gets or sets the name of the map.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticMapDetails.UnpurchasableItemList">
            <summary>
            Gets or sets the list of item names for items that cannot be purchased on this map.
            </summary>
        </member>
        <member name="T:RiotNet.Models.StaticMapList">
            <summary>
            Contains data for multiple maps.
            </summary>
        </member>
        <member name="M:RiotNet.Models.StaticMapList.#ctor">
            <summary>
            Creates a new <see cref="T:RiotNet.Models.StaticMapList"/> instance.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticMapList.Data">
            <summary>
            Gets or sets the set of maps indexed by ID.
            </summary>
        </member>
        <member name="T:RiotNet.Models.StaticMasteryList">
            <summary>
            Contains mastery list data.
            </summary>
        </member>
        <member name="M:RiotNet.Models.StaticMasteryList.#ctor">
            <summary>
            Creates a new <see cref="T:RiotNet.Models.StaticMasteryList"/> instance.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticMasteryList.Tree">
            <summary>
            Gets or sets the mastery tree structure.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticMasteryList.Data">
            <summary>
            Gets or sets the set of masteries indexed by ID.
            </summary>
        </member>
        <member name="T:RiotNet.Models.StaticMastery">
            <summary>
            Represents a mastery slot.
            </summary>
        </member>
        <member name="M:RiotNet.Models.StaticMastery.#ctor">
            <summary>
            Creates a new <see cref="T:RiotNet.Models.StaticMastery"/> instance.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticMastery.Id">
            <summary>
            Gets or sets the mastery ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticMastery.Description">
            <summary>
            Gets or sets the description of the mastery at each rank.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticMastery.Image">
            <summary>
            Gets or sets the image data for the mastery's icon.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticMastery.MasteryTree">
            <summary>
            Gets or sets the type of mastery tree that the current <see cref="T:RiotNet.Models.StaticMastery"/> belongs to.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticMastery.Name">
            <summary>
            Gets or sets the name of the mastery.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticMastery.Prereq">
            <summary>
            Gets or sets the ID of the mastery that must be filled before any points can be added to the current mastery. A value of zero indicates no prerequisites.
            Season 6 does not have any masteries with prerequisites.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticMastery.Ranks">
            <summary>
            Gets or sets the maximum number of ranks that the mastery has.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticMastery.SanitizedDescription">
            <summary>
            Gets or sets the sanitized description of the mastery at each rank.
            </summary>
        </member>
        <member name="T:RiotNet.Models.StaticMasteryTreeItem">
            <summary>
            Represents one item in a mastery tree list.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticMasteryTreeItem.MasteryId">
            <summary>
            Gets or sets the mastery ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticMasteryTreeItem.Prereq">
            <summary>
            Gets or sets the ID of the mastery that must be filled before any points can be added to the current mastery. A value of zero indicates no prerequisites.
            Season 6 does not have any masteries with prerequisites.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticMasteryTreeItem.DatabaseId">
            <summary>
            Gets or sets the ID of the <see cref="T:RiotNet.Models.StaticMasteryTreeItem"/>. This does NOT come from the Riot API; it is used as a key when storing this object in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.StaticRealm">
            <summary>
            Contains realm data. This is mainly version numbers related to Dragon Magic.
            </summary>
        </member>
        <member name="M:RiotNet.Models.StaticRealm.#ctor">
            <summary>
            Creates a new <see cref="T:RiotNet.Models.StaticRealm"/> instance.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticRealm.Cdn">
            <summary>
            Gets or sets the base CDN URL.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticRealm.Css">
            <summary>
            Gets or sets the latest changed version of Dragon Magic's css file.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticRealm.Dd">
            <summary>
            Gets or sets the latest changed version of Dragon Magic.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticRealm.L">
            <summary>
            Gets or sets the default language for this realm.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticRealm.Lg">
            <summary>
            Gets or sets the legacy script mode for IE6 or older.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticRealm.N">
            <summary>
            Gets or sets the latest changed version for each data type listed.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticRealm.ProfileIconMax">
            <summary>
            Gets or sets the special behavior number identifying the largest profile icon id that can be used under 500. Any profileicon that is requested between this number and 500 should be mapped to 0.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticRealm.Store">
            <summary>
            Gets or sets additional API data drawn from other sources that may be related to data dragon functionality.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticRealm.V">
            <summary>
            Gets or sets the current version of this realm.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticRealm.DatabaseId">
            <summary>
            Gets or sets the ID of the <see cref="T:RiotNet.Models.StaticRealm"/>. This does NOT come from the Riot API; it is used as a key when storing this object in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.StaticRuneList">
            <summary>
            Contains rune list data.
            </summary>
        </member>
        <member name="M:RiotNet.Models.StaticRuneList.#ctor">
            <summary>
            Creates a new <see cref="T:RiotNet.Models.StaticRuneList"/> instance.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticRuneList.Basic">
            <summary>
            Gets or sets the basic rune data, which contains the default values of the rune object.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticRuneList.Data">
            <summary>
            Gets or sets the set of runes indexed by name.
            </summary>
        </member>
        <member name="T:RiotNet.Models.StaticItemList">
            <summary>
            Contains item list data.
            </summary>
        </member>
        <member name="M:RiotNet.Models.StaticItemList.#ctor">
            <summary>
            Creates a new <see cref="T:RiotNet.Models.StaticItemList"/> instance.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticItemList.Basic">
            <summary>
            Gets or sets the basic item data, which contains the default value for each Item property.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticItemList.Data">
            <summary>
            Gets or sets the items indexed by ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticItemList.Groups">
            <summary>
            Gets or sets the list of groups, which define the maximum number of items of certain types that a player can own.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticItemList.Tree">
            <summary>
            Gets or sets the item tree data.
            </summary>
        </member>
        <member name="T:RiotNet.Models.StaticItemTree">
            <summary>
            Contains item tree data.
            </summary>
        </member>
        <member name="M:RiotNet.Models.StaticItemTree.#ctor">
            <summary>
            Creates a new <see cref="T:RiotNet.Models.StaticItemTree"/> instance.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticItemTree.Header">
            <summary>
            Gets or sets the item tree header.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticItemTree.Tags">
            <summary>
            Gets or sets the item tree tags.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticItemTree.DatabaseId">
            <summary>
            Gets or sets the ID of the current <see cref="T:RiotNet.Models.StaticItemTree"/>. This does NOT come from the Riot API; it is used as a key when storing this object in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.League">
            <summary>
            Represents a ranked league.
            </summary>
        </member>
        <member name="P:RiotNet.Models.League.Entries">
            <summary>
            Gets or sets the entries for all participants in the league.
            </summary>
        </member>
        <member name="P:RiotNet.Models.League.Name">
            <summary>
            Gets or sets the name of the league. This is an internal place-holder name only.
            </summary>
        </member>
        <member name="P:RiotNet.Models.League.ParticipantId">
            <summary>
            Gets or sets the ID of the relevant participant that is a member of this league (i.e., a requested summoner ID, a requested team ID,
            or the ID of a team to which one of the requested summoners belongs). Only present when full league is requested so that participant's
            entry can be identified. Not present when individual entry is requested.
            </summary>
        </member>
        <member name="P:RiotNet.Models.League.Queue">
            <summary>
            Gets or sets the league's queue type.
            </summary>
        </member>
        <member name="P:RiotNet.Models.League.Tier">
            <summary>
            Gets or sets the league's tier.
            </summary>
        </member>
        <member name="P:RiotNet.Models.League.DatabaseId">
            <summary>
            Gets or sets the ID of the league. This does NOT come from the Riot API; it is used as a key when storing this object in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.LeagueEntry">
            <summary>
            Contains league participant information representing a summoner or team.
            </summary>
        </member>
        <member name="M:RiotNet.Models.LeagueEntry.#ctor">
            <summary>
            Creates a new <see cref="T:RiotNet.Models.LeagueEntry"/> instance.
            </summary>
        </member>
        <member name="P:RiotNet.Models.LeagueEntry.Division">
            <summary>
            Gets or sets a Roman numeral representing the division that the participant is in.
            </summary>
        </member>
        <member name="P:RiotNet.Models.LeagueEntry.IsFreshBlood">
            <summary>
            Gets or sets whether the participant is fresh blood.
            </summary>
        </member>
        <member name="P:RiotNet.Models.LeagueEntry.IsHotStreak">
            <summary>
            Gets or sets whether the participant is on a hot streak.
            </summary>
        </member>
        <member name="P:RiotNet.Models.LeagueEntry.IsInactive">
            <summary>
            Gets or sets whether the participant is inactive.
            </summary>
        </member>
        <member name="P:RiotNet.Models.LeagueEntry.IsVeteran">
            <summary>
            Gets or sets whether the participant is a veteran.
            </summary>
        </member>
        <member name="P:RiotNet.Models.LeagueEntry.LeaguePoints">
            <summary>
            Gets or sets the number of league points that the participant has.
            </summary>
        </member>
        <member name="P:RiotNet.Models.LeagueEntry.Losses">
            <summary>
            Gets or sets the number of losses that the participant has.
            </summary>
        </member>
        <member name="P:RiotNet.Models.LeagueEntry.MiniSeries">
            <summary>
            Gets or sets the promotion series for the participant, or null if the participant is not is a series.
            </summary>
        </member>
        <member name="P:RiotNet.Models.LeagueEntry.PlayerOrTeamId">
            <summary>
            Gets or sets the participant's ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.LeagueEntry.PlayerOrTeamName">
            <summary>
            Gets or sets the participant's name.
            </summary>
        </member>
        <member name="P:RiotNet.Models.LeagueEntry.Wins">
            <summary>
            Gets or sets the number of wins that the participant has.
            </summary>
        </member>
        <member name="P:RiotNet.Models.LeagueEntry.DatabaseId">
            <summary>
            Gets or sets the ID of the <see cref="T:RiotNet.Models.LeagueEntry"/>. This does NOT come from the Riot API; it is used as a key when storing this object in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.LevelTip">
            <summary>
            Explains what happens when levelling up an ability.
            </summary>
        </member>
        <member name="M:RiotNet.Models.LevelTip.#ctor">
            <summary>
            Creates a new <see cref="T:RiotNet.Models.LevelTip"/> instance.
            </summary>
        </member>
        <member name="P:RiotNet.Models.LevelTip.Effect">
            <summary>
            Gets or sets the effects that change for each rank of the ability.
            </summary>
        </member>
        <member name="P:RiotNet.Models.LevelTip.Label">
            <summary>
            Gets or sets the labels for the corresponding effects that change at each rank of the ability.
            </summary>
        </member>
        <member name="T:RiotNet.Models.MetaData">
            <summary>
            Represents metadata for a rune.
            </summary>
        </member>
        <member name="M:RiotNet.Models.MetaData.#ctor">
            <summary>
            Creates a new <see cref="T:RiotNet.Models.MetaData"/> instance.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MetaData.IsRune">
            <summary>
            Gets or sets whether the object is a rune.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MetaData.Tier">
            <summary>
            Gets or sets the tier of the rune.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MetaData.Type">
            <summary>
            Gets or sets the type of the rune.
            </summary>
        </member>
        <member name="T:RiotNet.Models.MiniSeries">
            <summary>
            Contains information about a promotion series.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MiniSeries.Losses">
            <summary>
            Gets or sets the number of losses in the current series.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MiniSeries.Progress">
            <summary>
            Gets or sets a sring showing the current, sequential mini series progress where 'W' represents a win, 'L' represents a loss, and 'N' represents a game that hasn't been played yet.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MiniSeries.Target">
            <summary>
            Gets or sets the number of wins required for promotion.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MiniSeries.Wins">
            <summary>
            Gets or sets the number of wins in the current series.
            </summary>
        </member>
        <member name="T:RiotNet.Models.BasicData">
            <summary>
            Represents an item or rune.
            </summary>
        </member>
        <member name="M:RiotNet.Models.BasicData.#ctor">
            <summary>
            Creates a new <see cref="T:RiotNet.Models.BasicData"/> instance.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicData.Colloq">
            <summary>
            Gets or sets a semicolon-separated list of abbreviations that can be used for searching for the item.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicData.Description">
            <summary>
            Gets or sets the description of the item/rune.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicData.Group">
            <summary>
            Gets or sets the group to which the item/rune belongs.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicData.Id">
            <summary>
            Gets or sets the ID of the item or rune.
            </summary>
            <remarks>
            This property is used as the primary key when storing the current object in a database.
            </remarks>
        </member>
        <member name="P:RiotNet.Models.BasicData.Image">
            <summary>
            Gets or sets the image data for the current item/rune.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicData.Maps">
            <summary>
            Gets or sets the maps that the item is used on, indexed by map ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicData.Name">
            <summary>
            Gets or sets the name of the item/rune.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicData.PlainText">
            <summary>
            Gets or sets the plain text of the item/rune.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicData.RequiredChampion">
            <summary>
            Gets or sets the name of the only champion that is allowed to have this item.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicData.SanitizedDescription">
            <summary>
            Gets or sets the sanitized description of the item/rune.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicData.Stacks">
            <summary>
            Gets or sets the maximum number of instances of this item that can exist in a single inventory slot.
            </summary>
            <remarks>
            Some items have a "stacks" value of 0. I'm not sure why, but I think 0 should be treated as if it was 1.
            </remarks>
        </member>
        <member name="P:RiotNet.Models.BasicData.Stats">
            <summary>
            Gets or sets the stats that the item/rune applies.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicData.Tags">
            <summary>
            Gets or sets the tags of the item/rune.
            </summary>
        </member>
        <member name="T:RiotNet.Models.Passive">
            <summary>
            Contains champion passive ability data.
            </summary>
        </member>
        <member name="M:RiotNet.Models.Passive.#ctor">
            <summary>
            Creates a new <see cref="T:RiotNet.Models.Passive"/> instance.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Passive.Description">
            <summary>
            Gets or sets the description of the passive.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Passive.Image">
            <summary>
            Gets or sets the image data for the passive's icon.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Passive.Name">
            <summary>
            Gets or sets the name of the passive.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Passive.SanitizedDescription">
            <summary>
            Gets or sets the sanitized description of the passive.
            </summary>
        </member>
        <member name="T:RiotNet.Models.Recommended">
            <summary>
            Represents a recommended item set.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Recommended.Blocks">
            <summary>
            Gets or sets the blocks (or groups of items) in this item set.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Recommended.Champion">
            <summary>
            Gets or sets the champion name for the current item set.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Recommended.Map">
            <summary>
            Gets or sets the map for which the current item set applies.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Recommended.Mode">
            <summary>
            Gets or sets the game mode for which the current item set applies.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Recommended.Priority">
            <summary>
            Indicates whether this item set takes priority. This appears to be false for all item sets except Ashe's recommended items in the tutorial.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Recommended.Title">
            <summary>
            Gets or sets the title of the item set.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Recommended.Type">
            <summary>
            Gets or sets the type of item set. This value appears to always equal "riot".
            </summary>
        </member>
        <member name="P:RiotNet.Models.Recommended.DatabaseId">
            <summary>
            Gets or sets the ID of the current item set. This does NOT come from the Riot API; it is used as a key when storing this object in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.StaticRune">
            <summary>
            Represents a rune.
            </summary>
        </member>
        <member name="M:RiotNet.Models.StaticRune.#ctor">
            <summary>
            Creates a new <see cref="T:RiotNet.Models.StaticRune"/> instance.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticRune.Rune">
            <summary>
            Gets or sets the metadata for the rune.
            </summary>
        </member>
        <member name="T:RiotNet.Models.Skin">
            <summary>
            Contains champion skin data.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Skin.Id">
            <summary>
            Gets or sets the skin ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Skin.Name">
            <summary>
            Gets or sets the skin name.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Skin.Num">
            <summary>
            Gets or sets the skin number.
            </summary>
        </member>
        <member name="T:RiotNet.Models.SpellVars">
            <summary>
            Contains spell data for a single rank of a spell.
            </summary>
        </member>
        <member name="M:RiotNet.Models.SpellVars.#ctor">
            <summary>
            Creates a new <see cref="T:RiotNet.Models.SpellVars"/> instance.
            </summary>
        </member>
        <member name="P:RiotNet.Models.SpellVars.Coeff">
            <summary>
            Gets or sets the scaling coefficients for the current spell.
            </summary>
        </member>
        <member name="P:RiotNet.Models.SpellVars.Dyn">
            <summary>
            Gets or sets the special operator for this spell variable.
            </summary>
        </member>
        <member name="P:RiotNet.Models.SpellVars.Key">
            <summary>
            Gets or sets the key used to reference this spell variable in calculations.
            </summary>
        </member>
        <member name="P:RiotNet.Models.SpellVars.Link">
            <summary>
            Gets or sets the property that the scaling coefficients apply to.
            </summary>
        </member>
        <member name="P:RiotNet.Models.SpellVars.RanksWith">
            <summary>
            Gets or sets the ability with which this spell variable ranks up. If unspecified, it ranks up with the current ability.
            </summary>
        </member>
        <member name="P:RiotNet.Models.SpellVars.DatabaseId">
            <summary>
            Gets or sets the ID of the current <see cref="T:RiotNet.Models.SpellVars"/>. This does NOT come from the Riot API; it is used as a key when storing this object in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.StaticMasteryTreeList">
            <summary>
            Represents one row in a mastery tree.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticMasteryTreeList.MasteryTreeItems">
            <summary>
            Gets or sets the items in the current <see cref="T:RiotNet.Models.StaticMasteryTreeList"/>.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticMasteryTreeList.DatabaseId">
            <summary>
            Gets or sets the ID of the <see cref="T:RiotNet.Models.StaticMasteryTreeList"/>. This does NOT come from the Riot API; it is used as a key when storing this object in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.StaticSpell">
            <summary>
            The base class for a champion ability or summoner spell.
            </summary>
        </member>
        <member name="M:RiotNet.Models.StaticSpell.#ctor">
            <summary>
            Creates a new <see cref="T:RiotNet.Models.StaticSpell"/> instance.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticSpell.Cooldown">
            <summary>
            Gets or sets the cooldowns of this spell at each rank.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticSpell.CooldownBurn">
            <summary>
            Gets or sets the cooldown at all ranks merged into a single string.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticSpell.Cost">
            <summary>
            Gets or sets the mana (or other resource) cost of the spell.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticSpell.CostBurn">
            <summary>
            Gets or sets the cost at all ranks merged into a single string.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticSpell.CostType">
            <summary>
            Gets or sets the type of resource that this spell costs.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticSpell.Description">
            <summary>
            Gets or sets the description of the spell.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticSpell.Effect">
            <summary>
            Gets or sets the effect of the spell at each rank.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticSpell.EffectBurn">
            <summary>
            Gets or sets the effects at all ranks, merged into a single string for each effect.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticSpell.Image">
            <summary>
            Gets or sets the image data for the current spell.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticSpell.Key">
            <summary>
            Gets or sets the key of the current spell.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticSpell.LevelTip">
            <summary>
            Gets or sets the level-up tooltip of the current spell.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticSpell.MaxRank">
            <summary>
            Gets or sets the maximum number of points that a player can put into this spell.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticSpell.Name">
            <summary>
            Gets or sets the name of the spell.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticSpell.Range">
            <summary>
            Gets or sets the range of the spell at each rank. A list with a single entry of 0 indicates that the spell is self-cast.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticSpell.RangeBurn">
            <summary>
            Gets or sets the range at all ranks merged into a single string.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticSpell.Resource">
            <summary>
            Gets or sets the cost and type of resource that the spell uses.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticSpell.SanitizedDescription">
            <summary>
            Gets or sets the sanitized descrption of the spell.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticSpell.SanitizedTooltip">
            <summary>
            Gets or sets the sanitized spell tooltip.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticSpell.Tooltip">
            <summary>
            Gets or sets the spell tooltip.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticSpell.Vars">
            <summary>
            Gets or sets the scaling coefficients of the spell.
            </summary>
        </member>
        <member name="T:RiotNet.Models.StaticSummonerSpell">
            <summary>
            Represents a summoner spell.
            </summary>
        </member>
        <member name="M:RiotNet.Models.StaticSummonerSpell.#ctor">
            <summary>
            Creates a new <see cref="T:RiotNet.Models.StaticSummonerSpell"/> instance.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticSummonerSpell.Id">
            <summary>
            Gets or sets the summoner spell ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticSummonerSpell.Modes">
            <summary>
            Gets or sets the list of game modes in which the current summoner spell is allowed.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticSummonerSpell.SummonerLevel">
            <summary>
            Gets or sets the summoner level required to use this spell.
            </summary>
        </member>
        <member name="T:RiotNet.Models.StaticSummonerSpellList">
            <summary>
            
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticSummonerSpellList.Data">
            <summary>
            Gets or sets the summoner spells, indexed by name.
            </summary>
        </member>
        <member name="T:RiotNet.Models.Stats">
            <summary>
            Contains champion stats data.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Stats.Armor">
            <summary>
            Gets or sets the champion's base armor.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Stats.ArmorPerLevel">
            <summary>
            Gets or sets the champion's armor per level.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Stats.AttackDamage">
            <summary>
            Gets or sets the champion's base attack damage.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Stats.AttackDamagePerLevel">
            <summary>
            Gets or sets the champion's attack damage per level.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Stats.AttackRange">
            <summary>
            Gets or sets the champion's base attack range.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Stats.AttackSpeedOffset">
            <summary>
            Gets or sets the champion's attack speed offset.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Stats.AttackSpeedPerLevel">
            <summary>
            Gets or sets the champion's attack speed per level.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Stats.Crit">
            <summary>
            Gets or sets the champion's base critical strike chance.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Stats.CritPerLevel">
            <summary>
            Gets or sets the champion's critical strike chance per level.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Stats.HP">
            <summary>
            Gets or sets the champion's base health.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Stats.HPPerLevel">
            <summary>
            Gets or sets the champion's health per level.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Stats.HPRegen">
            <summary>
            Gets or sets the champion's base health regen.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Stats.HPRegenPerLevel">
            <summary>
            Gets or sets the champion's health regen per level.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Stats.MoveSpeed">
            <summary>
            Gets or sets the champion's base move speed.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Stats.MP">
            <summary>
            Gets or sets the champion's base mana.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Stats.MPPerLevel">
            <summary>
            Gets or sets the champion's mana per level.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Stats.MPRegen">
            <summary>
            Gets or sets the champion's base mana regen.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Stats.MPRegenPerLevel">
            <summary>
            Gets or sets the champion's mana regen per level.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Stats.SpellBlock">
            <summary>
            Gets or sets the champion's base magic resist.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Stats.SpellBlockPerLevel">
            <summary>
            Gets or sets the champion's magic resist per level.
            </summary>
        </member>
        <member name="T:RiotNet.Models.Summoner">
            <summary>
            Contains summoner information.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Summoner.Id">
            <summary>
            Gets or sets the summoner ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Summoner.Name">
            <summary>
            Gets or sets the summoner's name.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Summoner.ProfileIconId">
            <summary>
            Gets or sets the ID of the summoner's profile icon.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Summoner.RevisionDate">
            <summary>
            Gets or sets the date and time (in UTC) when the summoner was last modified.
            The summoner is modified by the following events: changing summoner icon,
            playing a tutorial, finishing a game, or changing summoner name.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Summoner.SummonerLevel">
            <summary>
            Gets or sets the summoner's level.
            </summary>
        </member>
        <member name="T:RiotNet.Models.Team">
            <summary>
            Contains team information.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Team.CreateDate">
            <summary>
            Gets or sets the date and time (in UTC) when the team was created.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Team.FullId">
            <summary>
            Gets or sets the full ID of the team; format: "TEAM-[-0-9a-f]*"
            </summary>
        </member>
        <member name="P:RiotNet.Models.Team.LastGameDate">
            <summary>
            Gets or sets the date and time (in UTC) of the last game played by the team ended.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Team.LastJoinDate">
            <summary>
            Gets or sets the most recent date and time (in UTC) when a member was added to the team.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Team.LastJoinedRankedTeamQueueDate">
            <summary>
            Gets or sets the date and time (in UTC) when the team last joined the ranked team queue.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Team.MatchHistory">
            <summary>
            Gets or sets the match history of the team.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Team.ModifyDate">
            <summary>
            Gets or sets the date and time (in UTC) when the team was last modified.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Team.Name">
            <summary>
            Gets or sets the name of the team.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Team.Roster">
            <summary>
            Gets or sets the team roster.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Team.SecondLastJoinDate">
            <summary>
            Gets or sets the date and time (in UTC) when the second most recent member was added to the team.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Team.Status">
            <summary>
            Gets or sets the status of the team.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Team.Tag">
            <summary>
            Gets or sets the team tag.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Team.TeamStatDetails">
            <summary>
            Gets or sets the team's statistics for each type of team ranked queue.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Team.ThirdLastJoinDate">
            <summary>
            Gets or sets the date and time (in UTC) when the third most recent member was added to the team.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Team.DatabaseId">
            <summary>
            Gets or sets the ID of the current <see cref="T:RiotNet.Models.Team"/>. This does NOT come from the Riot API; it is used as a key when storing this object in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.TeamMemberInfo">
            <summary>
            Contains team member information.
            </summary>
        </member>
        <member name="P:RiotNet.Models.TeamMemberInfo.InviteDate">
            <summary>
            Gets or sets the date and time (in UTC) when this team member was invited to the team.
            </summary>
        </member>
        <member name="P:RiotNet.Models.TeamMemberInfo.JoinDate">
            <summary>
            Gets or sets the date and time (in UTC) when this team member joined the team.
            </summary>
        </member>
        <member name="P:RiotNet.Models.TeamMemberInfo.PlayerId">
            <summary>
            Gets or sets this team member's summoner ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.TeamMemberInfo.Status">
            <summary>
            Gets or sets this team member's status.
            </summary>
        </member>
        <member name="P:RiotNet.Models.TeamMemberInfo.DatabaseId">
            <summary>
            Gets or sets the ID of the current <see cref="T:RiotNet.Models.TeamMemberInfo"/>. This does NOT come from the Riot API; it is used as a key when storing this object in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.TeamStatDetail">
            <summary>
            Contains team statistics detail information.
            </summary>
        </member>
        <member name="P:RiotNet.Models.TeamStatDetail.AverageGamesPlayed">
            <summary>
            Gets or sets the average games played. This value appears to always be 0.
            </summary>
        </member>
        <member name="P:RiotNet.Models.TeamStatDetail.Losses">
            <summary>
            Gets or sets the number of losses the team has for this ranked queue.
            </summary>
        </member>
        <member name="P:RiotNet.Models.TeamStatDetail.TeamStatType">
            <summary>
            Gets or sets the ranked queue type that these stats are for.
            </summary>
        </member>
        <member name="P:RiotNet.Models.TeamStatDetail.Wins">
            <summary>
            Gets or sets the number of wins the team has for this ranked queue.
            </summary>
        </member>
        <member name="P:RiotNet.Models.TeamStatDetail.DatabaseId">
            <summary>
            Gets or sets the ID of the current <see cref="T:RiotNet.Models.TeamStatDetail"/>. This does NOT come from the Riot API; it is used as a key when storing this object in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.Timeline">
            <summary>
            This object contains game timeline information.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Timeline.FrameInterval">
            <summary>
            Gets or sets time between each returned frame.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Timeline.Frames">
            <summary>
            Gets or sets list of timeline frames for the game.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Timeline.DatabaseId">
            <summary>
            Gets or sets the ID of the <see cref="T:RiotNet.Models.Timeline"/>. This does NOT come from the Riot API; it is used as a key when storing this object in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.Translation">
            <summary>
            Represents a message translation.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Translation.Content">
            <summary>
            Gets or sets the translation content.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Translation.Locale">
            <summary>
            Gets or sets the translation locale.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Translation.UpdatedAt">
            <summary>
            Gets or sets the last translation update time in UTC.
            </summary>
        </member>
        <member name="T:RiotNet.NotFoundException">
            <summary>
            Represents an error that occurs when a REST request fails because the requested resource was not found.
            </summary>
        </member>
        <member name="M:RiotNet.NotFoundException.#ctor">
            <summary>
            Creates a new <see cref="T:RiotNet.NotFoundException"/> instance.
            </summary>
        </member>
        <member name="M:RiotNet.NotFoundException.#ctor(RestSharp.IRestResponse)">
            <summary>
            Creates a new <see cref="T:RiotNet.NotFoundException"/> instance.
            </summary>
            <param name="response">The response.</param>
        </member>
        <member name="M:RiotNet.NotFoundException.#ctor(RestSharp.IRestResponse,System.Exception)">
            <summary>
            Creates a new <see cref="T:RiotNet.NotFoundException"/> instance.
            </summary>
            <param name="response">The response.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:RiotNet.NotFoundException.#ctor(RestSharp.IRestResponse,System.String)">
            <summary>
            Creates a new <see cref="T:RiotNet.NotFoundException"/> instance.
            </summary>
            <param name="response">The response.</param>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:RiotNet.NotFoundException.#ctor(RestSharp.IRestResponse,System.String,System.Exception)">
            <summary>
            Creates a new <see cref="T:RiotNet.NotFoundException"/> instance.
            </summary>
            <param name="response">The response.</param>
            <param name="message">A message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:RiotNet.NotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new <see cref="T:RiotNet.NotFoundException"/> instance.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:RiotNet.ReflectionUtils">
            <summary>
            Contains reflection-related helper methods.
            </summary>
        </member>
        <member name="M:RiotNet.ReflectionUtils.GetListInterface(System.Type)">
            <summary>
            Gets the IList&lt;&gt; interface that the type implements, if any.
            </summary>
            <param name="type">The type of object that implements the interface.</param>
            <returns>The first IList&lt;&gt; interface found, or null if no interface was found.</returns>
        </member>
        <member name="M:RiotNet.ReflectionUtils.GetDictionaryInterface(System.Type)">
            <summary>
            Gets the IDictionary&lt;,&gt; interface that the type implements, if any.
            </summary>
            <param name="type">The type of object that implements the interface.</param>
            <returns>The first IDictionary&lt;,&gt; interface found, or null if no interface was found.</returns>
        </member>
        <member name="M:RiotNet.ReflectionUtils.GetGenericInterface(System.Type,System.Type)">
            <summary>
            Gets the interface that a type implements that matches the specified generic interface definition.
            </summary>
            <param name="type">The type of object that implements the interface.</param>
            <param name="genericInterfaceDefinition">A generic type definition for an interface (e.g. typeof(IEnumerable&lt;&gt;)).</param>
            <returns>The first interface found that matches the generic interface definition, or null if no match was found.</returns>
        </member>
        <member name="M:RiotNet.ReflectionUtils.IsSubclassOfGenericTypeDefinition(System.Type,System.Type)">
            <summary>
            Gets whether the specified type is a subclass of a generic type represented by the specified generic type definition.
            </summary>
            <param name="objectType">The type to check.</param>
            <param name="genericTypeDefinition">A generic type definition (e.g. typeof(List&lt;&gt;))</param>
            <returns>A value that indicates whether the type is a subclass of the generic type definition.</returns>
        </member>
        <member name="T:RiotNet.RestSharpJsonNetSerializer">
            <summary>
            An adapter that allows Json.Net to be used with RestSharp.
            </summary>
        </member>
        <member name="F:RiotNet.RestSharpJsonNetSerializer.settings">
            <summary>
            Gets or sets the settings to use for serialization and deserialization.
            </summary>
        </member>
        <member name="M:RiotNet.RestSharpJsonNetSerializer.#ctor(RiotNet.RiotClientSettings)">
            <summary>
            Creates a new <see cref="T:RiotNet.RestSharpJsonNetSerializer"/> instance.
            </summary>
        </member>
        <member name="M:RiotNet.RestSharpJsonNetSerializer.Serialize(System.Object)">
            <summary>
            Serializes the request as JSON.
            </summary>
            <param name="obj">The object to serialize.</param>
            <returns>A string representing the serialized object.</returns>
        </member>
        <member name="M:RiotNet.RestSharpJsonNetSerializer.Deserialize``1(RestSharp.IRestResponse)">
            <summary>
            Deserializes the response as JSON.
            </summary>
            <typeparam name="T">The type of object to deserialize to.</typeparam>
            <param name="response">The response to deserialize.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="P:RiotNet.RestSharpJsonNetSerializer.ContentType">
            <summary>
            Gets or sets the Content-Type to use for JSON requests.
            </summary>
        </member>
        <member name="T:RiotNet.RestTimeoutException">
            <summary>
            Represents an error that occurs when a REST request fails because it timed out.
            </summary>
        </member>
        <member name="M:RiotNet.RestTimeoutException.#ctor">
            <summary>
            Creates a new <see cref="T:RiotNet.RestTimeoutException"/> instance.
            </summary>
        </member>
        <member name="M:RiotNet.RestTimeoutException.#ctor(RestSharp.IRestResponse)">
            <summary>
            Creates a new <see cref="T:RiotNet.RestTimeoutException"/> instance.
            </summary>
            <param name="response">The response.</param>
        </member>
        <member name="M:RiotNet.RestTimeoutException.#ctor(RestSharp.IRestResponse,System.Exception)">
            <summary>
            Creates a new <see cref="T:RiotNet.RestTimeoutException"/> instance.
            </summary>
            <param name="response">The response.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:RiotNet.RestTimeoutException.#ctor(RestSharp.IRestResponse,System.String)">
            <summary>
            Creates a new <see cref="T:RiotNet.RestTimeoutException"/> instance.
            </summary>
            <param name="response">The response.</param>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:RiotNet.RestTimeoutException.#ctor(RestSharp.IRestResponse,System.String,System.Exception)">
            <summary>
            Creates a new <see cref="T:RiotNet.RestTimeoutException"/> instance.
            </summary>
            <param name="response">The response.</param>
            <param name="message">A message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:RiotNet.RestTimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new <see cref="T:RiotNet.RestTimeoutException"/> instance.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:RiotNet.RateLimitExceededException">
            <summary>
            Represents an error that occurs when a REST request fails because the rate limit has been exceeded.
            </summary>
        </member>
        <member name="M:RiotNet.RateLimitExceededException.#ctor">
            <summary>
            Creates a new <see cref="T:RiotNet.RateLimitExceededException"/> instance.
            </summary>
        </member>
        <member name="M:RiotNet.RateLimitExceededException.#ctor(RestSharp.IRestResponse)">
            <summary>
            Creates a new <see cref="T:RiotNet.RateLimitExceededException"/> instance.
            </summary>
            <param name="response">The response.</param>
        </member>
        <member name="M:RiotNet.RateLimitExceededException.#ctor(RestSharp.IRestResponse,System.Exception)">
            <summary>
            Creates a new <see cref="T:RiotNet.RateLimitExceededException"/> instance.
            </summary>
            <param name="response">The response.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:RiotNet.RateLimitExceededException.#ctor(RestSharp.IRestResponse,System.String)">
            <summary>
            Creates a new <see cref="T:RiotNet.RateLimitExceededException"/> instance.
            </summary>
            <param name="response">The response.</param>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:RiotNet.RateLimitExceededException.#ctor(RestSharp.IRestResponse,System.String,System.Exception)">
            <summary>
            Creates a new <see cref="T:RiotNet.RateLimitExceededException"/> instance.
            </summary>
            <param name="response">The response.</param>
            <param name="message">A message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:RiotNet.RateLimitExceededException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new <see cref="T:RiotNet.RateLimitExceededException"/> instance.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:RiotNet.RestException">
            <summary>
            Represents an error that occurred during a REST request.
            </summary>
        </member>
        <member name="M:RiotNet.RestException.#ctor">
            <summary>
            Creates a new <see cref="T:RiotNet.RestException"/> instance.
            </summary>
        </member>
        <member name="M:RiotNet.RestException.#ctor(RestSharp.IRestResponse)">
            <summary>
            Creates a new <see cref="T:RiotNet.RestException"/> instance.
            </summary>
            <param name="response">The response.</param>
        </member>
        <member name="M:RiotNet.RestException.#ctor(RestSharp.IRestResponse,System.String)">
            <summary>
            Creates a new <see cref="T:RiotNet.RestException"/> instance.
            </summary>
            <param name="response">The response.</param>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:RiotNet.RestException.#ctor(RestSharp.IRestResponse,System.Exception)">
            <summary>
            Creates a new <see cref="T:RiotNet.RestException"/> instance.
            </summary>
            <param name="response">The response.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:RiotNet.RestException.#ctor(RestSharp.IRestResponse,System.String,System.Exception)">
            <summary>
            Creates a new <see cref="T:RiotNet.RestException"/> instance.
            </summary>
            <param name="response">The response.</param>
            <param name="message">A message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:RiotNet.RestException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new <see cref="T:RiotNet.RestException"/> instance.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:RiotNet.RestException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the SerializationInfo with information about the exception.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:RiotNet.RestException.Response">
            <summary>
            Gets the response.
            </summary>
        </member>
        <member name="T:RiotNet.ResponseEventHandler">
            <summary>
            Represents a method that will handle an event that contains response data.
            </summary>
            <param name="sender">The object that created the event.</param>
            <param name="e">Arguments for the event.</param>
        </member>
        <member name="T:RiotNet.ResponseEventArgs">
            <summary>
            Contains event data for an event that contains an HTTP response.
            </summary>
        </member>
        <member name="M:RiotNet.ResponseEventArgs.#ctor(RestSharp.IRestResponse)">
            <summary>
            Creates a new <see cref="T:RiotNet.ResponseEventArgs"/> instance.
            </summary>
            <param name="response">The response for the request that caused the event.</param>
        </member>
        <member name="P:RiotNet.ResponseEventArgs.Response">
            <summary>
            Gets the response for the request that caused the event.
            </summary>
        </member>
        <member name="T:RiotNet.RetryEventHandler">
            <summary>
            Represents a method that will handle an event that could trigger a retry of a request.
            </summary>
            <param name="sender">The object that created the event.</param>
            <param name="e">Arguments for the event.</param>
        </member>
        <member name="T:RiotNet.RetryEventArgs">
            <summary>
            Contains event data for an error that could trigger a retry of a request.
            </summary>
        </member>
        <member name="M:RiotNet.RetryEventArgs.#ctor(RestSharp.IRestResponse,System.Int32)">
            <summary>
            Creates a new <see cref="T:RiotNet.RetryEventArgs"/> instance.
            </summary>
            <param name="response">The response for the request that caused the event.</param>
            <param name="attemptCount">The number of times that the same request has been attempted.</param>
        </member>
        <member name="P:RiotNet.RetryEventArgs.AttemptCount">
            <summary>
            Gets the number of times that the same request has been attempted.
            </summary>
        </member>
        <member name="P:RiotNet.RetryEventArgs.Retry">
            <summary>
            Gets or sets whether the sender should retry the operation after the event handler has finished executing.
            </summary>
        </member>
        <member name="T:RiotNet.RiotClient">
            <summary>
            A client that interacts with the Riot Games API.
            </summary>
        </member>
        <member name="M:RiotNet.RiotClient.#ctor">
            <summary>
            Creates a new <see cref="T:RiotNet.RiotClient"/> instance.
            </summary>
        </member>
        <member name="M:RiotNet.RiotClient.#ctor(RiotNet.Models.Region)">
            <summary>
            Creates a new <see cref="T:RiotNet.RiotClient"/> instance.
            </summary>
            <param name="region">The region indicating which server to connect to.</param>
        </member>
        <member name="M:RiotNet.RiotClient.#ctor(RiotNet.Models.Region,System.String)">
            <summary>
            Creates a new <see cref="T:RiotNet.RiotClient"/> instance.
            </summary>
            <param name="region">The region indicating which server to connect to.</param>
            <param name="apiKey">The API key to use. NOTE: If you are using a public repository, do NOT check you API key in to the repository.
            It is recommended to load your API key from a separate file (e.g. key.txt) that is ignored by your repository.</param>
        </member>
        <member name="M:RiotNet.RiotClient.#ctor(RiotNet.Models.Region,RiotNet.RiotClientSettings)">
            <summary>
            Creates a new <see cref="T:RiotNet.RiotClient"/> instance.
            </summary>
            <param name="region">The region indicating which server to connect to.</param>
            <param name="settings">The settings to use.</param>
        </member>
        <member name="M:RiotNet.RiotClient.#ctor(RiotNet.Models.Region,RiotNet.RiotClientSettings,RestSharp.IRestClient,RestSharp.IRestClient)">
            <summary>
            Creates a new <see cref="T:RiotNet.RiotClient"/> instance.
            </summary>
            <param name="region">The region indicating which server to connect to.</param>
            <param name="settings">The settings to use.</param>
            <param name="client">The IRestClient implementation to use.</param>
            <param name="statusClient">The IRestClient implementation to use for lol-status API calls.</param>
        </member>
        <member name="M:RiotNet.RiotClient.#ctor(RiotNet.Models.Region,RiotNet.RiotClientSettings,RestSharp.IRestClient,RestSharp.IRestClient,RestSharp.IRestClient)">
            <summary>
            Creates a new <see cref="T:RiotNet.RiotClient"/> instance.
            </summary>
            <param name="region">The region indicating which server to connect to.</param>
            <param name="settings">The settings to use.</param>
            <param name="client">The IRestClient implementation to use.</param>
            <param name="statusClient">The IRestClient implementation to use for lol-status API calls.</param>
            <param name="globalClient">The IRestClient implementation to use for lol-static API calls.</param>
        </member>
        <member name="P:RiotNet.RiotClient.JsonSettings">
            <summary>
            Gets the JsonSerializerSettings that are used to deserialize responses from the Riot API. 
            </summary>
        </member>
        <member name="P:RiotNet.RiotClient.DefaultRegion">
            <summary>
            Gets or sets the default region to use when creating a new <see cref="T:RiotNet.RiotClient"/>.
            </summary>
        </member>
        <member name="P:RiotNet.RiotClient.DefaultSettings">
            <summary>
            Gets or sets a function that defines the default <see cref="T:RiotNet.RiotClientSettings"/> to use when creating a new <see cref="T:RiotNet.RiotClient"/>.
            </summary>
        </member>
        <member name="M:RiotNet.RiotClient.GetPlatformId(RiotNet.Models.Region)">
            <summary>
            Gets the platform ID for the specified region.
            </summary>
            <param name="region">The region corresponding to the platform ID.</param>
            <returns>The platform ID.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetServerName(RiotNet.Models.Region)">
            <summary>
            Gets the server domain name for the specified region.
            </summary>
            <param name="region">The region corresponding to the server.</param>
            <returns>The server name.</returns>
        </member>
        <member name="P:RiotNet.RiotClient.Region">
            <summary>
            Gets the region that the current <see cref="T:RiotNet.RiotClient"/> connects to.
            </summary>
        </member>
        <member name="P:RiotNet.RiotClient.PlatformId">
            <summary>
            Gets the platform ID of the current region.
            </summary>
        </member>
        <member name="E:RiotNet.RiotClient.RequestTimedOut">
            <summary>
            Occurs when a request times out.
            </summary>
        </member>
        <member name="E:RiotNet.RiotClient.ConnectionFailed">
            <summary>
            Occurs when the client fails to connect to the server, or when an exception occurs while executing a request.
            </summary>
        </member>
        <member name="E:RiotNet.RiotClient.RateLimitExceeded">
            <summary>
            Occurs when the client executes a request when the API rate limit has been exceeded (status code 429).
            </summary>
        </member>
        <member name="E:RiotNet.RiotClient.ServerError">
            <summary>
            Occurs when the server returns an error code of 500 or higher.
            </summary>
        </member>
        <member name="E:RiotNet.RiotClient.ResourceNotFound">
            <summary>
            Occurs when a request fails because a resource was not found (status code 404).
            </summary>
        </member>
        <member name="E:RiotNet.RiotClient.ResponseError">
            <summary>
            Occurs when a response returns an error code that does not fit into any other category, or an exception occurs during the response.
            </summary>
        </member>
        <member name="P:RiotNet.RiotClient.Settings">
            <summary>
            Gets the settings for the <see cref="T:RiotNet.RiotClient"/>.
            </summary>
        </member>
        <member name="P:RiotNet.RiotClient.Client">
            <summary>
            Gets a reference to the underlying REST client.
            </summary>
        </member>
        <member name="M:RiotNet.RiotClient.Execute``1(RestSharp.IRestRequest)">
            <summary>
            Executes a REST request synchronously.
            </summary>
            <typeparam name="T">The type of data to expect in the response.</typeparam>
            <param name="request">The request to execute.</param>
            <returns>The deserialized response.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.Execute``1(RestSharp.IRestRequest,RestSharp.IRestClient)">
            <summary>
            Executes a REST request synchronously.
            </summary>
            <typeparam name="T">The type of data to expect in the response.</typeparam>
            <param name="request">The request to execute.</param>
            <param name="client">The client to use when executing the request.</param>
            <returns>The deserialized response.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.ExecuteAsync``1(RestSharp.IRestRequest)">
            <summary>
            Executes a REST request asynchronously.
            </summary>
            <typeparam name="T">The type of data to expect in the response.</typeparam>
            <param name="request">The request to execute.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.ExecuteAsync``1(RestSharp.IRestRequest,RestSharp.IRestClient)">
            <summary>
            Executes a REST request asynchronously.
            </summary>
            <typeparam name="T">The type of data to expect in the response.</typeparam>
            <param name="request">The request to execute.</param>
            <param name="client">The client to use when executing the request.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.DetermineResponseAction(RestSharp.IRestResponse,System.Int32)">
            <summary>
            Determines which action to take for the given response.
            </summary>
            <param name="response">A <see cref="T:RestSharp.IRestResponse"/>.</param>
            <param name="attemptCount">The number of times the request has been attempted so far.</param>
            <returns>A <see cref="T:RiotNet.RiotClient.ResponseAction"/>.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.Get(System.String)">
            <summary>
            Creates a GET request for the specified resource. The region, platformId, and api_key parameters are automatically added to the request.
            </summary>
            <param name="resource">The resource path, relative to the base URL.</param>
            <returns>A rest request.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.Post(System.String)">
            <summary>
            Creates a POST request for the specified resource. The region, platformId, and api_key parameters are automatically added to the request.
            </summary>
            <param name="resource">The resource path, relative to the base URL.</param>
            <returns>A rest request.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.Put(System.String)">
            <summary>
            Creates a PUT request for the specified resource. The region, platformId, and api_key parameters are automatically added to the request.
            </summary>
            <param name="resource">The resource path, relative to the base URL.</param>
            <returns>A rest request.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.CreateRequest(System.String,RestSharp.Method)">
            <summary>
            Creates a request for the specified resource. The region, platformId, and api_key parameters are automatically added to the request.
            </summary>
            <param name="resource">The resource path, relative to the base URL.</param>
            <param name="method">The method to use.</param>
            <returns>A rest request.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.OnRequestTimedOut(RiotNet.RetryEventArgs)">
            <summary>
            Occurs when a request times out.
            </summary>
            <param name="e">Arguments for the event.</param>
        </member>
        <member name="M:RiotNet.RiotClient.OnConnectionFailed(RiotNet.RetryEventArgs)">
            <summary>
            Occurs when the client fails to connect to the server while executing a request.
            </summary>
            <param name="e">Arguments for the event.</param>
        </member>
        <member name="M:RiotNet.RiotClient.OnRateLimitExceeded(RiotNet.RetryEventArgs)">
            <summary>
            Occurs when a request fails because the rate limit has been exceeded (status code 429).
            </summary>
            <param name="e">Arguments for the event.</param>
        </member>
        <member name="M:RiotNet.RiotClient.OnServerError(RiotNet.RetryEventArgs)">
            <summary>
            Occurs when the server returns an error code of 500 or higher.
            </summary>
            <param name="e">Arguments for the event.</param>
        </member>
        <member name="M:RiotNet.RiotClient.OnResourceNotFound(RiotNet.ResponseEventArgs)">
            <summary>
            Occurs when a request fails because a resource was not found (status code 404).
            </summary>
            <param name="e">Arguments for the event.</param>
        </member>
        <member name="M:RiotNet.RiotClient.OnResponseError(RiotNet.ResponseEventArgs)">
            <summary>
            Occurs when a response returns an error code that does not fit into any other category, or an exception occurs during the response.
            </summary>
            <param name="e">Arguments for the event.</param>
        </member>
        <member name="T:RiotNet.RiotClient.ResponseAction">
            <summary>
            Specifies the action to take after processing a request.
            </summary>
        </member>
        <member name="F:RiotNet.RiotClient.ResponseAction.Return">
            <summary>
            Indicates that the response was received successfully, and its data should be returned.
            </summary>
        </member>
        <member name="F:RiotNet.RiotClient.ResponseAction.ReturnDefault">
            <summary>
            Indicates that the response was NOT received successfully, and the default value of the type (null in most cases) should be returned.
            </summary>
        </member>
        <member name="F:RiotNet.RiotClient.ResponseAction.Retry">
            <summary>
            Indicates that the response was NOT received successfully, and the request should be re-sent (unless the maximum number of attempts has been exceeded).
            </summary>
        </member>
        <member name="P:RiotNet.RiotClient.ChampionApiVersion">
            <summary>
            Gets the currently supported version of the Champion API that the client communicates with.
            </summary>
        </member>
        <member name="M:RiotNet.RiotClient.GetChampions(System.Boolean)">
            <summary>
            Gets dynamic champion information for all champions. This method uses the Champion API.
            </summary>
            <param name="freeToPlay">True if only requesting free to play champion information. Default is false.</param>
            <returns>List of champion information.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetChampionsAsync(System.Boolean)">
            <summary>
            Gets dynamic champion information for all champions. This method uses the Champion API.
            </summary>
            <param name="freeToPlay">True if only requesting free to play champion information. Default is false.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetChampionById(System.Int64)">
            <summary>
            Gets dynamic champion information for the specified champion. This method uses the Champion API.
            </summary>
            <param name="id">The champion id.</param>
            <returns>Champion information.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetChampionByIdAsync(System.Int64)">
            <summary>
            Gets dynamic champion information for the specified champion. This method uses the Champion API.
            </summary>
            <param name="id">The champion id.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetChampionMastery(System.Int64,System.Int64)">
            <summary>
            Gets information about a summoner's mastery of a champion. This method uses the Champion Mastery API.
            </summary>
            <param name="playerId">The summoner ID.</param>
            <param name="championId">The champion ID.</param>
            <returns>The champion mastery information.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetChampionMasteryAsync(System.Int64,System.Int64)">
            <summary>
            Gets information about a summoner's mastery of a champion. This method uses the Champion Mastery API.
            </summary>
            <param name="playerId">The summoner ID.</param>
            <param name="championId">The champion ID.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetChampionMasteries(System.Int64)">
            <summary>
            Gets information about a summoner's mastery of all champions they have played. This method uses the Champion Mastery API.
            </summary>
            <param name="playerId">The summoner ID.</param>
            <returns>The champion mastery information.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetChampionMasteriesAsync(System.Int64)">
            <summary>
            Gets information about a summoner's mastery of all champions they have played. This method uses the Champion Mastery API.
            </summary>
            <param name="playerId">The summoner ID.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetChampionMasteryScore(System.Int64)">
            <summary>
            Gets a summoner's champion mastery score (the sum of the champion levels of all champions for that summoner). This method uses the Champion Mastery API.
            </summary>
            <param name="playerId">The summoner ID.</param>
            <returns>The champion mastery information.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetChampionMasteryScoreAsync(System.Int64)">
            <summary>
            Gets a summoner's champion mastery score (the sum of the champion levels of all champions for that summoner). This method uses the Champion Mastery API.
            </summary>
            <param name="playerId">The summoner ID.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetChampionMasteryTopChampions(System.Int64,System.Nullable{System.Int32})">
            <summary>
            Gets information about a summoner's mastery of their most mastered champions. This method uses the Champion Mastery API.
            </summary>
            <param name="playerId">The summoner ID.</param>
            <param name="count">The number of entries to retrieve. Defaults to 3.</param>
            <returns>The champion mastery information.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetChampionMasteryTopChampionsAsync(System.Int64,System.Nullable{System.Int32})">
            <summary>
            Gets information about a summoner's mastery of their most mastered champions. This method uses the Champion Mastery API.
            </summary>
            <param name="playerId">The summoner ID.</param>
            <param name="count">The number of entries to retrieve. Defaults to 3.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="P:RiotNet.RiotClient.CurrentGameApiVersion">
            <summary>
            Gets the currently supported version of the Current Game API that the client communicates with.
            </summary>
        </member>
        <member name="M:RiotNet.RiotClient.GetCurrentGameBySummonerId(System.Int64)">
            <summary>
            Gets information about the current game a summoner is playing. This method uses the Current Game API.
            </summary>
            <param name="summonerId">The summoner ID.</param>
            <returns>The current game information.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetCurrentGameBySummonerIdAsync(System.Int64)">
            <summary>
            Gets information about the current game a summoner is playing. This method uses the Current Game API.
            </summary>
            <param name="summonerId">The summoner ID.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="P:RiotNet.RiotClient.FeaturedGameApiVersion">
            <summary>
            Gets the currently supported version of the Featured Game API that the client communicates with.
            </summary>
        </member>
        <member name="M:RiotNet.RiotClient.GetFeaturedGames">
            <summary>
            Gets the games currently featured in the League of Legends client. This method uses the Featured Game API.
            </summary>
            <returns>The featured games.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetFeaturedGamesAsync">
            <summary>
            Gets the games currently featured in the League of Legends client. This method uses the Featured Game API.
            </summary>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="P:RiotNet.RiotClient.GameApiVersion">
            <summary>
            Gets the currently supported version of the Game API that the client communicates with.
            </summary>
        </member>
        <member name="M:RiotNet.RiotClient.GetGamesBySummonerId(System.Int64)">
            <summary>
            Gets the recent games for a summoner. This method uses the Game API.
            </summary>
            <param name="summonerId">The summoner's summoner ID.</param>
            <returns>The summoner's recent games.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetGamesBySummonerIdAsync(System.Int64)">
            <summary>
            Gets the recent games for a summoner. This method uses the Game API.
            </summary>
            <param name="summonerId">The summoner's summoner ID.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="P:RiotNet.RiotClient.LeagueApiVersion">
            <summary>
            Gets the currently supported version of the League API that the client communicates with.
            </summary>
        </member>
        <member name="M:RiotNet.RiotClient.GetLeaguesBySummonerIds(System.Int64[])">
            <summary>
            Gets the full league information for all leagues that the summoners are in, including the leages for the teams they are on. Data is mapped by summoner ID. This method uses the League API.
            </summary>
            <param name="summonerIds">The summoners' summoner IDs. The maximum allowed at once is 10.</param>
            <returns>The mapping from summoner IDs to the collection of leagues.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetLeaguesBySummonerIdsAsync(System.Int64[])">
            <summary>
            Gets the full league information for all leagues that the summoners are in, including the leages for the teams they are on. Data is mapped by summoner ID. This method uses the League API.
            </summary>
            <param name="summonerIds">The summoners' summoner IDs. The maximum allowed at once is 10.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetLeagueEntriesBySummonerIds(System.Int64[])">
            <summary>
            Gets the full league information for all leagues that the summoners are in, including the leages for the teams they are on. Only includes the league entry for the specified summoner(s). Data is mapped by summoner ID. This method uses the League API.
            </summary>
            <param name="summonerIds">The summoners' summoner IDs. The maximum allowed at once is 10.</param>
            <returns>The mapping from summoner IDs to the collection of league entries for the summoner.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetLeagueEntriesBySummonerIdsAsync(System.Int64[])">
            <summary>
            Gets the full league information for all leagues that the summoners are in, including the leages for the teams they are on. Only includes the league entry for the specified summoner(s). Data is mapped by summoner ID. This method uses the League API.
            </summary>
            <param name="summonerIds">The summoners' summoner IDs. The maximum allowed at once is 10.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetLeaguesByTeamIds(System.String[])">
            <summary>
            Gets the full league information for all leagues that the teams are in. Data is mapped by team ID. This method uses the League API.
            </summary>
            <param name="teamIds">The teams' team IDs. The maximum allowed at once is 10.</param>
            <returns>The mapping from team IDs to the collection of leagues.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetLeaguesByTeamIdsAsync(System.String[])">
            <summary>
            Gets the full league information for all leagues that the teams are in. Data is mapped by team ID. This method uses the League API.
            </summary>
            <param name="teamIds">The teams' team IDs. The maximum allowed at once is 10.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetLeagueEntriesByTeamIds(System.String[])">
            <summary>
            Gets the league information for all leagues that the teams are in. Only includes the league entry for the specified team(s). Data is mapped by team ID. This method uses the League API.
            </summary>
            <param name="teamIds">The teams' team IDs. The maximum allowed at once is 10.</param>
            <returns>The mapping from team IDs to the collection of league entries for the team.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetLeagueEntriesByTeamIdsAsync(System.String[])">
            <summary>
            Gets the league information for all leagues that the teams are in. Only includes the league entry for the specified team(s). Data is mapped by team ID. This method uses the League API.
            </summary>
            <param name="teamIds">The teams' team IDs. The maximum allowed at once is 10.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetChallengerLeague(RiotNet.Models.RankedQueue)">
            <summary>
            Gets the challenger league. This method uses the League API.
            </summary>
            <param name="type">The queue type.</param>
            <returns>The challenger league.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetChallengerLeagueAsync(RiotNet.Models.RankedQueue)">
            <summary>
            Gets the challenger league. This method uses the League API.
            </summary>
            <param name="type">The queue type.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetMasterLeague(RiotNet.Models.RankedQueue)">
            <summary>
            Gets the master league. This method uses the League API.
            </summary>
            <param name="type">The queue type.</param>
            <returns>The master league.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetMasterLeagueAsync(RiotNet.Models.RankedQueue)">
            <summary>
            Gets the master league. This method uses the League API.
            </summary>
            <param name="type">The queue type.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="P:RiotNet.RiotClient.MatchApiVersion">
            <summary>
            Gets the currently supported version of the Match API that the client communicates with.
            </summary>
        </member>
        <member name="M:RiotNet.RiotClient.GetMatchIdsByTournamentCode(System.String)">
            <summary>
            Gets the list of match IDs for a tournament code. This method uses the Match API.
            </summary>
            <param name="tournamentCode">The tournament code.</param>
            <returns>The match IDs.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetMatchIdsByTournamentCodeAsync(System.String)">
            <summary>
            Gets the list of match IDs for a tournament code. This method uses the Match API.
            </summary>
            <param name="tournamentCode">The tournament code.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetMatchForTournament(System.Int64,System.String)">
            <summary>
            Gets the details of a match. This method uses the Match API. This endpoint is only accessible if you have a tournament API key.
            </summary>
            <param name="matchId">The ID of the match.</param>
            <param name="tournamentCode">The tournament code.</param>
            <returns>The details of the match.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetMatchForTournamentAsync(System.Int64,System.String)">
            <summary>
            Gets the details of a match. This method uses the Match API. This endpoint is only accessible if you have a tournament API key.
            </summary>
            <param name="matchId">The ID of the match.</param>
            <param name="tournamentCode">The tournament code.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetMatch(System.Int64,System.Boolean)">
            <summary>
            Gets the details of a match. This method uses the Match API.
            </summary>
            <param name="matchId">The ID of the match.</param>
            <param name="includeTimeline">Whether or not to include the match timeline data.</param>
            <returns>The details of the match.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetMatchAsync(System.Int64,System.Boolean)">
            <summary>
            Gets the details of a match. This method uses the Match API.
            </summary>
            <param name="matchId">The ID of the match.</param>
            <param name="includeTimeline">Whether or not to include the match timeline data.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="P:RiotNet.RiotClient.MatchListApiVersion">
            <summary>
            Gets the currently supported version of the Match List API that the client communicates with.
            </summary>
        </member>
        <member name="M:RiotNet.RiotClient.GetMatchList(System.Int64,System.Int64[],RiotNet.Models.RankedQueue[],RiotNet.Models.Season[],System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Gets the match list for a summoner. This method uses the Match List API.
            </summary>
            <param name="summonerId">The summoner's summoner IDs.</param>
            <param name="championIds">Only get games where the summoner played one of these champions.</param>
            <param name="rankedQueues">Only get games from these ranked queues.</param>
            <param name="seasons">Only get games from these seasons.</param>
            <param name="beginTime">Only get games played after this time.</param>
            <param name="endTime">Only get games played before this time.</param>
            <param name="beginIndex">The begin index to use for fetching games.</param>
            <param name="endIndex">The end index to use for fetching games. The maximum allowed difference between beginIndex and endIndex is 20; if it is larger than 20, endIndex will be modified to satisfy this restriction.</param>
            <returns>The match list for the summoner.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetMatchListAsync(System.Int64,System.Int64[],RiotNet.Models.RankedQueue[],RiotNet.Models.Season[],System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Gets the match list for a summoner. This method uses the Match List API.
            </summary>
            <param name="summonerId">The summoner's summoner IDs.</param>
            <param name="championIds">Only get games where the summoner played one of these champions.</param>
            <param name="rankedQueues">Only get games from these ranked queues.</param>
            <param name="seasons">Only get games from these seasons.</param>
            <param name="beginTime">Only get games played after this time.</param>
            <param name="endTime">Only get games played before this time.</param>
            <param name="beginIndex">The begin index to use for fetching games.</param>
            <param name="endIndex">The end index to use for fetching games. The maximum allowed difference between beginIndex and endIndex is 20; if it is larger than 20, endIndex will be modified to satisfy this restriction.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="P:RiotNet.RiotClient.LolStaticDataApiVersion">
            <summary>
            Gets the currently supported version of the LoL Static Data API that the client communicates with.
            </summary>
        </member>
        <member name="M:RiotNet.RiotClient.GetStaticChampions(System.String,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the details for all champions. This method uses the LoL Static Data API.
            </summary>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from <see cref="M:RiotNet.RiotClient.GetVersionsAsync"/>.</param>
            <param name="dataById">If true, the returned data map will use the champions' IDs as the keys. If false, the returned data map will use the champions' keys instead.</param>
            <param name="champListData">Tags to return additional data. Valid tags are any property of the <see cref="T:RiotNet.Models.StaticChampion"/> or <see cref="T:RiotNet.Models.StaticChampionList"/> objects. Only type, version, data, id, name, key, and title are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.</param>
            <returns>A <see cref="T:RiotNet.Models.StaticChampionList"/>.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.RiotClient.GetStaticChampionsAsync(System.String,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the details for all champions. This method uses the LoL Static Data API.
            </summary>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from <see cref="M:RiotNet.RiotClient.GetVersionsAsync"/>.</param>
            <param name="dataById">If true, the returned data map will use the champions' IDs as the keys. If false, the returned data map will use the champions' keys instead.</param>
            <param name="champListData">Tags to return additional data. Valid tags are any property of the <see cref="T:RiotNet.Models.StaticChampion"/> or <see cref="T:RiotNet.Models.StaticChampionList"/> objects. Only type, version, data, id, name, key, and title are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.RiotClient.GetStaticChampionById(System.Int32,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets champion details by ID. This method uses the LoL Static Data API.
            </summary>
            <param name="id">The champion ID.</param>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. A list of valid versions can be obtained from <see cref="M:RiotNet.RiotClient.GetStaticVersions"/>.</param>
            <param name="champData">Tags to return additional data. Valid tags are any property of the <see cref="T:RiotNet.Models.StaticChampion"/> object. Only id, name, key, and title are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.</param>
            <returns>A <see cref="T:RiotNet.Models.StaticChampion"/>.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.RiotClient.GetStaticChampionByIdAsync(System.Int32,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets champion details by ID. This method uses the LoL Static Data API.
            </summary>
            <param name="id">The champion ID.</param>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. A list of valid versions can be obtained from <see cref="M:RiotNet.RiotClient.GetVersionsAsync"/>.</param>
            <param name="champData">Tags to return additional data. Valid tags are any property of the <see cref="T:RiotNet.Models.StaticChampion"/> object. Only id, name, key, and title are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.RiotClient.GetStaticItems(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets a list of all available items. This method uses the LoL Static Data API.
            </summary>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from <see cref="M:RiotNet.RiotClient.GetStaticVersions"/>.</param>
            <param name="itemListData">Tags to return additional data. Valid tags are any property of the <see cref="T:RiotNet.Models.StaticItem"/> or <see cref="T:RiotNet.Models.StaticItemList"/> objects. Only id, name, type, version, basic, data, plaintext, group, and description are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.</param>
            <returns>A <see cref="T:RiotNet.Models.StaticItemList"/>.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.RiotClient.GetStaticItemsAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets a list of all available items. This method uses the LoL Static Data API.
            </summary>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from <see cref="M:RiotNet.RiotClient.GetVersionsAsync"/>.</param>
            <param name="itemListData">Tags to return additional data. Valid tags are any property of the <see cref="T:RiotNet.Models.StaticItem"/> or <see cref="T:RiotNet.Models.StaticItemList"/> objects. Only id, name, type, version, basic, data, plaintext, group, and description are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.RiotClient.GetStaticLanguages">
            <summary>
            Gets a list of available languages. This method uses the LoL Static Data API.
            </summary>
            <returns>A list of strings that represent a language.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.RiotClient.GetStaticLanguagesAsync">
            <summary>
            Gets a list of available languages. This method uses the LoL Static Data API.
            </summary>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.RiotClient.GetStaticLanguageStrings(System.String,System.String)">
            <summary>
            Gets a list of available language strings. This method uses the LoL Static Data API.
            </summary>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from <see cref="M:RiotNet.RiotClient.GetStaticVersions"/>.</param>
            <returns>A <see cref="T:RiotNet.Models.StaticLanuageStrings"/>.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.RiotClient.GetStaticLanguageStringsAsync(System.String,System.String)">
            <summary>
            Gets a list of available language strings. This method uses the LoL Static Data API.
            </summary>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from <see cref="M:RiotNet.RiotClient.GetVersionsAsync"/>.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.RiotClient.GetStaticMaps(System.String,System.String)">
            <summary>
            Gets a list of all maps. This method uses the LoL Static Data API.
            </summary>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from <see cref="M:RiotNet.RiotClient.GetStaticVersions"/>.</param>
            <returns>A <see cref="T:RiotNet.Models.StaticMapList"/>.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.RiotClient.GetStaticMapsAsync(System.String,System.String)">
            <summary>
            Gets a list of all maps. This method uses the LoL Static Data API.
            </summary>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from <see cref="M:RiotNet.RiotClient.GetVersionsAsync"/>.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.RiotClient.GetStaticMasteries(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the details for all masteries. This method uses the LoL Static Data API.
            </summary>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from <see cref="M:RiotNet.RiotClient.GetVersionsAsync"/>.</param>
            <param name="masteryListData">Tags to return additional data. Valid tags are any property of the <see cref="T:RiotNet.Models.StaticMastery"/> or <see cref="T:RiotNet.Models.StaticMasteryList"/> objects. Only type, version, data, id, name, and description are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.</param>
            <returns>A <see cref="T:RiotNet.Models.StaticMasteryList"/>.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.RiotClient.GetStaticMasteriesAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the details for all masteries. This method uses the LoL Static Data API.
            </summary>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from <see cref="M:RiotNet.RiotClient.GetVersionsAsync"/>.</param>
            <param name="masteryListData">Tags to return additional data. Valid tags are any property of the <see cref="T:RiotNet.Models.StaticMastery"/> or <see cref="T:RiotNet.Models.StaticMasteryList"/> objects. Only type, version, data, id, name, and description are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.RiotClient.GetStaticMasteryById(System.Int32,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets mastery details by ID. This method uses the LoL Static Data API.
            </summary>
            <param name="id">The mastery ID.</param>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. A list of valid versions can be obtained from <see cref="M:RiotNet.RiotClient.GetStaticVersions"/>.</param>
            <param name="masteryData">Tags to return additional data. Valid tags are any property of the <see cref="T:RiotNet.Models.StaticMastery"/> object. Only id, name, and description are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.</param>
            <returns>A <see cref="T:RiotNet.Models.StaticMastery"/>.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.RiotClient.GetStaticMasteryByIdAsync(System.Int32,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets mastery details by ID. This method uses the LoL Static Data API.
            </summary>
            <param name="id">The mastery ID.</param>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. A list of valid versions can be obtained from <see cref="M:RiotNet.RiotClient.GetVersionsAsync"/>.</param>
            <param name="masteryData">Tags to return additional data. Valid tags are any property of the <see cref="T:RiotNet.Models.StaticMastery"/> object. Only id, name, description are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.RiotClient.GetStaticRealm">
            <summary>
            Gets the realm data. This method uses the LoL Static Data API.
            </summary>
            <returns>The current realm data.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.RiotClient.GetStaticRealmAsync">
            <summary>
            Gets the realm data. This method uses the LoL Static Data API.
            </summary>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.RiotClient.GetStaticRunes(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets a list of all available runes. This method uses the LoL Static Data API.
            </summary>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from <see cref="M:RiotNet.RiotClient.GetStaticVersions"/>.</param>
            <param name="runeListData">Tags to return additional data. Valid tags are any property of the <see cref="T:RiotNet.Models.StaticRune"/> or <see cref="T:RiotNet.Models.StaticRuneList"/> objects. Only type, version, data, id, name, rune, and description are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.</param>
            <returns>A dictionary of runes indexed by ID.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.RiotClient.GetStaticRunesAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets a list of all available runes. This method uses the LoL Static Data API.
            </summary>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from <see cref="M:RiotNet.RiotClient.GetVersionsAsync"/>.</param>
            <param name="runeListData">Tags to return additional data. Valid tags are any property of the <see cref="T:RiotNet.Models.StaticRune"/> or <see cref="T:RiotNet.Models.StaticRuneList"/> objects. Only type, version, data, id, name, rune, and description are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.RiotClient.GetStaticRuneById(System.Int32,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets a rune by ID. This method uses the LoL Static Data API.
            </summary>
            <param name="id">The rune ID.</param>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. A list of valid versions can be obtained from <see cref="M:RiotNet.RiotClient.GetStaticVersions"/>.</param>
            <param name="runeData">Tags to return additional data. Valid tags are any property of the <see cref="T:RiotNet.Models.StaticRune"/> object. Only id, name, rune, and description are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.</param>
            <returns>A <see cref="T:RiotNet.Models.StaticRune"/>.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.RiotClient.GetStaticRuneByIdAsync(System.Int32,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets a rune by ID. This method uses the LoL Static Data API.
            </summary>
            <param name="id">The rune ID.</param>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. A list of valid versions can be obtained from <see cref="M:RiotNet.RiotClient.GetVersionsAsync"/>.</param>
            <param name="runeData">Tags to return additional data. Valid tags are any property of the <see cref="T:RiotNet.Models.StaticRune"/> object. Only id, name, rune, and description are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.RiotClient.GetStaticSummonerSpells(System.String,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the details for all summoner spells. This method uses the LoL Static Data API.
            </summary>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from <see cref="M:RiotNet.RiotClient.GetVersionsAsync"/>.</param>
            <param name="dataById">If true, the returned data map will use the spells' IDs as the keys. If false, the returned data map will use the spells' keys instead.</param>
            <param name="spellListData">Tags to return additional data. Valid tags are any property of the <see cref="T:RiotNet.Models.StaticSummonerSpell"/> or <see cref="T:RiotNet.Models.StaticSummonerSpellList"/> objects. Only type, version, data, id, key, name, description, and summonerLevel are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.</param>
            <returns>A <see cref="T:RiotNet.Models.StaticSummonerSpellList"/>.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.RiotClient.GetStaticSummonerSpellsAsync(System.String,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the details for all summoner spells. This method uses the LoL Static Data API.
            </summary>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from <see cref="M:RiotNet.RiotClient.GetVersionsAsync"/>.</param>
            <param name="dataById">If true, the returned data map will use the spells' IDs as the keys. If false, the returned data map will use the spells' keys instead.</param>
            <param name="spellListData">Tags to return additional data. Valid tags are any property of the <see cref="T:RiotNet.Models.StaticSummonerSpell"/> or <see cref="T:RiotNet.Models.StaticSummonerSpellList"/> objects. Only type, version, data, id, key, name, description, and summonerLevel are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.RiotClient.GetStaticSummonerSpellById(System.Int32,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets summoner spell details by ID. This method uses the LoL Static Data API.
            </summary>
            <param name="id">The summoner spell ID.</param>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. A list of valid versions can be obtained from <see cref="M:RiotNet.RiotClient.GetStaticVersions"/>.</param>
            <param name="spellData">Tags to return additional data. Valid tags are any property of the <see cref="T:RiotNet.Models.StaticSummonerSpell"/> object. Only id, key, name, description, and summonerLevel are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.</param>
            <returns>A <see cref="T:RiotNet.Models.StaticSummonerSpell"/>.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.RiotClient.GetStaticSummonerSpellByIdAsync(System.Int32,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets summoner spell details by ID.
            </summary>
            <param name="id">The summoner spell ID.</param>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. A list of valid versions can be obtained from <see cref="M:RiotNet.RiotClient.GetVersionsAsync"/>.</param>
            <param name="spellData">Tags to return additional data. Valid tags are any property of the <see cref="T:RiotNet.Models.StaticSummonerSpell"/> object. Only id, key, name, description, and summonerLevel are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.RiotClient.GetStaticVersions">
            <summary>
            Gets the list of available game versions. This method uses the LoL Static Data API.
            </summary>
            <returns>The list of versions.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.RiotClient.GetVersionsAsync">
            <summary>
            Gets the list of available game versions. This method uses the LoL Static Data API.
            </summary>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="P:RiotNet.RiotClient.StatsApiVersion">
            <summary>
            Gets the currently supported version of the Stats API that the client communicates with.
            </summary>
        </member>
        <member name="M:RiotNet.RiotClient.GetRankedStats(System.Int64,System.Nullable{RiotNet.Models.Season})">
            <summary>
            Gets the ranked stats for a summoner. Includes ranked stats for Summoner's Rift and Twisted Treeline. This method uses the Stats API.
            </summary>
            <param name="summonerId">The summoner's summoner IDs.</param>
            <param name="season">The season to get ranked stats for. If unspecified, stats for the current season are returned.</param>
            <returns>The ranked stats for the summoner for the specified season.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetRankedStatsAsync(System.Int64,System.Nullable{RiotNet.Models.Season})">
            <summary>
            Gets the ranked stats for a summoner. Includes ranked stats for Summoner's Rift and Twisted Treeline. This method uses the Stats API.
            </summary>
            <param name="summonerId">The summoner's summoner IDs.</param>
            <param name="season">The season to get ranked stats for. If unspecified, stats for the current season are returned.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetStatsSummary(System.Int64,System.Nullable{RiotNet.Models.Season})">
            <summary>
            Gets aggregated stats for a summoner. This method uses the Stats API.
            </summary>
            <param name="summonerId">The summoner's summoner IDs.</param>
            <param name="season">The season to get stats for. If unspecified, stats for the current season are returned.</param>
            <returns>The aggregated stats for the summoner for the specified season. One summary is returned per queue type.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetStatsSummaryAsync(System.Int64,System.Nullable{RiotNet.Models.Season})">
            <summary>
            Gets aggregated stats for a summoner. This method uses the Stats API.
            </summary>
            <param name="summonerId">The summoner's summoner IDs.</param>
            <param name="season">The season to get stats for. If unspecified, stats for the current season are returned.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="P:RiotNet.RiotClient.LolStatusApiVersion">
            <summary>
            Gets the currently supported version of the LoL Status API that the client communicates with.
            </summary>
        </member>
        <member name="M:RiotNet.RiotClient.GetShards">
            <summary>
            Gets the list of shards for all reagions. This method uses the LoL Status API.
            </summary>
            <returns>The shards.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.RiotClient.GetShardsAsync">
            <summary>
            Gets the list of shards for all reagions. This method uses the LoL Status API.
            </summary>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.RiotClient.GetShardStatus">
            <summary>
            Gets the status of the shard for the current region. This method uses the LoL Status API.
            </summary>
            <returns>The shard's status.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetShardStatusAsync">
            <summary>
            Gets the status of the shard for the current region. This method uses the LoL Status API.
            </summary>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="P:RiotNet.RiotClient.SummonerApiVersion">
            <summary>
            Gets the currently supported version of the Summoner API that the client communicates with.
            </summary>
        </member>
        <member name="M:RiotNet.RiotClient.GetSummonersBySummonerNames(System.String[])">
            <summary>
            Gets the summoner information for each summoner whose summoner name is in summonerNames. This method uses the Summoner API.
            </summary>
            <param name="summonerNames">The summoner names. The maximum allowed at once is 40.</param>
            <returns>The mapping from standardized summoner name (all lowercase, spaces removed) to summoner information.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetSummonersBySummonerNamesAsync(System.String[])">
            <summary>
            Gets the summoner information for each summoner whose summoner name is in summonerNames. This method uses the Summoner API.
            </summary>
            <param name="summonerNames">The summoner names. The maximum allowed at once is 40.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetSummonerBySummonerName(System.String)">
            <summary>
            Gets the summoner information for the specified summoner. This method uses the Summoner API.
            </summary>
            <param name="summonerName">The summoner name.</param>
            <returns>A <see cref="T:RiotNet.Models.Summoner"/>.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetSummonerBySummonerNameAsync(System.String)">
            <summary>
            Gets the summoner information for the specified summoner. This method uses the Summoner API.
            </summary>
            <param name="summonerName">The summoner name.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetSummonersBySummonerIds(System.Int64[])">
            <summary>
            Gets the summoner information for each summoner whose summoner ID is in summonerIds. This method uses the Summoner API.
            </summary>
            <param name="summonerIds">The summoner IDs. The maximum allowed at once is 40.</param>
            <returns>The mapping from summoner ID to summoner information.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetSummonersBySummonerIdsAsync(System.Int64[])">
            <summary>
            Gets the summoner information for each summoner whose summoner ID is in summonerIds. This method uses the Summoner API.
            </summary>
            <param name="summonerIds">The summoner IDs. The maximum allowed at once is 40.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetSummonerBySummonerId(System.Int64)">
            <summary>
            Gets the summoner information for the specified summoner. This method uses the Summoner API.
            </summary>
            <param name="summonerId">The summoner ID.</param>
            <returns>A <see cref="T:RiotNet.Models.Summoner"/>.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetSummonerBySummonerIdAsync(System.Int64)">
            <summary>
            Gets the summoner information for the specified summoner. This method uses the Summoner API.
            </summary>
            <param name="summonerId">The summoner ID.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetSummonerMasteriesBySummonerIds(System.Int64[])">
            <summary>
            Gets the mastery pages for each summoner whose summoner ID is in summonerIds. This method uses the Summoner API.
            </summary>
            <param name="summonerIds">The summoner IDs. The maximum allowed at once is 40.</param>
            <returns>The mapping from summoner ID to collection of mastery pages.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetSummonerMasteriesBySummonerIdsAsync(System.Int64[])">
            <summary>
            Gets the mastery pages for each summoner whose summoner ID is in summonerIds. This method uses the Summoner API.
            </summary>
            <param name="summonerIds">The summoner IDs. The maximum allowed at once is 40.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetSummonerNamesBySummonerIds(System.Int64[])">
            <summary>
            Gets the summoner name for each summoner whose summoner ID is in summonerIds. This method uses the Summoner API.
            </summary>
            <param name="summonerIds">The summoner IDs. The maximum allowed at once is 40.</param>
            <returns>The mapping from summoner ID to summoner name.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetSummonerNamesBySummonerIdsAsync(System.Int64[])">
            <summary>
            Gets the summoner name for each summoner whose summoner ID is in summonerIds. This method uses the Summoner API.
            </summary>
            <param name="summonerIds">The summoner IDs. The maximum allowed at once is 40.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetSummonerRunesBySummonerIds(System.Int64[])">
            <summary>
            Gets the rune pages for each summoner whose summoner ID is in summonerIds. This method uses the Summoner API.
            </summary>
            <param name="summonerIds">The summoner IDs. The maximum allowed at once is 40.</param>
            <returns>The mapping from summoner ID to collection of rune pages.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetSummonerRunesBySummonerIdsAsync(System.Int64[])">
            <summary>
            Gets the rune pages for each summoner whose summoner ID is in summonerIds. This method uses the Summoner API.
            </summary>
            <param name="summonerIds">The summoner IDs. The maximum allowed at once is 40.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="P:RiotNet.RiotClient.TournamentApiVersion">
            <summary>
            Gets the currently supported version of the Tournament API that the client communicates with.
            </summary>
        </member>
        <member name="M:RiotNet.RiotClient.CreateTournamentProvider(System.String)">
            <summary>
            Registers the current client as a tournament provider. This method uses the Tournament API. This endpoint is only accessible if you have a tournament API key.
            </summary>
            <param name="url">The provider's callback URL to which tournament game results in this region should be posted.</param>
            <returns>The registered providerId.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.CreateTournamentProviderAsync(System.String)">
            <summary>
            Registers the current client as a tournament provider. This method uses the Tournament API. This endpoint is only accessible if you have a tournament API key.
            </summary>
            <param name="url">The provider's callback URL to which tournament game results in this region should be posted.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.CreateTournament(System.Int64,System.String)">
            <summary>
            Creates a tournament. This method uses the Tournament API. This endpoint is only accessible if you have a tournament API key.
            </summary>
            <param name="providerId">The providerId obtained from <see cref="M:RiotNet.RiotClient.CreateTournamentProvider(System.String)"/>.</param>
            <param name="name">The optional name of the tournament.</param>
            <returns>The tournamentId.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.CreateTournamentAsync(System.Int64,System.String)">
            <summary>
            Creates a tournament. This method uses the Tournament API. This endpoint is only accessible if you have a tournament API key.
            </summary>
            <param name="providerId">The providerId obtained from <see cref="M:RiotNet.RiotClient.CreateTournamentProvider(System.String)"/>.</param>
            <param name="name">The optional name of the tournament.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.CreateTournamentCode(System.Int64,System.Nullable{System.Int32},System.Collections.Generic.List{System.Int64},RiotNet.Models.MapType,RiotNet.Models.PickType,RiotNet.Models.SpectatorType,System.Int32,System.String)">
            <summary>
            Creates one or more tournament codes. This method uses the Tournament API. This endpoint is only accessible if you have a tournament API key.
            </summary>
            <param name="tournamentId">The tournament ID obtained from <see cref="M:RiotNet.RiotClient.CreateTournament(System.Int64,System.String)"/>.</param>
            <param name="count">The number of codes to create (max 1000).</param>
            <param name="allowedSummonerIds">Optional list of participants in order to validate the players eligible to join the lobby.</param>
            <param name="mapType">The map type of the game.</param>
            <param name="pickType">The pick type of the game.</param>
            <param name="spectatorType">The spectator type of the game.</param>
            <param name="teamSize">The team size of the game. Valid values are 1-5.</param>
            <param name="metadata">Optional string that may contain any data in any format, if specified at all. Used to denote any custom information about the game.</param>
            <returns>A list of tournament codes.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.CreateTournamentCodeAsync(System.Int64,System.Nullable{System.Int32},System.Collections.Generic.List{System.Int64},RiotNet.Models.MapType,RiotNet.Models.PickType,RiotNet.Models.SpectatorType,System.Int32,System.String)">
            <summary>
            Creates one or more tournament codes. This method uses the Tournament API. This endpoint is only accessible if you have a tournament API key.
            </summary>
            <param name="tournamentId">The tournament ID obtained from <see cref="M:RiotNet.RiotClient.CreateTournamentAsync(System.Int64,System.String)"/>.</param>
            <param name="count">The number of codes to create (max 1000).</param>
            <param name="allowedSummonerIds">Optional list of participants in order to validate the players eligible to join the lobby.</param>
            <param name="mapType">The map type of the game.</param>
            <param name="pickType">The pick type of the game.</param>
            <param name="spectatorType">The spectator type of the game.</param>
            <param name="teamSize">The team size of the game. Valid values are 1-5.</param>
            <param name="metadata">Optional string that may contain any data in any format, if specified at all. Used to denote any custom information about the game.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetTournamentCode(System.String)">
            <summary>
            Gets the details of a tournament code. This method uses the Tournament API. This endpoint is only accessible if you have a tournament API key.
            </summary>
            <param name="tournamentCode">The tournament code obtained from <see cref="M:RiotNet.RiotClient.CreateTournamentCode(System.Int64,System.Nullable{System.Int32},System.Collections.Generic.List{System.Int64},RiotNet.Models.MapType,RiotNet.Models.PickType,RiotNet.Models.SpectatorType,System.Int32,System.String)"/>.</param>
            <returns>The tournament code details.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetTournamentCodeAsync(System.String)">
            <summary>
            Gets the details of a tournament code. This method uses the Tournament API. This endpoint is only accessible if you have a tournament API key.
            </summary>
            <param name="tournamentCode">The tournament code obtained from <see cref="M:RiotNet.RiotClient.CreateTournamentCodeAsync(System.Int64,System.Nullable{System.Int32},System.Collections.Generic.List{System.Int64},RiotNet.Models.MapType,RiotNet.Models.PickType,RiotNet.Models.SpectatorType,System.Int32,System.String)"/>.</param>
            <returns>The tournament code details.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.UpdateTournamentCode(System.String,System.Collections.Generic.List{System.Int64},RiotNet.Models.MapType,RiotNet.Models.PickType,RiotNet.Models.SpectatorType)">
            <summary>
            Saves changes to a tournament code. This method uses the Tournament API. This endpoint is only accessible if you have a tournament API key.
            </summary>
            <param name="tournamentCode">The tournament code obtained from <see cref="M:RiotNet.RiotClient.CreateTournamentCode(System.Int64,System.Nullable{System.Int32},System.Collections.Generic.List{System.Int64},RiotNet.Models.MapType,RiotNet.Models.PickType,RiotNet.Models.SpectatorType,System.Int32,System.String)"/>.</param>
            <param name="allowedSummonerIds">Optional list of participants in order to validate the players eligible to join the lobby.</param>
            <param name="mapType">The map type of the game.</param>
            <param name="pickType">The pick type of the game.</param>
            <param name="spectatorType">The spectator type of the game.</param>
        </member>
        <member name="M:RiotNet.RiotClient.UpdateTournamentCodeAsync(System.String,System.Collections.Generic.List{System.Int64},RiotNet.Models.MapType,RiotNet.Models.PickType,RiotNet.Models.SpectatorType)">
            <summary>
            Saves changes to a tournament code. This method uses the Tournament API. This endpoint is only accessible if you have a tournament API key.
            </summary>
            <param name="tournamentCode">The tournament code obtained from <see cref="M:RiotNet.RiotClient.CreateTournamentCodeAsync(System.Int64,System.Nullable{System.Int32},System.Collections.Generic.List{System.Int64},RiotNet.Models.MapType,RiotNet.Models.PickType,RiotNet.Models.SpectatorType,System.Int32,System.String)"/>.</param>
            <param name="allowedSummonerIds">Optional list of participants in order to validate the players eligible to join the lobby.</param>
            <param name="mapType">The map type of the game.</param>
            <param name="pickType">The pick type of the game.</param>
            <param name="spectatorType">The spectator type of the game.</param>
        </member>
        <member name="M:RiotNet.RiotClient.UpdateTournamentCode(RiotNet.Models.TournamentCode)">
            <summary>
            Saves changes to a tournament code. This method uses the Tournament API. This endpoint is only accessible if you have a tournament API key.
            </summary>
            <param name="tournamentCode">The tournament code to update. Only the Code, Participants, MapType, PickType, and SpectatorType proerties are used.</param>
        </member>
        <member name="M:RiotNet.RiotClient.UpdateTournamentCodeAsync(RiotNet.Models.TournamentCode)">
            <summary>
            Saves changes to a tournament code. This method uses the Tournament API. This endpoint is only accessible if you have a tournament API key.
            </summary>
            <param name="tournamentCode">The tournament code to update. Only the Code, Participants, MapType, PickType, and SpectatorType proerties are used.</param>
        </member>
        <member name="M:RiotNet.RiotClient.GetTournamentCodeLobbyEvents(System.String)">
            <summary>
            Gets the events that happened in the lobby of atournament code game. This method uses the Tournament API. This endpoint is only accessible if you have a tournament API key.
            </summary>
            <param name="tournamentCode">The tournament code obtained from <see cref="M:RiotNet.RiotClient.CreateTournamentCode(System.Int64,System.Nullable{System.Int32},System.Collections.Generic.List{System.Int64},RiotNet.Models.MapType,RiotNet.Models.PickType,RiotNet.Models.SpectatorType,System.Int32,System.String)"/>.</param>
            <returns>The tournament code details.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetTournamentCodeLobbyEventsAsync(System.String)">
            <summary>
            Gets the events that happened in the lobby of atournament code game. This method uses the Tournament API. This endpoint is only accessible if you have a tournament API key.
            </summary>
            <param name="tournamentCode">The tournament code obtained from <see cref="M:RiotNet.RiotClient.CreateTournamentCodeAsync(System.Int64,System.Nullable{System.Int32},System.Collections.Generic.List{System.Int64},RiotNet.Models.MapType,RiotNet.Models.PickType,RiotNet.Models.SpectatorType,System.Int32,System.String)"/>.</param>
            <returns>The tournament code details.</returns>
        </member>
        <member name="P:RiotNet.RiotClient.TeamApiVersion">
            <summary>
            Gets the currently supported version of the Team API that the client communicates with.
            </summary>
        </member>
        <member name="M:RiotNet.RiotClient.GetTeamsBySummonerIds(System.Int64[])">
            <summary>
            Gets, for every summoner in summonerIds, the teams that summoner is on. This method uses the Team API.
            </summary>
            <param name="summonerIds">The summoner IDs. The maximum allowed at once is 10.</param>
            <returns>The mapping from summoner ID to the teams that summoner is on.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetTeamsBySummonerIdsAsync(System.Int64[])">
            <summary>
            Gets, for every summoner in summonerIds, the teams that summoner is on. This method uses the Team API.
            </summary>
            <param name="summonerIds">The summoner IDs. The maximum allowed at once is 10.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetTeamsByTeamIds(System.String[])">
            <summary>
            Gets the team corresponding to each team ID. This method uses the Team API.
            </summary>
            <param name="teamIds">The team IDs. The maximum allowed at once is 10.</param>
            <returns>The mapping from team IDs to teams.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetTeamsByTeamIdsAsync(System.String[])">
            <summary>
            Gets the team corresponding to each team ID. This method uses the Team API.
            </summary>
            <param name="teamIds">The team IDs. The maximum allowed at once is 10.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="T:RiotNet.RiotClientSettings">
            <summary>
            Contains settings for a <see cref="T:RiotNet.RiotClient"/>.
            </summary>
        </member>
        <member name="M:RiotNet.RiotClientSettings.#ctor">
            <summary>
            Creates a new <see cref="T:RiotNet.RiotClientSettings"/> instance.
            </summary>
        </member>
        <member name="P:RiotNet.RiotClientSettings.ApiKey">
            <summary>
            Gets or sets the Riot API key to use.
            NOTE: If you are using a public repository, do NOT check you API key in to the repository.
            It is recommended to load your API key from a separate file (e.g. key.txt) that is ignored by your repository.
            </summary>
        </member>
        <member name="P:RiotNet.RiotClientSettings.RetryOnTimeout">
            <summary>
            Gets or sets how the <see cref="T:RiotNet.RiotClient"/> should handle the case where the request times out.
            </summary>
        </member>
        <member name="P:RiotNet.RiotClientSettings.RetryOnConnectionFailure">
            <summary>
            Gets or sets how the <see cref="T:RiotNet.RiotClient"/> should handle the case where the client fails to connect to the server.
            </summary>
        </member>
        <member name="P:RiotNet.RiotClientSettings.RetryOnRateLimitExceeded">
            <summary>
            Gets or sets how the <see cref="T:RiotNet.RiotClient"/> should handle the case where the rate limit is exceeded.
            </summary>
        </member>
        <member name="P:RiotNet.RiotClientSettings.RetryOnServerError">
            <summary>
            Gets or sets how the <see cref="T:RiotNet.RiotClient"/> should handle the case where server returns an error code of 500 or higher.
            </summary>
            <remarks>
            This is true by default because it seems that the Riot Games API intermittently returns 50x response codes. This can be resolved by re-sending the request.
            </remarks>
        </member>
        <member name="P:RiotNet.RiotClientSettings.ThrowOnError">
            <summary>
            Gets or sets whether the client should throw an exception if an error occurred during the request (that is, the request did not complete, or it completed with a response code of 400 or higher, except for 404 errors).
            </summary>
        </member>
        <member name="P:RiotNet.RiotClientSettings.ThrowOnNotFound">
            <summary>
            Gets or sets whether the client should throw an exception if the server responded with a Not Found (404) error.
            </summary>
        </member>
        <member name="P:RiotNet.RiotClientSettings.MaxRequestAttempts">
            <summary>
            Gets or sets the maximum number of times that the same request should be attempted. Applies only if one of the RequestErrorHandling modes is set to Retry.
            </summary>
        </member>
        <member name="T:RiotNet.RiotNetContractResolver">
            <summary>
            The default Json.Net contract resolver used by the <see cref="T:RiotNet.RiotClient"/>.
            </summary>
        </member>
        <member name="M:RiotNet.RiotNetContractResolver.CreateDynamicContract(System.Type)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonDynamicContract"/> for the given type.
            </summary>
            <param name="objectType">The type of the object.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonDynamicContract"/>.</returns>
        </member>
    </members>
</doc>
